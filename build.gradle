import java.nio.file.Paths

// project plugins
plugins {
  id 'java'
  id 'com.diffplug.gradle.spotless' version '3.16.0'
}

// dependencies repositories
repositories {
  mavenCentral()
  flatDir {
    dirs 'lib'
  }
}

// compile and test dependencies
dependencies {
  implementation name: 'java-cup-11b'
  implementation 'com.jfoenix:jfoenix:8.0.8'
  implementation 'org.fxmisc.richtext:richtextfx:0.9.2'
  testCompile 'junit:junit:4.12'
  testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
  testCompile 'org.junit.jupiter:junit-jupiter-params:5.3.2'
  testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
}

// redefine source files
sourceSets {
  main {
    java {
      srcDirs = ['vsim']
    }
    resources {
      srcDirs = ['resources']
    }
  }
  test {
    java {
      srcDirs = [Paths.get("test", "vsim")]
    }
    resources {
      srcDirs = [Paths.get("test", "resources")]
    }
  }
}

// Java target version
sourceCompatibility = 1.8

// jar distribution file
version = '2.0.0'
archivesBaseName = 'V-Sim'
jar {
  manifest {
    attributes (
      'Main-Class': 'vsim.VSim',
      'Implementation-Title': 'V-Sim',
      'Implementation-Version': version
    )
  }
  // create fat jar
  from {
    configurations.runtimeClasspath.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
}

// test config
test {
  useJUnitPlatform()
  dependsOn 'cleanTest'
  testLogging {
    events "passed", "skipped", "failed"
  }
}

// Java code style formatter
spotless {
  java {
    licenseHeaderFile 'LICENSE_HEADER'
    importOrder 'java', 'javax', 'com', 'org', 'vsim', ''
    eclipse().configFile 'format.xml'
    removeUnusedImports()
    trimTrailingWhitespace()
  }
}

// delete previous lexer class
task deleteLexer(type: Delete) {
  delete Paths.get("vsim", "assembler", "Lexer.java")
}

// create main lexer class
task lexer(type: Exec) {
  dependsOn 'deleteLexer'
  commandLine([
    'java', '-jar', Paths.get("lib", "jflex-1.7.0.jar"),
    Paths.get("syntax", "lexer.flex"), "-d", Paths.get("vsim", "assembler")
  ])
}

// delete previous GUI lexer class
task deleteGUILexer(type: Delete) {
  delete Paths.get("vsim", "gui", "utils", "Lexer.java")
}

// create GUI lexer class
task GUILexer(type: Exec) {
  dependsOn 'deleteGUILexer'
  commandLine([
    'java', '-jar', Paths.get("lib", "jflex-1.7.0.jar"),
    Paths.get("syntax", "guilexer.flex"), "-d", Paths.get("vsim", "gui", "utils")
  ])
}

// delete main parser class
task deleteParser(type: Delete) {
  delete Paths.get("vsim", "assembler", "Parser.java")
}

// delete main parser symbols class
task deleteToken(type: Delete) {
  delete Paths.get("vsim", "assembler", "Token.java")
}

// create main parser and symbols class
task parser(type: Exec) {
  dependsOn 'deleteParser'
  dependsOn 'deleteToken'
  commandLine([
    'java', '-jar', Paths.get("lib", "java-cup-11b.jar"),
    "-parser", "Parser", "-symbols", "Token", "-destdir",
    Paths.get("vsim", "assembler"), Paths.get("syntax", "parser.cup")
  ])
}

// creates lexers and parser
task syntax() {
  dependsOn 'lexer'
  dependsOn 'GUILexer'
  dependsOn 'parser'
  dependsOn 'spotlessApply'
}

// create a task for running riscv-tests
task riscv_tests(type: Exec) {
  workingDir '.'
  commandLine 'python3', 'test.py'
}

// execute this task after creating the jar distribution file
riscv_tests.dependsOn(jar)

// run riscv_tests task after test task
test.finalizedBy(riscv_tests)
