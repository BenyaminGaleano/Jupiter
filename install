#!/usr/bin/env bash

{

  #------------------------------------- UTILS ---------------------------------

  # verifies if a command exists
  # @param $1 command to verify
  vsim_has() {
    type "$1" &> /dev/null
  }

  # downloads a file
  # @param $1 url
  # @param $2 output name
  vsim_download() {
    if vsim_has 'curl'; then
      curl "$1" -L -o "$2" > /dev/null 2>&1
    elif vsim_has 'wget'; then
      wget -O "$2" "$1" > /dev/null 2>&1
    fi
  }

  # tries a profile file
  # @param $1 file
  vsim_try_profile() {
    if [ -z "${1-}" ] || [ ! -f "${1}" ]; then
      return 1
    fi
    echo "${1}"
  }

  # auto-detect profile
  vsim_detect_profile() {
    # the user has specifically requested NOT to have V-Sim touch their profile
    if [ "${PROFILE-}" == '/dev/null' ]; then
      return
    fi
    # defined user profile
    if [ -n "${PROFILE-}" ] && [ -f "${PROFILE}" ]; then
      echo "${PROFILE}"
      return
    fi

    local DETECTED_PROFILE
    DETECTED_PROFILE=''

    # BASH
    if [ -n "${BASH_VERSION-}" ]; then
      if [ -f "$HOME/.bashrc" ]; then
        DETECTED_PROFILE="$HOME/.bashrc"
      elif [ -f "$HOME/.bash_profile" ]; then
        DETECTED_PROFILE="$HOME/.bash_profile"
      fi
    # ZSH
    elif [ -n "${ZSH_VERSION-}" ]; then
      if [ -f "$HOME/.zshrc" ]; then
        DETECTED_PROFILE="$HOME/.zshrc"
      fi
    fi
    # try again with .profile also
    if [ -z "$DETECTED_PROFILE" ]; then
      for EACH_PROFILE in '.profile' '.bashrc' '.bash_profile' '.zshrc'; do
        if [ DETECTED_PROFILE="$(try_profile "$HOME/$PROFILE")" ]; then
          break
        fi
      done
    fi
    # print detected profile
    if [ -n "$DETECTED_PROFILE" ]; then
      echo "$DETECTED_PROFILE"
    fi
  }

  #------------------------------------- V-Sim ---------------------------------

  # current V-Sim version
  vsim_version() {
    echo "2.0.1"
  }

  # vsim md5sum
  vsim_md5sum() {
    echo "86d65b2641653315ad6efe95e2709157"
  }

  # pretty prints title
  vsim_title() {
    printf "        _   __    _____\n"
    printf "       | | / /___/ __(_)_ _\n"
    printf "       | |/ /___/\\ \\/ /  ' \\ \n"
    printf "       |___/   /___/_/_/_/_/\n\n"
    printf "RISC-V Assembler & Runtime Simulator\n"
    printf "             Installer\n\n"
    printf "version: $(vsim_version)\n\n"
  }

  # gets V-Sim jar file
  vsim_jar() {
    echo "V-Sim-$(vsim_version).jar"
  }

  # gets V-Sim release link
  vsim_url() {
    echo "https://github.com/andrescv/V-Sim/releases/download/v$(vsim_version)/$(vsim_jar)"
  }

  # gets V-Sim default installation directory
  vsim_default_install_dir() {
    printf "$HOME/.vsim"
  }

  # gets V-Sim installation directory
  vsim_install_dir() {
    if [ -n "$VSIM_DIR" ]; then
      echo "$VSIM_DIR"
    else
      vsim_default_install_dir
    fi
  }

  # downloads V-Sim
  vsim_download_jar() {
    # download files
    printf "downloading V-Sim version: $(vsim_version)...\n"
    vsim_download "$(vsim_url)" "$(vsim_install_dir)/$(vsim_jar)" || {
      printf 'an error occurs while downloading V-Sim, try again\n'
      exit 1
    }
    # check sum if possible
    local CHECKSUM
    if vsim_has 'md5sum'; then
      printf 'checking md5sum... '
      CHECKSUM=($(md5sum $(vsim_install_dir)/$(vsim_jar)))
      if [ "$(vsim_md5sum)" != "$CHECKSUM" ]; then
        printf 'MD5SUM does not match, the downloaded file is corrupted :( try again\n'
        exit 1
      fi
      printf 'OK\n'
    fi
  }

  # installs or updates V-Sim
  vsim_install() {
    clear
    vsim_title
    # only install if java 8 (or later) is installed
    if ! vsim_has 'java'; then
      printf 'you need Java SE 8 (or later) runtime environment (JRE) installed on your computer\n'
      exit 1
    fi
    # also test if curl or wget is available
    if ! vsim_has 'wget' || ! vsim_has 'curl'; then
      printf 'you need curl or wget to install V-Sim\n'
      exit 1
    fi
    # create install directory
    if [ -d "$(vsim_install_dir)" ]; then
      printf "V-Sim installation directory ($(vsim_install_dir)) already exists (updating)\n"
      # clean old files
      printf 'cleaning old files...\n'
      find "$(vsim_install_dir)" -name '*.jar' -delete
      find "$(vsim_install_dir)" -name 'vsim' -delete
    else
      printf "creating V-Sim installation directory ($(vsim_install_dir))...\n"
      mkdir -p "$(vsim_install_dir)" || {
        exit 1
      }
    fi
    # download jar file
    vsim_download_jar
    # create V-Sim launcher
    printf 'creating vsim launcher script...\n'
    printf "java -jar $(vsim_install_dir)/$(vsim_jar) %s" '$@' > "$(vsim_install_dir)/vsim"
    chmod +x "$(vsim_install_dir)/vsim"
    # append source to profile
    local VSIM_PROFILE
    VSIM_PROFILE=$(vsim_detect_profile)
    local SOURCE_STR
    SOURCE_STR="\n# V-Sim\nexport VSIM_DIR=\"$(vsim_install_dir)\"\nexport PATH=\"\$VSIM_DIR:\$PATH\"\n"
    # append source to profile
    if [ -z "$VSIM_PROFILE" ]; then
      printf '\nprofile not found tried: ~/.bashrc, ~/.bash_profile, ~/.zshrc, and ~/.profile.\n'
      printf 'create one of them and run this script again\n'
      printf 'or append the following lines to the correct file yourself:\n'
      printf "${SOURCE_STR}\n"
      printf 'then source it\n'
    else
      # find source string in profile
      if ! command grep -qc "$(vsim_install_dir)" "${VSIM_PROFILE}"; then
        printf "appending V-Sim source string to ${VSIM_PROFILE}\n"
        printf "${SOURCE_STR}" >> "${VSIM_PROFILE}"
      else
        printf "V-Sim source string already in ${VSIM_PROFILE}\n"
      fi
      printf '\nnow source your profile with:\n\n'
      printf "source $VSIM_PROFILE\n"
    fi
    printf "\n=> all done\n"
  }

  # call V-Sim installer
  vsim_install

}
