/*
Copyright (C) 2018-2019 Andres Castellanos

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>
*/

package vsim.assembler;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a> 1.7.0 from the specification file
 * <tt>V-Sim/src/syntax/lexer.flex</tt>
 */
public final class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;
  public static final int SBACKSLASH = 6;
  public static final int CHARACTER = 8;
  public static final int CBACKSLASH = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in the DFA for the
   * lexical state l at the beginning of a line l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\0\1\105\1\7\1\11\1\11\1\10\22\0\1\105\1\0\1\5"
      + "\1\13\3\0\1\12\1\3\1\4\1\0\1\104\1\2\1\104\1\1" + "\1\0\1\76\1\74\1\35\1\75\1\40\2\77\1\100\1\101\1\73"
      + "\1\103\1\13\5\0\1\53\1\42\1\56\1\60\1\43\1\70\1\45" + "\1\63\1\54\1\57\1\72\1\47\1\62\1\51\1\65\1\55\1\44"
      + "\1\66\1\64\1\50\1\46\1\61\1\71\1\67\1\102\1\52\1\0" + "\1\6\2\0\1\102\1\0\1\22\1\30\1\23\1\37\1\15\1\34"
      + "\1\27\1\32\1\24\1\57\1\72\1\33\1\62\1\26\1\17\1\21" + "\1\44\1\16\1\20\1\25\1\46\1\106\1\36\1\41\1\31\1\14"
      + "\12\0\1\11\u1fa2\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"
      + "\1\10\1\11\16\12\1\13\4\12\1\14\4\12\1\13" + "\1\1\1\15\1\16\2\17\1\20\1\21\1\22\2\23"
      + "\1\24\1\25\1\26\1\24\1\27\1\30\1\31\1\32" + "\1\33\1\34\1\35\1\36\1\37\2\40\1\41\1\42"
      + "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52" + "\1\53\1\54\13\0\1\55\2\0\2\55\1\0\1\12"
      + "\1\56\3\12\1\57\1\60\4\12\1\61\1\62\1\12" + "\1\63\1\12\1\57\13\12\1\64\1\65\1\66\1\67"
      + "\1\70\10\12\1\71\1\12\1\71\3\12\1\71\2\0" + "\2\12\1\57\1\72\2\12\1\73\27\0\4\12\1\74"
      + "\1\75\1\76\1\12\1\77\1\100\2\12\1\101\1\102" + "\1\103\1\104\1\105\3\12\1\106\1\107\1\110\1\111"
      + "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121" + "\2\12\1\122\12\12\1\123\6\12\1\55\1\0\1\124"
      + "\1\125\1\126\1\127\1\130\1\131\13\0\1\132\11\0" + "\2\12\1\133\1\134\1\135\1\136\1\137\1\140\1\141"
      + "\1\142\1\143\1\144\1\145\1\146\1\12\1\147\1\150" + "\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160"
      + "\1\161\1\162\1\0\12\12\2\0\6\12\1\0\1\163" + "\1\164\1\165\1\166\1\167\7\0\1\170\2\0\1\171"
      + "\1\172\1\173\2\0\1\174\1\0\1\175\1\12\1\176" + "\1\177\1\200\2\12\3\0\1\12\2\0\2\12\1\201"
      + "\1\202\1\0\2\12\3\0\1\203\3\12\1\204\3\0" + "\1\205\1\206\1\207\1\0\1\210\1\0\1\211\1\212"
      + "\1\0\2\12\1\0\1\213\1\214\1\215\3\12\1\216" + "\2\12\1\217\2\0\1\220\1\221\1\222\2\0\1\223"
      + "\1\224\1\0\1\225\1\226\2\0\1\227\3\0\1\12" + "\2\0\1\230\1\231\1\232\1\233\1\234\1\235\1\236"
      + "\1\237\1\240\1\241\1\0\1\242\1\243\1\244\1\245";

  private static int[] zzUnpackAction() {
    int[] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"
      + "\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u0238\0\u01aa\0\u01aa\0\u027f"
      + "\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7"
      + "\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef"
      + "\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927"
      + "\0\u096e\0\u01aa\0\u01aa\0\u01aa\0\u09b5\0\u01aa\0\u01aa\0\u01aa"
      + "\0\u01aa\0\u09fc\0\u01aa\0\u01aa\0\u01aa\0\u0a43\0\u01aa\0\u01aa"
      + "\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa"
      + "\0\u0a8a\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa"
      + "\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u0ad1\0\u0b18\0\u0b5f"
      + "\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97"
      + "\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u01aa"
      + "\0\u0fcf\0\u1016\0\u105d\0\u03e2\0\u10a4\0\u10eb\0\u1132\0\u1179"
      + "\0\u11c0\0\u03e2\0\u03e2\0\u1207\0\u03e2\0\u124e\0\u1295\0\u12dc"
      + "\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514"
      + "\0\u155b\0\u15a2\0\u03e2\0\u03e2\0\u15e9\0\u1630\0\u03e2\0\u1677"
      + "\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af"
      + "\0\u18f6\0\u03e2\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0"
      + "\0\u1ae7\0\u1b2e\0\u1b75\0\u03e2\0\u1bbc\0\u1c03\0\u03e2\0\u1c4a"
      + "\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82"
      + "\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"
      + "\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2"
      + "\0\u2339\0\u2380\0\u03e2\0\u23c7\0\u03e2\0\u240e\0\u2455\0\u249c"
      + "\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u03e2\0\u25ff\0\u2646\0\u268d"
      + "\0\u26d4\0\u271b\0\u03e2\0\u03e2\0\u03e2\0\u2762\0\u27a9\0\u27f0"
      + "\0\u2837\0\u287e\0\u28c5\0\u03e2\0\u03e2\0\u03e2\0\u290c\0\u2953"
      + "\0\u03e2\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44"
      + "\0\u2b8b\0\u2bd2\0\u2c19\0\u03e2\0\u2c60\0\u2ca7\0\u2cee\0\u2d35"
      + "\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26"
      + "\0\u1c4a\0\u1c91\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0"
      + "\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u01aa\0\u327a\0\u32c1"
      + "\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9"
      + "\0\u3540\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2"
      + "\0\u3587\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u35ce\0\u03e2\0\u03e2"
      + "\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2"
      + "\0\u03e2\0\u03e2\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778"
      + "\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0"
      + "\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u03e2\0\u03e2"
      + "\0\u03e2\0\u3ba1\0\u01aa\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04"
      + "\0\u3d4b\0\u3d92\0\u01aa\0\u3dd9\0\u3e20\0\u01aa\0\u01aa\0\u01aa"
      + "\0\u3e67\0\u3eae\0\u01aa\0\u3ef5\0\u03e2\0\u3f3c\0\u03e2\0\u03e2"
      + "\0\u22ab\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d"
      + "\0\u4174\0\u41bb\0\u4202\0\u22ab\0\u22ab\0\u4249\0\u4290\0\u42d7"
      + "\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u43f3\0\u443a\0\u4481\0\u03e2"
      + "\0\u44c8\0\u450f\0\u4556\0\u01aa\0\u459d\0\u01aa\0\u45e4\0\u01aa"
      + "\0\u462b\0\u01aa\0\u03e2\0\u4672\0\u46b9\0\u4700\0\u4747\0\u22ab"
      + "\0\u22ab\0\u22ab\0\u478e\0\u47d5\0\u481c\0\u22ab\0\u4863\0\u48aa"
      + "\0\u22ab\0\u48f1\0\u4938\0\u22ab\0\u22ab\0\u22ab\0\u497f\0\u49c6"
      + "\0\u03e2\0\u01aa\0\u4a0d\0\u01aa\0\u22ab\0\u4a54\0\u4a9b\0\u22ab"
      + "\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u22ab\0\u22ab"
      + "\0\u01aa\0\u01aa\0\u01aa\0\u22ab\0\u22ab\0\u22ab\0\u4c8c\0\u01aa" + "\0\u4cd3\0\u22ab\0\u22ab\0\u01aa\0\u01aa";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\7\1\10\1\11\1\12\1\13\1\14\1\7\3\15"
      + "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" + "\1\26\1\27\1\25\1\30\1\31\1\32\1\33\2\25"
      + "\1\34\1\35\1\36\1\25\1\37\1\36\1\40\1\33" + "\1\21\3\25\1\34\1\41\1\31\1\25\1\42\2\25"
      + "\1\27\1\43\1\37\1\25\1\44\1\25\1\45\1\23" + "\1\46\1\40\1\47\2\25\3\36\1\50\3\36\1\25"
      + "\1\7\1\51\1\52\1\25\7\53\1\54\1\55\1\54" + "\75\53\5\56\1\57\1\60\1\61\1\62\1\61\75\56"
      + "\5\63\1\64\1\65\1\63\1\66\1\63\1\67\3\63" + "\1\70\6\63\1\71\1\72\1\63\1\73\3\63\1\74"
      + "\41\63\1\75\7\63\1\76\6\56\1\77\1\100\1\101" + "\1\100\1\102\74\56\5\103\1\104\1\105\1\100\1\101"
      + "\1\100\1\106\3\103\1\107\6\103\1\110\1\111\1\103" + "\1\112\3\103\1\113\41\103\1\114\7\103\1\115\123\0"
      + "\1\116\1\0\1\117\1\0\1\120\1\121\1\122\2\0" + "\1\123\1\0\1\124\1\125\1\0\1\126\1\127\1\130"
      + "\1\131\1\132\1\133\1\134\32\0\7\135\14\0\3\15" + "\76\0\1\136\12\0\1\25\1\137\65\25\1\140\2\0"
      + "\1\25\1\0\1\136\12\0\7\25\1\141\4\25\1\142" + "\11\25\1\142\13\25\1\141\24\25\1\140\2\0\1\25"
      + "\1\0\1\136\12\0\1\25\1\143\4\25\1\144\20\25" + "\1\143\37\25\1\140\2\0\1\25\1\0\1\136\12\0"
      + "\2\25\1\145\47\25\1\145\14\25\1\140\2\0\1\25" + "\1\0\1\136\12\0\1\25\1\146\1\147\2\25\1\144"
      + "\4\25\1\150\1\151\1\152\1\25\1\153\1\154\1\25" + "\1\144\1\155\1\25\1\144\1\25\1\152\1\146\1\25"
      + "\1\151\1\156\1\154\1\25\1\150\11\25\1\153\2\25" + "\1\147\2\25\1\155\1\25\1\144\1\157\5\144\1\25"
      + "\1\140\2\0\1\25\1\0\1\136\12\0\67\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\12\25\1\160\6\25"
      + "\1\144\1\25\1\161\1\144\5\25\1\162\2\25\1\160" + "\6\25\1\161\13\25\5\144\2\25\1\140\2\0\1\25"
      + "\1\0\1\136\12\0\6\25\1\163\30\25\1\163\27\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\5\25\1\144"
      + "\1\164\12\25\1\144\2\25\1\144\12\25\1\164\20\25" + "\4\144\3\25\1\140\2\0\1\25\1\0\1\136\12\0"
      + "\1\25\1\165\1\25\1\166\23\25\1\165\21\25\1\166" + "\15\25\1\140\2\0\1\25\1\0\1\136\12\0\5\25"
      + "\1\144\61\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\1\25\1\167\10\25\1\170\1\171\3\25\1\172\7\25"
      + "\1\167\1\25\1\171\1\25\1\172\1\25\1\170\31\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\6\25\1\173"
      + "\1\25\1\174\3\25\1\175\1\25\1\176\3\25\1\177" + "\3\25\1\175\3\25\1\200\4\25\1\173\1\174\6\25"
      + "\1\176\5\25\1\177\11\25\1\140\2\0\1\25\1\0" + "\1\136\12\0\1\25\1\201\2\25\1\202\1\144\1\203"
      + "\1\204\1\25\1\205\1\206\4\25\1\207\1\25\1\210" + "\1\25\1\211\1\212\2\25\1\201\3\25\1\207\1\25"
      + "\1\206\1\25\1\213\2\25\1\204\1\25\1\211\1\25" + "\1\214\1\25\1\215\6\25\1\212\1\210\1\216\4\212"
      + "\1\25\1\140\2\0\1\25\1\0\1\217\13\0\1\220" + "\17\0\1\36\2\0\1\36\2\0\1\220\27\0\7\36"
      + "\6\0\1\136\12\0\10\25\1\221\27\25\1\221\26\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\3\25\1\222"
      + "\15\25\1\223\2\25\1\144\24\25\1\222\5\25\1\144" + "\1\223\1\157\4\144\1\25\1\140\2\0\1\25\1\0"
      + "\1\136\12\0\6\25\1\164\30\25\1\164\27\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\12\25\1\160\10\25"
      + "\1\161\6\25\1\162\2\25\1\160\6\25\1\161\22\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\2\25\1\224"
      + "\3\25\1\225\30\25\1\225\12\25\1\224\14\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\32\25\1\226\12\25"
      + "\1\227\21\25\1\140\2\0\1\227\1\0\1\136\12\0" + "\1\25\1\146\1\147\7\25\1\150\1\151\1\152\1\25"
      + "\1\153\1\154\2\25\1\155\3\25\1\152\1\146\1\25" + "\1\151\1\156\1\154\1\25\1\150\11\25\1\153\2\25"
      + "\1\147\2\25\1\155\11\25\1\140\2\0\1\25\1\0" + "\1\136\12\0\1\25\1\143\25\25\1\143\37\25\1\140"
      + "\2\0\1\25\1\0\1\136\12\0\1\25\1\201\2\25" + "\1\215\1\25\1\213\1\204\2\25\1\206\4\25\1\207"
      + "\1\25\1\210\1\25\1\211\1\212\2\25\1\201\3\25" + "\1\207\1\25\1\206\1\25\1\213\2\25\1\204\1\25"
      + "\1\211\1\25\1\214\1\25\1\215\6\25\1\212\1\210" + "\1\216\4\212\1\25\1\140\2\0\1\25\1\0\1\217"
      + "\13\0\1\220\12\0\1\230\4\0\1\36\2\0\1\36" + "\1\231\1\230\1\220\23\0\1\231\3\0\7\36\6\0"
      + "\1\217\33\0\1\36\2\0\1\36\32\0\7\36\14\0" + "\1\54\106\0\1\61\106\0\1\63\106\0\1\100\114\0"
      + "\1\232\110\0\1\233\104\0\1\234\3\0\1\235\3\0" + "\1\236\4\0\1\237\111\0\1\240\71\0\1\241\12\0"
      + "\1\242\70\0\1\243\124\0\1\244\73\0\1\245\1\0" + "\1\246\6\0\1\247\77\0\1\250\103\0\1\251\122\0"
      + "\1\252\70\0\1\220\12\0\1\253\4\0\1\135\2\0" + "\1\135\2\0\1\220\27\0\7\135\24\0\1\254\111\0"
      + "\1\255\101\0\1\220\12\0\1\256\4\0\1\135\2\0" + "\1\135\2\0\1\220\27\0\7\135\22\0\1\220\17\0"
      + "\1\135\2\0\1\135\2\0\1\220\27\0\7\135\21\0" + "\67\257\3\0\1\257\1\0\1\136\12\0\2\25\1\260"
      + "\64\25\1\140\2\0\1\25\1\0\1\136\12\0\6\25" + "\1\261\30\25\1\261\27\25\1\140\2\0\1\25\1\0"
      + "\1\136\12\0\2\25\1\262\47\25\1\262\14\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\11\25\1\263\22\25"
      + "\1\263\11\25\1\264\20\25\1\140\2\0\1\25\1\0" + "\1\136\12\0\10\25\1\265\27\25\1\265\26\25\1\140"
      + "\2\0\1\25\1\0\1\136\12\0\30\25\1\266\36\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\6\25\1\267"
      + "\10\25\1\270\13\25\1\270\3\25\1\267\27\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\1\25\1\271\25\25"
      + "\1\271\37\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\11\25\1\272\22\25\1\272\32\25\1\140\2\0\1\25"
      + "\1\0\1\136\12\0\11\25\1\273\5\25\1\274\13\25" + "\1\274\1\273\32\25\1\140\2\0\1\25\1\0\1\136"
      + "\12\0\14\25\1\275\11\25\1\275\40\25\1\140\2\0" + "\1\25\1\0\1\136\12\0\60\25\1\144\1\25\1\144"
      + "\4\25\1\140\2\0\1\25\1\0\1\136\12\0\23\25" + "\1\276\20\25\1\276\22\25\1\140\2\0\1\25\1\0"
      + "\1\136\12\0\23\25\1\277\20\25\1\277\22\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\10\25\1\300\27\25"
      + "\1\300\26\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\17\25\1\301\13\25\1\301\33\25\1\140\2\0\1\25"
      + "\1\0\1\136\12\0\10\25\1\302\27\25\1\302\26\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\13\25\1\303"
      + "\15\25\1\303\35\25\1\140\2\0\1\25\1\0\1\136" + "\12\0\5\25\1\304\3\25\1\305\22\25\1\305\4\25"
      + "\1\304\25\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\30\25\1\306\36\25\1\140\2\0\1\25\1\0\1\136"
      + "\12\0\1\25\1\307\25\25\1\307\37\25\1\140\2\0" + "\1\25\1\0\1\136\12\0\1\25\1\310\7\25\1\311"
      + "\15\25\1\310\4\25\1\311\32\25\1\140\2\0\1\25" + "\1\0\1\136\12\0\1\25\1\312\7\25\1\313\15\25"
      + "\1\312\4\25\1\313\32\25\1\140\2\0\1\25\1\0" + "\1\136\12\0\32\25\1\314\34\25\1\140\2\0\1\25"
      + "\1\0\1\136\12\0\32\25\1\315\34\25\1\140\2\0" + "\1\25\1\0\1\136\12\0\10\25\1\316\27\25\1\316"
      + "\26\25\1\140\2\0\1\25\1\0\1\136\12\0\30\25" + "\1\317\36\25\1\140\2\0\1\25\1\0\1\136\12\0"
      + "\13\25\1\320\5\25\1\212\1\321\1\25\1\212\3\25" + "\1\322\1\320\1\323\22\25\1\321\1\25\1\212\1\216"
      + "\5\212\1\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\14\25\1\324\4\25\1\212\1\25\1\325\1\212\1\25"
      + "\1\324\15\25\1\325\13\25\6\212\1\25\1\140\2\0" + "\1\25\1\0\1\136\12\0\17\25\1\326\13\25\1\326"
      + "\11\25\1\327\21\25\1\140\2\0\1\327\1\0\1\136" + "\12\0\21\25\1\212\2\25\1\212\32\25\1\212\1\216"
      + "\5\212\1\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\1\25\1\330\25\25\1\330\16\25\1\331\20\25\1\140"
      + "\2\0\1\25\1\0\1\136\12\0\1\25\1\332\7\25" + "\1\333\10\25\1\334\4\25\1\332\4\25\1\333\20\25"
      + "\1\334\11\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\21\25\1\212\2\25\1\212\32\25\7\212\1\25\1\140"
      + "\2\0\1\25\1\0\1\136\12\0\10\25\1\335\27\25" + "\1\335\26\25\1\140\2\0\1\25\1\0\1\136\12\0"
      + "\14\25\1\324\6\25\1\325\2\25\1\324\15\25\1\325" + "\22\25\1\140\2\0\1\25\1\0\1\136\12\0\4\25"
      + "\1\336\1\25\1\337\1\25\1\340\21\25\1\341\4\25" + "\1\337\1\340\4\25\1\342\2\25\1\336\16\25\1\140"
      + "\2\0\1\342\1\0\1\136\12\0\13\25\1\320\6\25" + "\1\321\5\25\1\322\1\320\1\323\22\25\1\321\11\25"
      + "\1\140\2\0\1\25\1\0\1\136\12\0\60\25\1\212" + "\1\25\1\212\4\25\1\140\2\0\1\25\35\0\1\135"
      + "\2\0\1\135\32\0\7\135\42\0\1\343\2\0\1\343" + "\32\0\7\343\2\0\1\344\3\0\1\136\12\0\45\25"
      + "\1\345\21\25\1\140\2\0\1\345\1\0\1\136\12\0" + "\2\25\1\346\47\25\1\346\14\25\1\140\2\0\1\25"
      + "\1\0\1\136\12\0\21\25\1\144\2\25\1\144\32\25" + "\7\144\1\25\1\140\2\0\1\25\1\0\1\136\12\0"
      + "\17\25\1\347\13\25\1\347\33\25\1\140\2\0\1\25" + "\1\0\1\136\12\0\17\25\1\350\13\25\1\350\33\25"
      + "\1\140\2\0\1\25\74\0\1\351\1\0\1\351\25\0" + "\1\352\4\0\2\352\4\0\1\352\3\0\2\352\1\0"
      + "\2\352\1\0\2\352\7\0\1\352\2\0\1\352\1\0" + "\1\352\7\0\1\352\2\0\7\352\23\0\1\353\127\0"
      + "\1\354\72\0\1\355\105\0\1\356\102\0\1\357\107\0" + "\1\360\111\0\1\361\107\0\1\362\107\0\1\363\123\0"
      + "\1\364\64\0\1\365\107\0\1\366\121\0\1\367\100\0" + "\1\370\114\0\1\371\101\0\1\372\77\0\1\373\120\0"
      + "\1\374\73\0\1\375\115\0\1\376\112\0\1\377\71\0" + "\67\257\1\140\2\0\1\257\1\0\1\136\12\0\3\25"
      + "\1\144\63\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\17\25\1\u0100\13\25\1\u0100\33\25\1\140\2\0\1\25"
      + "\1\0\1\136\12\0\1\25\1\u0101\25\25\1\u0101\37\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\32\25\1\u0102"
      + "\34\25\1\140\2\0\1\25\1\0\1\136\12\0\1\u0103" + "\35\25\1\u0103\30\25\1\140\2\0\1\25\1\0\1\136"
      + "\12\0\10\25\1\u0104\27\25\1\u0104\26\25\1\140\2\0" + "\1\25\1\0\1\136\12\0\10\25\1\u0105\27\25\1\u0105"
      + "\26\25\1\140\2\0\1\25\1\0\1\136\12\0\1\u0106" + "\35\25\1\u0106\30\25\1\140\2\0\1\25\1\0\1\136"
      + "\12\0\1\u0107\35\25\1\u0107\30\25\1\140\2\0\1\25" + "\1\0\1\136\12\0\1\u0108\7\25\1\u0109\21\25\1\u010a"
      + "\3\25\1\u0108\1\25\1\u0109\26\25\1\140\2\0\1\25" + "\1\0\1\136\12\0\10\25\1\u010b\27\25\1\u010b\26\25"
      + "\1\140\2\0\1\25\1\0\1\136\12\0\10\25\1\u010c" + "\27\25\1\u010c\26\25\1\140\2\0\1\25\1\0\1\136"
      + "\12\0\10\25\1\u010d\27\25\1\u010d\26\25\1\140\2\0" + "\1\25\1\0\1\136\12\0\5\25\1\u010e\33\25\1\u010e"
      + "\25\25\1\140\2\0\1\25\1\0\1\136\12\0\17\25" + "\1\u010f\13\25\1\u010f\33\25\1\140\2\0\1\25\1\0"
      + "\1\136\12\0\17\25\1\u0110\13\25\1\u0110\33\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\1\u0111\35\25\1\u0111"
      + "\30\25\1\140\2\0\1\25\1\0\1\136\12\0\1\u0112" + "\35\25\1\u0112\30\25\1\140\2\0\1\25\1\0\1\136"
      + "\12\0\1\u0113\31\25\1\u0114\3\25\1\u0113\30\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\1\u0115\31\25\1\u0116"
      + "\3\25\1\u0115\30\25\1\140\2\0\1\25\1\0\1\136" + "\12\0\1\u0117\31\25\1\u0118\3\25\1\u0117\30\25\1\140"
      + "\2\0\1\25\1\0\1\136\12\0\1\u0119\31\25\1\u011a" + "\3\25\1\u0119\30\25\1\140\2\0\1\25\1\0\1\u011b"
      + "\12\0\67\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\12\25\1\u011c\22\25\1\u011c\31\25\1\140\2\0\1\25"
      + "\1\0\1\136\12\0\2\25\1\u011d\47\25\1\u011d\14\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\14\25\1\u011e"
      + "\11\25\1\u011e\40\25\1\140\2\0\1\25\1\0\1\136" + "\12\0\4\25\1\u011f\43\25\1\u011f\16\25\1\140\2\0"
      + "\1\25\1\0\1\136\12\0\23\25\1\u0120\20\25\1\u0120" + "\22\25\1\140\2\0\1\25\1\0\1\136\12\0\6\25"
      + "\1\u0121\30\25\1\u0121\27\25\1\140\2\0\1\25\1\0" + "\1\136\12\0\11\25\1\u0122\22\25\1\u0122\32\25\1\140"
      + "\2\0\1\25\1\0\1\136\12\0\13\25\1\u0123\15\25" + "\1\u0123\35\25\1\140\2\0\1\25\1\0\1\136\12\0"
      + "\4\25\1\u0124\1\25\1\u0125\30\25\1\u0125\10\25\1\u0124" + "\16\25\1\140\2\0\1\25\1\0\1\u0126\12\0\67\25"
      + "\1\140\2\0\1\25\1\0\1\u0127\12\0\67\25\1\140" + "\2\0\1\25\1\0\1\136\12\0\45\25\1\u0128\21\25"
      + "\1\140\2\0\1\u0128\1\0\1\136\12\0\32\25\1\u0129" + "\34\25\1\140\2\0\1\25\1\0\1\136\12\0\23\25"
      + "\1\u012a\1\25\1\u012b\16\25\1\u012a\6\25\1\u012b\13\25" + "\1\140\2\0\1\25\1\0\1\136\12\0\12\25\1\u012c"
      + "\22\25\1\u012c\31\25\1\140\2\0\1\25\1\0\1\136" + "\12\0\17\25\1\u012d\13\25\1\u012d\33\25\1\140\2\0"
      + "\1\25\1\0\1\u012e\12\0\67\25\1\140\2\0\1\25" + "\35\0\1\343\2\0\1\343\32\0\7\343\6\0\1\136"
      + "\12\0\32\25\1\u012f\34\25\1\140\2\0\1\25\1\0" + "\1\136\12\0\10\25\1\u0130\27\25\1\u0130\26\25\1\140"
      + "\2\0\1\25\1\0\1\136\12\0\2\25\1\u0131\47\25" + "\1\u0131\14\25\1\140\2\0\1\25\1\0\1\136\12\0"
      + "\16\25\1\u0132\30\25\1\u0132\17\25\1\140\2\0\1\25" + "\17\0\1\u0133\111\0\1\u0134\111\0\1\u0135\104\0\1\u0136"
      + "\107\0\1\u0137\100\0\1\u0138\123\0\1\242\77\0\1\u0139"
      + "\111\0\1\u013a\104\0\1\u013b\111\0\1\u013c\102\0\1\u013d"
      + "\77\0\1\u013e\125\0\1\u013f\101\0\1\u0140\101\0\1\u0141"
      + "\111\0\1\u0142\120\0\1\u0140\71\0\1\u0143\111\0\1\u0144" + "\62\0\1\136\12\0\17\25\1\u0145\13\25\1\u0145\33\25"
      + "\1\140\2\0\1\25\1\0\1\136\12\0\6\25\1\u0146" + "\30\25\1\u0146\27\25\1\140\2\0\1\25\1\0\1\136"
      + "\12\0\32\25\1\u0147\34\25\1\140\2\0\1\25\1\0" + "\1\136\12\0\7\25\1\u0148\32\25\1\u0148\24\25\1\140"
      + "\2\0\1\25\14\0\4\257\1\u0149\43\257\1\u0149\16\257" + "\3\0\1\257\1\0\1\136\12\0\43\25\1\u014a\23\25"
      + "\1\140\2\0\1\25\1\0\1\136\12\0\11\25\1\u014b" + "\22\25\1\u014b\32\25\1\140\2\0\1\25\1\0\1\u014c"
      + "\12\0\67\25\1\140\2\0\1\25\1\0\1\u014d\12\0" + "\67\25\1\140\2\0\1\25\1\0\1\u014e\12\0\67\25"
      + "\1\140\2\0\1\25\1\0\1\136\12\0\4\25\1\u014f" + "\43\25\1\u014f\16\25\1\140\2\0\1\25\1\0\1\u0150"
      + "\12\0\67\25\1\140\2\0\1\25\1\0\1\u0151\12\0" + "\67\25\1\140\2\0\1\25\1\0\1\136\12\0\32\25"
      + "\1\u0152\34\25\1\140\2\0\1\25\1\0\1\136\12\0" + "\23\25\1\u0153\20\25\1\u0153\22\25\1\140\2\0\1\25"
      + "\14\0\4\257\1\u0154\43\257\1\u0154\16\257\3\0\1\257" + "\14\0\4\257\1\u0155\43\257\1\u0155\16\257\3\0\1\257"
      + "\1\0\1\u0156\12\0\67\25\1\140\2\0\1\25\1\0" + "\1\136\12\0\14\25\1\u0157\11\25\1\u0157\40\25\1\140"
      + "\2\0\1\25\1\0\1\136\12\0\23\25\1\u0158\20\25" + "\1\u0158\22\25\1\140\2\0\1\25\1\0\1\u0159\12\0"
      + "\67\25\1\140\2\0\1\25\1\0\1\u015a\12\0\67\25" + "\1\140\2\0\1\25\1\0\1\u015b\12\0\67\25\1\140"
      + "\2\0\1\25\14\0\4\257\1\u015c\15\257\1\u015d\2\257"
      + "\1\u015e\22\257\1\u015c\2\257\1\u015e\1\257\1\u015d\11\257" + "\3\0\1\257\1\0\1\136\12\0\4\25\1\u015f\25\25"
      + "\1\u0160\15\25\1\u015f\16\25\1\140\2\0\1\25\25\0" + "\1\u0161\105\0\1\u0162\77\0\1\u0133\117\0\1\u0163\105\0"
      + "\1\u013f\75\0\1\u0164\7\0\1\u0165\110\0\1\u0166\102\0"
      + "\1\u0167\10\0\1\u0168\102\0\1\u0169\104\0\1\u016a\76\0"
      + "\1\u013f\106\0\1\u0140\72\0\1\136\12\0\56\25\1\u016b" + "\10\25\1\140\2\0\1\25\1\0\1\u016c\12\0\12\25"
      + "\1\u016d\12\25\1\u016e\7\25\1\u016d\15\25\1\u016e\13\25" + "\1\140\2\0\1\25\1\0\1\u016f\12\0\67\25\1\140"
      + "\2\0\1\25\14\0\4\257\1\u0170\43\257\1\u0170\16\257" + "\3\0\1\257\14\0\4\257\1\u0171\43\257\1\u0171\16\257"
      + "\3\0\1\257\14\0\4\257\1\u0172\43\257\1\u0172\16\257" + "\3\0\1\257\1\0\1\136\12\0\4\25\1\u0173\43\25"
      + "\1\u0173\16\25\1\140\2\0\1\25\14\0\4\257\1\u0174" + "\15\257\1\u0175\25\257\1\u0174\4\257\1\u0175\11\257\3\0"
      + "\1\257\14\0\4\257\1\u0176\43\257\1\u0176\16\257\3\0" + "\1\257\1\0\1\136\12\0\14\25\1\u0177\11\25\1\u0177"
      + "\40\25\1\140\2\0\1\25\1\0\1\136\12\0\23\25" + "\1\u0178\20\25\1\u0178\22\25\1\140\2\0\1\25\14\0"
      + "\4\257\1\u0179\43\257\1\u0179\16\257\3\0\1\257\1\0" + "\1\u017a\12\0\67\25\1\140\2\0\1\25\1\0\1\u017b"
      + "\12\0\67\25\1\140\2\0\1\25\14\0\4\257\1\u017c" + "\43\257\1\u017c\16\257\3\0\1\257\14\0\4\257\1\u017d"
      + "\43\257\1\u017d\16\257\3\0\1\257\14\0\4\257\1\u017e" + "\43\257\1\u017e\16\257\3\0\1\257\1\0\1\u017f\12\0"
      + "\67\257\1\140\2\0\1\257\1\0\1\u0180\12\0\67\257" + "\1\140\2\0\1\257\1\0\1\136\12\0\32\25\1\u0181"
      + "\34\25\1\140\2\0\1\25\22\0\1\u0182\103\0\1\u0183" + "\116\0\1\u0164\73\0\1\u0164\125\0\1\u0168\101\0\1\u0184"
      + "\74\0\4\257\1\u0185\43\257\1\u0185\16\257\3\0\1\257" + "\1\0\1\u0186\12\0\67\25\1\140\2\0\1\25\1\0"
      + "\1\u0187\12\0\67\25\1\140\2\0\1\25\14\0\4\257" + "\1\u0188\43\257\1\u0188\16\257\3\0\1\257\1\0\1\u0189"
      + "\12\0\67\25\1\140\2\0\1\25\1\0\1\u018a\12\0" + "\67\257\1\140\2\0\1\257\1\0\1\u018b\12\0\32\257"
      + "\1\u018c\34\257\1\140\2\0\1\257\1\0\1\u018d\12\0" + "\67\25\1\140\2\0\1\25\1\0\1\u018e\12\0\67\25"
      + "\1\140\2\0\1\25\14\0\4\257\1\u018f\43\257\1\u018f" + "\16\257\3\0\1\257\14\0\4\257\1\u0190\43\257\1\u0190"
      + "\16\257\3\0\1\257\41\0\1\u0191\25\0\1\u0191\37\0" + "\1\u0192\15\0\1\u0192\25\0\1\u0192\4\0\1\u0192\43\0"
      + "\1\u0193\74\0\4\257\1\u0194\43\257\1\u0194\16\257\3\0" + "\1\257\14\0\4\257\1\u0195\43\257\1\u0195\16\257\3\0"
      + "\1\257\14\0\4\257\1\u0196\43\257\1\u0196\16\257\3\0" + "\1\257\36\0\1\u0197\32\0\1\u0197\35\0\1\u0198\43\0"
      + "\1\u0198\23\0\1\u0199\12\0\67\257\1\140\2\0\1\257" + "\14\0\4\257\1\u019a\43\257\1\u019a\16\257\3\0\1\257"
      + "\14\0\4\257\1\u019b\43\257\1\u019b\16\257\3\0\1\257" + "\46\0\1\u019c\60\0\1\u019d\43\0\1\u019d\22\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[19738];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = { "Unknown internal scanner error", "Error: could not match input",
      "Error: pushback value was too large" };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\6\0\1\11\1\1\4\11\1\1\2\11\32\1\3\11"
      + "\1\1\4\11\1\1\3\11\1\1\12\11\1\1\14\11" + "\13\0\1\1\2\0\2\1\1\0\1\1\1\11\56\1"
      + "\2\0\7\1\27\0\65\1\1\0\6\1\13\0\1\11" + "\11\0\33\1\1\0\12\1\2\0\6\1\1\0\4\1"
      + "\1\11\7\0\1\11\2\0\3\11\2\0\1\11\1\0" + "\7\1\3\0\1\1\2\0\4\1\1\0\2\1\3\0"
      + "\5\1\3\0\1\11\1\1\1\11\1\0\1\11\1\0" + "\1\11\1\1\1\0\2\1\1\0\12\1\2\0\3\1"
      + "\2\0\1\1\1\11\1\0\1\11\1\1\2\0\1\1" + "\3\0\1\1\2\0\2\1\3\11\4\1\1\11\1\0" + "\2\1\2\11";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read from input
   */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead. When a lead/high surrogate has been read from the
   * input stream into the final zzBuffer position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  private StringBuffer text;

  /**
   * This method creates a new cup Symbol with a predefined value obtained with the yytext() method.
   *
   * @param type the symbol type
   * @return the cup symbol
   */
  private java_cup.runtime.Symbol symbol(int type) {
    return new java_cup.runtime.Symbol(type, yyline + 1, yycolumn + 1, yytext());
  }

  /**
   * This method creates a new cup Symbol with a given value.
   *
   * @param type the symbol type
   * @param value the symbol value
   * @return the cup symbol
   */
  private java_cup.runtime.Symbol symbol(int type, Object value) {
    return new java_cup.runtime.Symbol(type, yyline + 1, yycolumn + 1, value);
  }

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.text = new StringBuffer(0);
    this.zzReader = in;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x110000];
    int i = 0; /* index in packed string */
    int j = 0; /* index in unpacked array */
    while (i < 224) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do
        map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   *
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /*
       * If numRead == requested, we might have requested to few chars to encode a full Unicode character. We assume
       * that a Reader would otherwise never return half characters.
       */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; /* indicate end of file */
    zzEndRead = zzStartRead; /* invalidate buffer */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Resets the scanner to read from a new input stream. Does not close the old reader.
   *
   * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and
   * lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen". If this method is called, something is seriously
   * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again. This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Contains user EOF-code, which will be executed exactly once, when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error
   * occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
          case '\u000B': // fall through
          case '\u000C': // fall through
          case '\u0085': // fall through
          case '\u2028': // fall through
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek)
          yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        {
          switch (yystate()) {
            case STRING:
              return symbol(Token.ERROR, "EOF in string constant");
            case CHARACTER:
              return symbol(Token.ERROR, "EOF in char constant");
            case SBACKSLASH:
              return symbol(Token.ERROR, "EOF in string constant");
            case CBACKSLASH:
              return symbol(Token.ERROR, "EOF in char constant");
            default:
              return symbol(Token.EOF);
          }
        }
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return symbol(Token.ERROR, "(syntax) unexpected character: '" + yytext() + "'");
          }
          // fall through
          case 166:
            break;
          case 2: {
            return symbol(Token.DOT);
          }
          // fall through
          case 167:
            break;
          case 3: {
            return symbol(Token.COMMA);
          }
          // fall through
          case 168:
            break;
          case 4: {
            return symbol(Token.LPAREN);
          }
          // fall through
          case 169:
            break;
          case 5: {
            return symbol(Token.RPAREN);
          }
          // fall through
          case 170:
            break;
          case 6: {
            this.text.setLength(0);
            yybegin(STRING);
          }
          // fall through
          case 171:
            break;
          case 7: {
            return symbol(Token.NEWLINE);
          }
          // fall through
          case 172:
            break;
          case 8: {
            this.text.setLength(0);
            yybegin(CHARACTER);
          }
          // fall through
          case 173:
            break;
          case 9: {
            yybegin(COMMENT);
          }
          // fall through
          case 174:
            break;
          case 10: {
            return symbol(Token.IDENTIFIER);
          }
          // fall through
          case 175:
            break;
          case 11: {
            try {
              return symbol(Token.NUMBER, Integer.parseInt(yytext()));
            } catch (Exception e) {
              return symbol(Token.ERROR, "(32 bits only) invalid number constant: '" + yytext() + "'");
            }
          }
          // fall through
          case 176:
            break;
          case 12: {
            return symbol(Token.I_J);
          }
          // fall through
          case 177:
            break;
          case 13: { /* do nothing */
          }
          // fall through
          case 178:
            break;
          case 14: { /* NOTHING TO DO */
          }
          // fall through
          case 179:
            break;
          case 15: {
            yypushback(yylength());
            yybegin(YYINITIAL);
          }
          // fall through
          case 180:
            break;
          case 16: {
            this.text.append(yytext());
          }
          // fall through
          case 181:
            break;
          case 17: {
            yybegin(YYINITIAL);
            return symbol(Token.STRING, this.text.toString());
          }
          // fall through
          case 182:
            break;
          case 18: {
            yybegin(SBACKSLASH);
          }
          // fall through
          case 183:
            break;
          case 19: {
            yypushback(yylength());
            yybegin(YYINITIAL);
            return symbol(Token.ERROR, "unterminated string constant");
          }
          // fall through
          case 184:
            break;
          case 20: {
            this.text.append(yytext());
            yybegin(STRING);
          }
          // fall through
          case 185:
            break;
          case 21: {
            this.text.append("\"");
            yybegin(STRING);
          }
          // fall through
          case 186:
            break;
          case 22: {
            this.text.append("\\");
            yybegin(STRING);
          }
          // fall through
          case 187:
            break;
          case 23: {
            this.text.append("'");
            yybegin(STRING);
          }
          // fall through
          case 188:
            break;
          case 24: {
            this.text.append('\r');
            yybegin(STRING);
          }
          // fall through
          case 189:
            break;
          case 25: {
            this.text.append('\t');
            yybegin(STRING);
          }
          // fall through
          case 190:
            break;
          case 26: {
            this.text.append(System.getProperty("line.separator"));
            yybegin(STRING);
          }
          // fall through
          case 191:
            break;
          case 27: {
            this.text.append('\b');
            yybegin(STRING);
          }
          // fall through
          case 192:
            break;
          case 28: {
            this.text.append('\f');
            yybegin(STRING);
          }
          // fall through
          case 193:
            break;
          case 29: {
            this.text.append('\0');
            yybegin(STRING);
          }
          // fall through
          case 194:
            break;
          case 30: {
            this.text.append((char) 11);
            yybegin(STRING);
          }
          // fall through
          case 195:
            break;
          case 31: {
            yybegin(CBACKSLASH);
          }
          // fall through
          case 196:
            break;
          case 32: {
            yypushback(yylength());
            yybegin(YYINITIAL);
            return symbol(Token.ERROR, "unterminated char constant");
          }
          // fall through
          case 197:
            break;
          case 33: {
            yybegin(YYINITIAL);
            String ch = this.text.toString();
            if (ch.length() == 1)
              return symbol(Token.CHARACTER, this.text.toString().charAt(0));
            else
              return symbol(Token.ERROR, "invalid char: '" + ch + "'");
          }
          // fall through
          case 198:
            break;
          case 34: {
            this.text.append(yytext());
            yybegin(CHARACTER);
          }
          // fall through
          case 199:
            break;
          case 35: {
            this.text.append("\"");
            yybegin(CHARACTER);
          }
          // fall through
          case 200:
            break;
          case 36: {
            this.text.append("\\");
            yybegin(CHARACTER);
          }
          // fall through
          case 201:
            break;
          case 37: {
            this.text.append("\'");
            yybegin(CHARACTER);
          }
          // fall through
          case 202:
            break;
          case 38: {
            this.text.append((char) '\r');
            yybegin(CHARACTER);
          }
          // fall through
          case 203:
            break;
          case 39: {
            this.text.append('\t');
            yybegin(CHARACTER);
          }
          // fall through
          case 204:
            break;
          case 40: {
            this.text.append('\n');
            yybegin(CHARACTER);
          }
          // fall through
          case 205:
            break;
          case 41: {
            this.text.append('\b');
            yybegin(CHARACTER);
          }
          // fall through
          case 206:
            break;
          case 42: {
            this.text.append('\f');
            yybegin(CHARACTER);
          }
          // fall through
          case 207:
            break;
          case 43: {
            this.text.append('\0');
            yybegin(CHARACTER);
          }
          // fall through
          case 208:
            break;
          case 44: {
            this.text.append((char) 11);
            yybegin(CHARACTER);
          }
          // fall through
          case 209:
            break;
          case 45: {
            try {
              return symbol(Token.FLOAT, Float.parseFloat(yytext()));
            } catch (Exception e) {
              return symbol(Token.ERROR, "invalid floating-point constat: '" + yytext() + "'");
            }
          }
          // fall through
          case 210:
            break;
          case 46: {
            return symbol(Token.LABEL);
          }
          // fall through
          case 211:
            break;
          case 47: {
            return symbol(Token.REGISTER);
          }
          // fall through
          case 212:
            break;
          case 48: {
            return symbol(Token.I_OR);
          }
          // fall through
          case 213:
            break;
          case 49: {
            return symbol(Token.I_SB);
          }
          // fall through
          case 214:
            break;
          case 50: {
            return symbol(Token.I_SH);
          }
          // fall through
          case 215:
            break;
          case 51: {
            return symbol(Token.I_SW);
          }
          // fall through
          case 216:
            break;
          case 52: {
            return symbol(Token.I_LA);
          }
          // fall through
          case 217:
            break;
          case 53: {
            return symbol(Token.I_LI);
          }
          // fall through
          case 218:
            break;
          case 54: {
            return symbol(Token.I_LB);
          }
          // fall through
          case 219:
            break;
          case 55: {
            return symbol(Token.I_LH);
          }
          // fall through
          case 220:
            break;
          case 56: {
            return symbol(Token.I_LW);
          }
          // fall through
          case 221:
            break;
          case 57: {
            return symbol(Token.FREGISTER);
          }
          // fall through
          case 222:
            break;
          case 58: {
            return symbol(Token.I_JR);
          }
          // fall through
          case 223:
            break;
          case 59: {
            return symbol(Token.I_MV);
          }
          // fall through
          case 224:
            break;
          case 60: {
            return symbol(Token.I_RET);
          }
          // fall through
          case 225:
            break;
          case 61: {
            return symbol(Token.I_REM);
          }
          // fall through
          case 226:
            break;
          case 62: {
            return symbol(Token.I_ORI);
          }
          // fall through
          case 227:
            break;
          case 63: {
            return symbol(Token.I_SRA);
          }
          // fall through
          case 228:
            break;
          case 64: {
            return symbol(Token.I_SRL);
          }
          // fall through
          case 229:
            break;
          case 65: {
            return symbol(Token.I_SLT);
          }
          // fall through
          case 230:
            break;
          case 66: {
            return symbol(Token.I_SLL);
          }
          // fall through
          case 231:
            break;
          case 67: {
            return symbol(Token.I_SUB);
          }
          // fall through
          case 232:
            break;
          case 68: {
            return symbol(Token.I_AND);
          }
          // fall through
          case 233:
            break;
          case 69: {
            return symbol(Token.I_ADD);
          }
          // fall through
          case 234:
            break;
          case 70: {
            return symbol(Token.I_NEG);
          }
          // fall through
          case 235:
            break;
          case 71: {
            return symbol(Token.I_NOP);
          }
          // fall through
          case 236:
            break;
          case 72: {
            return symbol(Token.I_NOT);
          }
          // fall through
          case 237:
            break;
          case 73: {
            return symbol(Token.I_BEQ);
          }
          // fall through
          case 238:
            break;
          case 74: {
            return symbol(Token.I_BNE);
          }
          // fall through
          case 239:
            break;
          case 75: {
            return symbol(Token.I_BGE);
          }
          // fall through
          case 240:
            break;
          case 76: {
            return symbol(Token.I_BGT);
          }
          // fall through
          case 241:
            break;
          case 77: {
            return symbol(Token.I_BLE);
          }
          // fall through
          case 242:
            break;
          case 78: {
            return symbol(Token.I_BLT);
          }
          // fall through
          case 243:
            break;
          case 79: {
            return symbol(Token.I_LBU);
          }
          // fall through
          case 244:
            break;
          case 80: {
            return symbol(Token.I_LHU);
          }
          // fall through
          case 245:
            break;
          case 81: {
            return symbol(Token.I_LUI);
          }
          // fall through
          case 246:
            break;
          case 82: {
            return symbol(Token.F_FSW);
          }
          // fall through
          case 247:
            break;
          case 83: {
            return symbol(Token.F_FLW);
          }
          // fall through
          case 248:
            break;
          case 84: {
            return symbol(Token.I_DIV);
          }
          // fall through
          case 249:
            break;
          case 85: {
            return symbol(Token.I_XOR);
          }
          // fall through
          case 250:
            break;
          case 86: {
            return symbol(Token.I_JAL);
          }
          // fall through
          case 251:
            break;
          case 87: {
            return symbol(Token.I_MUL);
          }
          // fall through
          case 252:
            break;
          case 88: {
            try {
              return symbol(Token.BINARY, Integer.parseUnsignedInt(yytext().substring(2), 2));
            } catch (Exception e) {
              return symbol(Token.ERROR, "(32 bits only) invalid binary constant: '" + yytext() + "'");
            }
          }
          // fall through
          case 253:
            break;
          case 89: {
            try {
              return symbol(Token.HEXNUM, Integer.parseUnsignedInt(yytext().substring(2), 16));
            } catch (Exception e) {
              return symbol(Token.ERROR, "(32 bits only) invalid hexadecimal constant: '" + yytext() + "'");
            }
          }
          // fall through
          case 254:
            break;
          case 90: {
            return symbol(Token.D_BSS);
          }
          // fall through
          case 255:
            break;
          case 91: {
            return symbol(Token.I_REMU);
          }
          // fall through
          case 256:
            break;
          case 92: {
            return symbol(Token.I_SEQZ);
          }
          // fall through
          case 257:
            break;
          case 93: {
            return symbol(Token.I_SRAI);
          }
          // fall through
          case 258:
            break;
          case 94: {
            return symbol(Token.I_SRLI);
          }
          // fall through
          case 259:
            break;
          case 95: {
            return symbol(Token.I_SNEZ);
          }
          // fall through
          case 260:
            break;
          case 96: {
            return symbol(Token.I_SGTZ);
          }
          // fall through
          case 261:
            break;
          case 97: {
            return symbol(Token.I_SLTZ);
          }
          // fall through
          case 262:
            break;
          case 98: {
            return symbol(Token.I_SLTI);
          }
          // fall through
          case 263:
            break;
          case 99: {
            return symbol(Token.I_SLTU);
          }
          // fall through
          case 264:
            break;
          case 100: {
            return symbol(Token.I_SLLI);
          }
          // fall through
          case 265:
            break;
          case 101: {
            return symbol(Token.I_ANDI);
          }
          // fall through
          case 266:
            break;
          case 102: {
            return symbol(Token.I_ADDI);
          }
          // fall through
          case 267:
            break;
          case 103: {
            return symbol(Token.I_CALL);
          }
          // fall through
          case 268:
            break;
          case 104: {
            return symbol(Token.I_TAIL);
          }
          // fall through
          case 269:
            break;
          case 105: {
            return symbol(Token.I_BEQZ);
          }
          // fall through
          case 270:
            break;
          case 106: {
            return symbol(Token.I_BNEZ);
          }
          // fall through
          case 271:
            break;
          case 107: {
            return symbol(Token.I_BGEZ);
          }
          // fall through
          case 272:
            break;
          case 108: {
            return symbol(Token.I_BGEU);
          }
          // fall through
          case 273:
            break;
          case 109: {
            return symbol(Token.I_BGTZ);
          }
          // fall through
          case 274:
            break;
          case 110: {
            return symbol(Token.I_BGTU);
          }
          // fall through
          case 275:
            break;
          case 111: {
            return symbol(Token.I_BLEZ);
          }
          // fall through
          case 276:
            break;
          case 112: {
            return symbol(Token.I_BLEU);
          }
          // fall through
          case 277:
            break;
          case 113: {
            return symbol(Token.I_BLTZ);
          }
          // fall through
          case 278:
            break;
          case 114: {
            return symbol(Token.I_BLTU);
          }
          // fall through
          case 279:
            break;
          case 115: {
            return symbol(Token.I_DIVU);
          }
          // fall through
          case 280:
            break;
          case 116: {
            return symbol(Token.I_XORI);
          }
          // fall through
          case 281:
            break;
          case 117: {
            return symbol(Token.I_JALR);
          }
          // fall through
          case 282:
            break;
          case 118: {
            return symbol(Token.I_MULH);
          }
          // fall through
          case 283:
            break;
          case 119: {
            return symbol(Token.D_ZERO);
          }
          // fall through
          case 284:
            break;
          case 120: {
            return symbol(Token.D_TEXT);
          }
          // fall through
          case 285:
            break;
          case 121: {
            return symbol(Token.D_BYTE);
          }
          // fall through
          case 286:
            break;
          case 122: {
            return symbol(Token.D_HALF);
          }
          // fall through
          case 287:
            break;
          case 123: {
            return symbol(Token.D_WORD);
          }
          // fall through
          case 288:
            break;
          case 124: {
            return symbol(Token.D_DATA);
          }
          // fall through
          case 289:
            break;
          case 125: {
            return symbol(Token.I_ECALL);
          }
          // fall through
          case 290:
            break;
          case 126: {
            return symbol(Token.I_SLTIU);
          }
          // fall through
          case 291:
            break;
          case 127: {
            return symbol(Token.I_AUIPC);
          }
          // fall through
          case 292:
            break;
          case 128: {
            return symbol(Token.F_FEQS);
          }
          // fall through
          case 293:
            break;
          case 129: {
            return symbol(Token.F_FLES);
          }
          // fall through
          case 294:
            break;
          case 130: {
            return symbol(Token.F_FLTS);
          }
          // fall through
          case 295:
            break;
          case 131: {
            return symbol(Token.F_FMVS);
          }
          // fall through
          case 296:
            break;
          case 132: {
            return symbol(Token.I_MULHU);
          }
          // fall through
          case 297:
            break;
          case 133: {
            return symbol(Token.D_ASCIIZ);
          }
          // fall through
          case 298:
            break;
          case 134: {
            return symbol(Token.D_ASCII);
          }
          // fall through
          case 299:
            break;
          case 135: {
            return symbol(Token.D_ALIGN);
          }
          // fall through
          case 300:
            break;
          case 136: {
            return symbol(Token.D_GLOBL);
          }
          // fall through
          case 301:
            break;
          case 137: {
            return symbol(Token.D_FLOAT);
          }
          // fall through
          case 302:
            break;
          case 138: {
            return symbol(Token.I_BREAK);
          }
          // fall through
          case 303:
            break;
          case 139: {
            return symbol(Token.F_FSUBS);
          }
          // fall through
          case 304:
            break;
          case 140: {
            return symbol(Token.F_FABSS);
          }
          // fall through
          case 305:
            break;
          case 141: {
            return symbol(Token.F_FADDS);
          }
          // fall through
          case 306:
            break;
          case 142: {
            return symbol(Token.F_FNEGS);
          }
          // fall through
          case 307:
            break;
          case 143: {
            return symbol(Token.F_FDIVS);
          }
          // fall through
          case 308:
            break;
          case 144: {
            return symbol(Token.F_FMAXS);
          }
          // fall through
          case 309:
            break;
          case 145: {
            return symbol(Token.F_FMINS);
          }
          // fall through
          case 310:
            break;
          case 146: {
            return symbol(Token.F_FMULS);
          }
          // fall through
          case 311:
            break;
          case 147: {
            return symbol(Token.I_MULHSU);
          }
          // fall through
          case 312:
            break;
          case 148: {
            return symbol(Token.D_RODATA);
          }
          // fall through
          case 313:
            break;
          case 149: {
            return symbol(Token.D_BALIGN);
          }
          // fall through
          case 314:
            break;
          case 150: {
            return symbol(Token.F_FSGNJS);
          }
          // fall through
          case 315:
            break;
          case 151: {
            return symbol(Token.F_FSQRTS);
          }
          // fall through
          case 316:
            break;
          case 152: {
            return symbol(Token.F_FMSUBS);
          }
          // fall through
          case 317:
            break;
          case 153: {
            return symbol(Token.F_FMADDS);
          }
          // fall through
          case 318:
            break;
          case 154: {
            return symbol(Token.F_FMVWX);
          }
          // fall through
          case 319:
            break;
          case 155: {
            return symbol(Token.F_FMVXW);
          }
          // fall through
          case 320:
            break;
          case 156: {
            return symbol(Token.D_SECTION);
          }
          // fall through
          case 321:
            break;
          case 157: {
            return symbol(Token.F_FSGNJNS);
          }
          // fall through
          case 322:
            break;
          case 158: {
            return symbol(Token.F_FSGNJXS);
          }
          // fall through
          case 323:
            break;
          case 159: {
            return symbol(Token.F_FCLASSS);
          }
          // fall through
          case 324:
            break;
          case 160: {
            return symbol(Token.F_FCVTSW);
          }
          // fall through
          case 325:
            break;
          case 161: {
            return symbol(Token.F_FCVTWS);
          }
          // fall through
          case 326:
            break;
          case 162: {
            return symbol(Token.F_FNMSUBS);
          }
          // fall through
          case 327:
            break;
          case 163: {
            return symbol(Token.F_FNMADDS);
          }
          // fall through
          case 328:
            break;
          case 164: {
            return symbol(Token.F_FCVTSWU);
          }
          // fall through
          case 329:
            break;
          case 165: {
            return symbol(Token.F_FCVTWUS);
          }
          // fall through
          case 330:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

}
