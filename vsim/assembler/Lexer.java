/*
Copyright (C) 2018-2019 Andres Castellanos

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>
*/

package vsim.assembler;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a> 1.7.0 from the specification file
 * <tt>syntax/lexer.flex</tt>
 */
public final class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;
  public static final int SBACKSLASH = 6;
  public static final int CHARACTER = 8;
  public static final int CBACKSLASH = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in the DFA for the
   * lexical state l at the beginning of a line l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\0\1\117\1\22\1\24\1\24\1\23\22\0\1\117\1\0\1\20"
      + "\1\26\1\0\1\7\1\14\1\25\1\3\1\4\1\5\1\10\1\2" + "\1\11\1\1\1\6\1\111\1\107\1\50\1\110\1\53\2\112\1\113"
      + "\1\114\1\106\1\116\1\26\1\12\1\0\1\13\2\0\1\66\1\55" + "\1\71\1\73\1\56\1\103\1\60\1\76\1\67\1\72\1\105\1\62"
      + "\1\75\1\64\1\100\1\70\1\57\1\101\1\77\1\63\1\61\1\74" + "\1\104\1\102\1\115\1\65\1\0\1\21\1\0\1\16\1\115\1\0"
      + "\1\35\1\43\1\36\1\52\1\30\1\47\1\42\1\45\1\37\1\72" + "\1\105\1\46\1\75\1\41\1\32\1\34\1\57\1\31\1\33\1\40"
      + "\1\61\1\120\1\51\1\54\1\44\1\27\1\0\1\15\1\0\1\17"
      + "\6\0\1\24\u1fa2\0\1\24\1\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"
      + "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\16" + "\1\17\1\20\1\21\1\22\16\23\1\24\4\23\1\25"
      + "\4\23\1\24\1\26\1\27\2\30\1\31\1\32\1\33" + "\2\34\1\35\1\36\1\37\1\35\1\40\1\41\1\42"
      + "\1\43\1\44\1\45\1\46\1\47\1\50\2\51\1\52" + "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"
      + "\1\63\1\64\1\65\13\0\1\66\2\0\2\66\1\0" + "\1\67\1\70\1\0\1\23\1\71\3\23\1\72\1\73"
      + "\4\23\1\74\1\75\1\23\1\76\1\23\1\72\13\23" + "\1\77\1\100\1\101\1\102\1\103\10\23\1\104\1\23"
      + "\1\104\3\23\1\104\1\0\2\23\1\72\1\105\2\23" + "\1\106\27\0\1\107\4\23\1\110\1\111\1\112\1\23"
      + "\1\113\1\114\2\23\1\115\1\116\1\117\1\120\1\121" + "\3\23\1\122\1\123\1\124\1\125\1\126\1\127\1\130"
      + "\1\131\1\132\1\133\1\134\1\135\2\23\1\136\12\23" + "\1\137\6\23\1\0\1\66\1\140\1\141\1\142\1\143"
      + "\1\144\1\145\13\0\1\146\11\0\2\23\1\147\1\150" + "\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160"
      + "\1\161\1\162\1\23\1\163\1\164\1\165\1\166\1\167" + "\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\0"
      + "\12\23\2\0\6\23\1\0\1\177\1\200\1\201\1\202" + "\1\203\7\0\1\204\2\0\1\205\1\206\1\207\2\0"
      + "\1\210\1\0\1\211\1\23\1\212\1\213\1\214\2\23" + "\3\0\1\23\2\0\2\23\1\215\1\216\1\0\2\23"
      + "\3\0\1\217\3\23\1\220\3\0\1\221\1\222\1\223" + "\1\0\1\224\1\0\1\225\1\226\1\0\2\23\1\0"
      + "\1\227\1\230\1\231\3\23\1\232\2\23\1\233\2\0" + "\1\234\1\235\1\236\2\0\1\237\1\240\1\0\1\241"
      + "\1\242\2\0\1\243\3\0\1\23\2\0\1\244\1\245" + "\1\246\1\247\1\250\1\251\1\252\1\253\1\254\1\255"
      + "\1\0\1\256\1\257\1\260\1\261";

  private static int[] zzUnpackAction() {
    int[] result = new int[426];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\121\0\242\0\363\0\u0144\0\u0195\0\u01e6\0\u0237"
      + "\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u0288\0\u0288"
      + "\0\u02d9\0\u032a\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u037b"
      + "\0\u01e6\0\u01e6\0\u03cc\0\u041d\0\u046e\0\u04bf\0\u0510\0\u0561"
      + "\0\u05b2\0\u0603\0\u0654\0\u06a5\0\u06f6\0\u0747\0\u0798\0\u07e9"
      + "\0\u083a\0\u088b\0\u08dc\0\u092d\0\u097e\0\u09cf\0\u0a20\0\u0a71"
      + "\0\u0ac2\0\u0b13\0\u0b64\0\u01e6\0\u01e6\0\u01e6\0\u0bb5\0\u01e6"
      + "\0\u01e6\0\u01e6\0\u01e6\0\u0c06\0\u01e6\0\u01e6\0\u01e6\0\u0c57"
      + "\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6"
      + "\0\u01e6\0\u01e6\0\u0ca8\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6"
      + "\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u01e6\0\u0cf9"
      + "\0\u0d4a\0\u0d9b\0\u0dec\0\u0e3d\0\u0e8e\0\u0edf\0\u0f30\0\u0f81"
      + "\0\u0fd2\0\u1023\0\u1074\0\u10c5\0\u1116\0\u1167\0\u11b8\0\u1209"
      + "\0\u01e6\0\u125a\0\u12ab\0\u12fc\0\u01e6\0\u134d\0\u139e\0\u13ef"
      + "\0\u0561\0\u1440\0\u1491\0\u14e2\0\u1533\0\u1584\0\u0561\0\u0561"
      + "\0\u15d5\0\u0561\0\u1626\0\u1677\0\u16c8\0\u1719\0\u176a\0\u17bb"
      + "\0\u180c\0\u185d\0\u18ae\0\u18ff\0\u1950\0\u19a1\0\u19f2\0\u0561"
      + "\0\u0561\0\u1a43\0\u1a94\0\u0561\0\u1ae5\0\u1b36\0\u1b87\0\u1bd8"
      + "\0\u1c29\0\u1c7a\0\u1ccb\0\u1d1c\0\u1d6d\0\u1dbe\0\u0561\0\u1e0f"
      + "\0\u1e60\0\u1eb1\0\u1f02\0\u1f53\0\u1fa4\0\u1ff5\0\u2046\0\u0561"
      + "\0\u2097\0\u20e8\0\u0561\0\u2139\0\u218a\0\u21db\0\u222c\0\u227d"
      + "\0\u22ce\0\u231f\0\u2370\0\u23c1\0\u2412\0\u2463\0\u24b4\0\u2505"
      + "\0\u2556\0\u25a7\0\u25f8\0\u2649\0\u269a\0\u26eb\0\u273c\0\u278d"
      + "\0\u27de\0\u282f\0\u01e6\0\u2880\0\u28d1\0\u2922\0\u2973\0\u0561"
      + "\0\u29c4\0\u0561\0\u2a15\0\u2a66\0\u2ab7\0\u2b08\0\u2b59\0\u2baa"
      + "\0\u2bfb\0\u0561\0\u2c4c\0\u2c9d\0\u2cee\0\u2d3f\0\u2d90\0\u0561"
      + "\0\u0561\0\u0561\0\u2de1\0\u2e32\0\u2e83\0\u2ed4\0\u2f25\0\u2f76"
      + "\0\u0561\0\u0561\0\u0561\0\u2fc7\0\u3018\0\u0561\0\u3069\0\u30ba"
      + "\0\u310b\0\u315c\0\u31ad\0\u31fe\0\u324f\0\u32a0\0\u32f1\0\u3342"
      + "\0\u0561\0\u3393\0\u33e4\0\u3435\0\u3486\0\u34d7\0\u3528\0\u3579"
      + "\0\u3579\0\u35ca\0\u361b\0\u366c\0\u36bd\0\u2139\0\u218a\0\u370e"
      + "\0\u375f\0\u37b0\0\u3801\0\u3852\0\u38a3\0\u38f4\0\u3945\0\u3996"
      + "\0\u39e7\0\u3a38\0\u01e6\0\u3a89\0\u3ada\0\u3b2b\0\u3b7c\0\u3bcd"
      + "\0\u3c1e\0\u3c6f\0\u3cc0\0\u3d11\0\u3d62\0\u3db3\0\u0561\0\u0561"
      + "\0\u0561\0\u0561\0\u0561\0\u0561\0\u0561\0\u3e04\0\u0561\0\u0561"
      + "\0\u0561\0\u0561\0\u3e55\0\u0561\0\u0561\0\u0561\0\u0561\0\u0561"
      + "\0\u0561\0\u0561\0\u0561\0\u0561\0\u0561\0\u0561\0\u0561\0\u3ea6"
      + "\0\u3ef7\0\u3f48\0\u3f99\0\u3fea\0\u403b\0\u408c\0\u40dd\0\u412e"
      + "\0\u417f\0\u41d0\0\u4221\0\u4272\0\u42c3\0\u4314\0\u4365\0\u43b6"
      + "\0\u4407\0\u4458\0\u44a9\0\u0561\0\u0561\0\u0561\0\u44fa\0\u01e6"
      + "\0\u454b\0\u459c\0\u45ed\0\u463e\0\u468f\0\u46e0\0\u4731\0\u01e6"
      + "\0\u4782\0\u47d3\0\u01e6\0\u01e6\0\u01e6\0\u4824\0\u4875\0\u01e6"
      + "\0\u48c6\0\u0561\0\u4917\0\u0561\0\u0561\0\u2880\0\u4968\0\u49b9"
      + "\0\u4a0a\0\u4a5b\0\u4aac\0\u4afd\0\u4b4e\0\u4b9f\0\u4bf0\0\u4c41"
      + "\0\u2880\0\u2880\0\u4c92\0\u4ce3\0\u4d34\0\u4d85\0\u4dd6\0\u4e27"
      + "\0\u4e78\0\u4e78\0\u4ec9\0\u4f1a\0\u0561\0\u4f6b\0\u4fbc\0\u500d"
      + "\0\u01e6\0\u505e\0\u01e6\0\u50af\0\u01e6\0\u5100\0\u01e6\0\u0561"
      + "\0\u5151\0\u51a2\0\u51f3\0\u5244\0\u2880\0\u2880\0\u2880\0\u5295"
      + "\0\u52e6\0\u5337\0\u2880\0\u5388\0\u53d9\0\u2880\0\u542a\0\u547b"
      + "\0\u2880\0\u2880\0\u2880\0\u54cc\0\u551d\0\u0561\0\u01e6\0\u556e"
      + "\0\u01e6\0\u2880\0\u55bf\0\u5610\0\u2880\0\u5661\0\u56b2\0\u5703"
      + "\0\u5754\0\u57a5\0\u57f6\0\u2880\0\u2880\0\u01e6\0\u01e6\0\u01e6"
      + "\0\u2880\0\u2880\0\u2880\0\u5847\0\u01e6\0\u5898\0\u2880\0\u2880" + "\0\u01e6\0\u01e6";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[426];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
      + "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26" + "\1\27\1\7\3\30\1\31\1\32\1\33\1\34\1\35"
      + "\1\36\1\37\1\40\1\41\1\42\1\40\1\43\1\44" + "\1\45\1\46\2\40\1\47\1\50\1\51\1\40\1\52"
      + "\1\51\1\53\1\46\1\34\3\40\1\47\1\54\1\44" + "\1\40\1\55\2\40\1\42\1\56\1\52\1\40\1\57"
      + "\1\40\1\60\1\36\1\61\1\53\1\62\2\40\3\51" + "\1\63\3\51\1\40\1\7\1\64\1\40\22\65\1\66"
      + "\1\67\1\66\74\65\20\70\1\71\1\72\1\73\1\74" + "\1\73\74\70\20\75\1\76\1\77\1\75\1\100\1\75"
      + "\1\101\3\75\1\102\6\75\1\103\1\104\1\75\1\105" + "\3\75\1\106\41\75\1\107\6\75\1\110\21\70\1\111"
      + "\1\112\1\113\1\112\1\114\73\70\20\115\1\116\1\117" + "\1\112\1\113\1\112\1\120\3\115\1\121\6\115\1\122"
      + "\1\123\1\115\1\124\3\115\1\125\41\115\1\126\6\115" + "\1\127\150\0\1\130\1\0\1\131\1\0\1\132\1\133"
      + "\1\134\2\0\1\135\1\0\1\136\1\137\1\0\1\140" + "\1\141\1\142\1\143\1\144\1\145\1\146\32\0\7\147"
      + "\5\0\1\150\46\0\1\51\2\0\1\51\32\0\7\51" + "\16\0\1\151\121\0\1\152\127\0\3\30\75\0\1\153"
      + "\25\0\1\40\1\154\65\40\1\155\1\0\1\40\1\0" + "\1\153\25\0\7\40\1\156\4\40\1\157\11\40\1\157"
      + "\13\40\1\156\24\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\1\40\1\160\4\40\1\161\20\40\1\160\37\40"
      + "\1\155\1\0\1\40\1\0\1\153\25\0\2\40\1\162" + "\47\40\1\162\14\40\1\155\1\0\1\40\1\0\1\153"
      + "\25\0\1\40\1\163\1\164\2\40\1\161\4\40\1\165" + "\1\166\1\167\1\40\1\170\1\171\1\40\1\161\1\172"
      + "\1\40\1\161\1\40\1\167\1\163\1\40\1\166\1\173" + "\1\171\1\40\1\165\11\40\1\170\2\40\1\164\2\40"
      + "\1\172\1\40\1\161\1\174\5\161\1\40\1\155\1\0" + "\1\40\1\0\1\153\25\0\67\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\12\40\1\175\6\40\1\161\1\40" + "\1\176\1\161\5\40\1\177\2\40\1\175\6\40\1\176"
      + "\13\40\5\161\2\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\6\40\1\200\30\40\1\200\27\40\1\155\1\0"
      + "\1\40\1\0\1\153\25\0\5\40\1\161\1\201\12\40" + "\1\161\2\40\1\161\12\40\1\201\20\40\4\161\3\40"
      + "\1\155\1\0\1\40\1\0\1\153\25\0\1\40\1\202" + "\1\40\1\203\23\40\1\202\21\40\1\203\15\40\1\155"
      + "\1\0\1\40\1\0\1\153\25\0\5\40\1\161\61\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\1\40\1\204"
      + "\10\40\1\205\1\206\3\40\1\207\7\40\1\204\1\40" + "\1\206\1\40\1\207\1\40\1\205\31\40\1\155\1\0"
      + "\1\40\1\0\1\153\25\0\6\40\1\210\1\40\1\211" + "\3\40\1\212\1\40\1\213\3\40\1\214\3\40\1\212"
      + "\3\40\1\215\4\40\1\210\1\211\6\40\1\213\5\40" + "\1\214\11\40\1\155\1\0\1\40\1\0\1\153\25\0"
      + "\1\40\1\216\2\40\1\217\1\161\1\220\1\221\1\40" + "\1\222\1\223\4\40\1\224\1\40\1\225\1\40\1\226"
      + "\1\227\2\40\1\216\3\40\1\224\1\40\1\223\1\40" + "\1\230\2\40\1\221\1\40\1\226\1\40\1\231\1\40"
      + "\1\232\6\40\1\227\1\225\1\233\4\227\1\40\1\155" + "\1\0\1\40\1\0\1\150\26\0\1\234\17\0\1\51"
      + "\2\0\1\51\2\0\1\234\27\0\7\51\5\0\1\153" + "\25\0\10\40\1\235\27\40\1\235\26\40\1\155\1\0"
      + "\1\40\1\0\1\153\25\0\3\40\1\236\15\40\1\237" + "\2\40\1\161\24\40\1\236\5\40\1\161\1\237\1\174"
      + "\4\161\1\40\1\155\1\0\1\40\1\0\1\153\25\0" + "\6\40\1\201\30\40\1\201\27\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\12\40\1\175\10\40\1\176\6\40" + "\1\177\2\40\1\175\6\40\1\176\22\40\1\155\1\0"
      + "\1\40\1\0\1\153\25\0\2\40\1\240\3\40\1\241" + "\30\40\1\241\12\40\1\240\14\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\32\40\1\242\12\40\1\243\21\40" + "\1\155\1\0\1\243\1\0\1\153\25\0\1\40\1\163"
      + "\1\164\7\40\1\165\1\166\1\167\1\40\1\170\1\171" + "\2\40\1\172\3\40\1\167\1\163\1\40\1\166\1\173"
      + "\1\171\1\40\1\165\11\40\1\170\2\40\1\164\2\40" + "\1\172\11\40\1\155\1\0\1\40\1\0\1\153\25\0"
      + "\1\40\1\160\25\40\1\160\37\40\1\155\1\0\1\40" + "\1\0\1\153\25\0\1\40\1\216\2\40\1\232\1\40"
      + "\1\230\1\221\2\40\1\223\4\40\1\224\1\40\1\225" + "\1\40\1\226\1\227\2\40\1\216\3\40\1\224\1\40"
      + "\1\223\1\40\1\230\2\40\1\221\1\40\1\226\1\40" + "\1\231\1\40\1\232\6\40\1\227\1\225\1\233\4\227"
      + "\1\40\1\155\1\0\1\40\1\0\1\150\26\0\1\234" + "\12\0\1\244\4\0\1\51\2\0\1\51\1\245\1\244"
      + "\1\234\23\0\1\245\3\0\7\51\26\0\1\66\120\0" + "\1\73\120\0\1\75\120\0\1\112\126\0\1\246\122\0"
      + "\1\247\116\0\1\250\3\0\1\251\3\0\1\252\4\0" + "\1\253\123\0\1\254\103\0\1\255\12\0\1\256\102\0"
      + "\1\257\136\0\1\260\105\0\1\261\1\0\1\262\6\0" + "\1\263\111\0\1\264\115\0\1\265\134\0\1\266\102\0"
      + "\1\234\12\0\1\267\4\0\1\147\2\0\1\147\2\0" + "\1\234\27\0\7\147\36\0\1\270\123\0\1\271\113\0"
      + "\1\234\12\0\1\272\4\0\1\147\2\0\1\147\2\0" + "\1\234\27\0\7\147\34\0\1\234\17\0\1\147\2\0"
      + "\1\147\2\0\1\234\27\0\7\147\54\0\1\147\2\0" + "\1\147\32\0\7\147\17\0\1\273\134\0\67\274\2\0"
      + "\1\274\1\0\1\153\25\0\2\40\1\275\64\40\1\155" + "\1\0\1\40\1\0\1\153\25\0\6\40\1\276\30\40"
      + "\1\276\27\40\1\155\1\0\1\40\1\0\1\153\25\0" + "\2\40\1\277\47\40\1\277\14\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\11\40\1\300\22\40\1\300\11\40" + "\1\301\20\40\1\155\1\0\1\40\1\0\1\153\25\0"
      + "\10\40\1\302\27\40\1\302\26\40\1\155\1\0\1\40" + "\1\0\1\153\25\0\30\40\1\303\36\40\1\155\1\0"
      + "\1\40\1\0\1\153\25\0\6\40\1\304\10\40\1\305" + "\13\40\1\305\3\40\1\304\27\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\1\40\1\306\25\40\1\306\37\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\11\40\1\307"
      + "\22\40\1\307\32\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\11\40\1\310\5\40\1\311\13\40\1\311\1\310"
      + "\32\40\1\155\1\0\1\40\1\0\1\153\25\0\14\40" + "\1\312\11\40\1\312\40\40\1\155\1\0\1\40\1\0"
      + "\1\153\25\0\60\40\1\161\1\40\1\161\4\40\1\155" + "\1\0\1\40\1\0\1\153\25\0\23\40\1\313\20\40"
      + "\1\313\22\40\1\155\1\0\1\40\1\0\1\153\25\0" + "\23\40\1\314\20\40\1\314\22\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\10\40\1\315\27\40\1\315\26\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\17\40\1\316"
      + "\13\40\1\316\33\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\10\40\1\317\27\40\1\317\26\40\1\155\1\0"
      + "\1\40\1\0\1\153\25\0\13\40\1\320\15\40\1\320" + "\35\40\1\155\1\0\1\40\1\0\1\153\25\0\5\40"
      + "\1\321\3\40\1\322\22\40\1\322\4\40\1\321\25\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\30\40\1\323"
      + "\36\40\1\155\1\0\1\40\1\0\1\153\25\0\1\40" + "\1\324\25\40\1\324\37\40\1\155\1\0\1\40\1\0"
      + "\1\153\25\0\1\40\1\325\7\40\1\326\15\40\1\325" + "\4\40\1\326\32\40\1\155\1\0\1\40\1\0\1\153"
      + "\25\0\1\40\1\327\7\40\1\330\15\40\1\327\4\40" + "\1\330\32\40\1\155\1\0\1\40\1\0\1\153\25\0"
      + "\32\40\1\331\34\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\32\40\1\332\34\40\1\155\1\0\1\40\1\0"
      + "\1\153\25\0\10\40\1\333\27\40\1\333\26\40\1\155" + "\1\0\1\40\1\0\1\153\25\0\30\40\1\334\36\40"
      + "\1\155\1\0\1\40\1\0\1\153\25\0\13\40\1\335" + "\5\40\1\227\1\336\1\40\1\227\3\40\1\337\1\335"
      + "\1\340\22\40\1\336\1\40\1\227\1\233\5\227\1\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\14\40\1\341"
      + "\4\40\1\227\1\40\1\342\1\227\1\40\1\341\15\40" + "\1\342\13\40\6\227\1\40\1\155\1\0\1\40\1\0"
      + "\1\153\25\0\17\40\1\343\13\40\1\343\11\40\1\344" + "\21\40\1\155\1\0\1\344\1\0\1\153\25\0\21\40"
      + "\1\227\2\40\1\227\32\40\1\227\1\233\5\227\1\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\1\40\1\345"
      + "\25\40\1\345\16\40\1\346\20\40\1\155\1\0\1\40" + "\1\0\1\153\25\0\1\40\1\347\7\40\1\350\10\40"
      + "\1\351\4\40\1\347\4\40\1\350\20\40\1\351\11\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\21\40\1\227"
      + "\2\40\1\227\32\40\7\227\1\40\1\155\1\0\1\40" + "\1\0\1\153\25\0\10\40\1\352\27\40\1\352\26\40"
      + "\1\155\1\0\1\40\1\0\1\153\25\0\14\40\1\341" + "\6\40\1\342\2\40\1\341\15\40\1\342\22\40\1\155"
      + "\1\0\1\40\1\0\1\153\25\0\4\40\1\353\1\40" + "\1\354\1\40\1\355\21\40\1\356\4\40\1\354\1\355"
      + "\4\40\1\357\2\40\1\353\16\40\1\155\1\0\1\357" + "\1\0\1\153\25\0\13\40\1\335\6\40\1\336\5\40"
      + "\1\337\1\335\1\340\22\40\1\336\11\40\1\155\1\0" + "\1\40\1\0\1\153\25\0\60\40\1\227\1\40\1\227"
      + "\4\40\1\155\1\0\1\40\10\0\2\360\36\0\1\361" + "\2\0\1\361\32\0\7\361\5\0\1\153\25\0\45\40"
      + "\1\362\21\40\1\155\1\0\1\362\1\0\1\153\25\0" + "\2\40\1\363\47\40\1\363\14\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\21\40\1\161\2\40\1\161\32\40" + "\7\161\1\40\1\155\1\0\1\40\1\0\1\153\25\0"
      + "\17\40\1\364\13\40\1\364\33\40\1\155\1\0\1\40" + "\1\0\1\153\25\0\17\40\1\365\13\40\1\365\33\40"
      + "\1\155\1\0\1\40\107\0\1\366\1\0\1\366\37\0" + "\1\367\4\0\2\367\4\0\1\367\3\0\2\367\1\0"
      + "\2\367\1\0\2\367\7\0\1\367\2\0\1\367\1\0" + "\1\367\7\0\1\367\2\0\7\367\35\0\1\370\141\0"
      + "\1\371\104\0\1\372\117\0\1\373\114\0\1\374\121\0" + "\1\375\123\0\1\376\121\0\1\377\121\0\1\u0100\135\0"
      + "\1\u0101\76\0\1\u0102\121\0\1\u0103\133\0\1\u0104\112\0"
      + "\1\u0105\126\0\1\u0106\113\0\1\u0107\111\0\1\u0108\132\0"
      + "\1\u0109\105\0\1\u010a\127\0\1\u010b\124\0\1\u010c\103\0" + "\67\274\1\155\1\0\1\274\1\0\1\153\25\0\3\40"
      + "\1\161\63\40\1\155\1\0\1\40\1\0\1\153\25\0" + "\17\40\1\u010d\13\40\1\u010d\33\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\1\40\1\u010e\25\40\1\u010e\37\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\32\40\1\u010f"
      + "\34\40\1\155\1\0\1\40\1\0\1\153\25\0\1\u0110" + "\35\40\1\u0110\30\40\1\155\1\0\1\40\1\0\1\153"
      + "\25\0\10\40\1\u0111\27\40\1\u0111\26\40\1\155\1\0" + "\1\40\1\0\1\153\25\0\10\40\1\u0112\27\40\1\u0112"
      + "\26\40\1\155\1\0\1\40\1\0\1\153\25\0\1\u0113" + "\35\40\1\u0113\30\40\1\155\1\0\1\40\1\0\1\153"
      + "\25\0\1\u0114\35\40\1\u0114\30\40\1\155\1\0\1\40" + "\1\0\1\153\25\0\1\u0115\7\40\1\u0116\21\40\1\u0117"
      + "\3\40\1\u0115\1\40\1\u0116\26\40\1\155\1\0\1\40" + "\1\0\1\153\25\0\10\40\1\u0118\27\40\1\u0118\26\40"
      + "\1\155\1\0\1\40\1\0\1\153\25\0\10\40\1\u0119" + "\27\40\1\u0119\26\40\1\155\1\0\1\40\1\0\1\153"
      + "\25\0\10\40\1\u011a\27\40\1\u011a\26\40\1\155\1\0" + "\1\40\1\0\1\153\25\0\5\40\1\u011b\33\40\1\u011b"
      + "\25\40\1\155\1\0\1\40\1\0\1\153\25\0\17\40" + "\1\u011c\13\40\1\u011c\33\40\1\155\1\0\1\40\1\0"
      + "\1\153\25\0\17\40\1\u011d\13\40\1\u011d\33\40\1\155" + "\1\0\1\40\1\0\1\153\25\0\1\u011e\35\40\1\u011e"
      + "\30\40\1\155\1\0\1\40\1\0\1\153\25\0\1\u011f" + "\35\40\1\u011f\30\40\1\155\1\0\1\40\1\0\1\153"
      + "\25\0\1\u0120\31\40\1\u0121\3\40\1\u0120\30\40\1\155" + "\1\0\1\40\1\0\1\153\25\0\1\u0122\31\40\1\u0123"
      + "\3\40\1\u0122\30\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\1\u0124\31\40\1\u0125\3\40\1\u0124\30\40\1\155"
      + "\1\0\1\40\1\0\1\153\25\0\1\u0126\31\40\1\u0127" + "\3\40\1\u0126\30\40\1\155\1\0\1\40\1\0\1\u0128"
      + "\25\0\67\40\1\155\1\0\1\40\1\0\1\153\25\0" + "\12\40\1\u0129\22\40\1\u0129\31\40\1\155\1\0\1\40"
      + "\1\0\1\153\25\0\2\40\1\u012a\47\40\1\u012a\14\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\14\40\1\u012b"
      + "\11\40\1\u012b\40\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\4\40\1\u012c\43\40\1\u012c\16\40\1\155\1\0"
      + "\1\40\1\0\1\153\25\0\23\40\1\u012d\20\40\1\u012d" + "\22\40\1\155\1\0\1\40\1\0\1\153\25\0\6\40"
      + "\1\u012e\30\40\1\u012e\27\40\1\155\1\0\1\40\1\0" + "\1\153\25\0\11\40\1\u012f\22\40\1\u012f\32\40\1\155"
      + "\1\0\1\40\1\0\1\153\25\0\13\40\1\u0130\15\40" + "\1\u0130\35\40\1\155\1\0\1\40\1\0\1\153\25\0"
      + "\4\40\1\u0131\1\40\1\u0132\30\40\1\u0132\10\40\1\u0131" + "\16\40\1\155\1\0\1\40\1\0\1\u0133\25\0\67\40"
      + "\1\155\1\0\1\40\1\0\1\u0134\25\0\67\40\1\155" + "\1\0\1\40\1\0\1\153\25\0\45\40\1\u0135\21\40"
      + "\1\155\1\0\1\u0135\1\0\1\153\25\0\32\40\1\u0136" + "\34\40\1\155\1\0\1\40\1\0\1\153\25\0\23\40"
      + "\1\u0137\1\40\1\u0138\16\40\1\u0137\6\40\1\u0138\13\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\12\40\1\u0139"
      + "\22\40\1\u0139\31\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\17\40\1\u013a\13\40\1\u013a\33\40\1\155\1\0"
      + "\1\40\1\0\1\u013b\25\0\67\40\1\155\1\0\1\40" + "\50\0\1\361\2\0\1\361\32\0\7\361\5\0\1\153"
      + "\25\0\32\40\1\u013c\34\40\1\155\1\0\1\40\1\0" + "\1\153\25\0\10\40\1\u013d\27\40\1\u013d\26\40\1\155"
      + "\1\0\1\40\1\0\1\153\25\0\2\40\1\u013e\47\40" + "\1\u013e\14\40\1\155\1\0\1\40\1\0\1\153\25\0"
      + "\16\40\1\u013f\30\40\1\u013f\17\40\1\155\1\0\1\40" + "\32\0\1\u0140\123\0\1\u0141\123\0\1\u0142\116\0\1\u0143"
      + "\121\0\1\u0144\112\0\1\u0145\135\0\1\256\111\0\1\u0146"
      + "\123\0\1\u0147\116\0\1\u0148\123\0\1\u0149\114\0\1\u014a"
      + "\111\0\1\u014b\137\0\1\u014c\113\0\1\u014d\113\0\1\u014e"
      + "\123\0\1\u014f\132\0\1\u014d\103\0\1\u0150\123\0\1\u0151"
      + "\61\0\1\153\25\0\17\40\1\u0152\13\40\1\u0152\33\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\6\40\1\u0153"
      + "\30\40\1\u0153\27\40\1\155\1\0\1\40\1\0\1\153" + "\25\0\32\40\1\u0154\34\40\1\155\1\0\1\40\1\0"
      + "\1\153\25\0\7\40\1\u0155\32\40\1\u0155\24\40\1\155" + "\1\0\1\40\27\0\4\274\1\u0156\43\274\1\u0156\16\274"
      + "\2\0\1\274\1\0\1\153\25\0\43\40\1\u0157\23\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\11\40\1\u0158"
      + "\22\40\1\u0158\32\40\1\155\1\0\1\40\1\0\1\u0159" + "\25\0\67\40\1\155\1\0\1\40\1\0\1\u015a\25\0"
      + "\67\40\1\155\1\0\1\40\1\0\1\u015b\25\0\67\40" + "\1\155\1\0\1\40\1\0\1\153\25\0\4\40\1\u015c"
      + "\43\40\1\u015c\16\40\1\155\1\0\1\40\1\0\1\u015d" + "\25\0\67\40\1\155\1\0\1\40\1\0\1\u015e\25\0"
      + "\67\40\1\155\1\0\1\40\1\0\1\153\25\0\32\40" + "\1\u015f\34\40\1\155\1\0\1\40\1\0\1\153\25\0"
      + "\23\40\1\u0160\20\40\1\u0160\22\40\1\155\1\0\1\40" + "\27\0\4\274\1\u0161\43\274\1\u0161\16\274\2\0\1\274"
      + "\27\0\4\274\1\u0162\43\274\1\u0162\16\274\2\0\1\274" + "\1\0\1\u0163\25\0\67\40\1\155\1\0\1\40\1\0"
      + "\1\153\25\0\14\40\1\u0164\11\40\1\u0164\40\40\1\155" + "\1\0\1\40\1\0\1\153\25\0\23\40\1\u0165\20\40"
      + "\1\u0165\22\40\1\155\1\0\1\40\1\0\1\u0166\25\0" + "\67\40\1\155\1\0\1\40\1\0\1\u0167\25\0\67\40"
      + "\1\155\1\0\1\40\1\0\1\u0168\25\0\67\40\1\155" + "\1\0\1\40\27\0\4\274\1\u0169\15\274\1\u016a\2\274"
      + "\1\u016b\22\274\1\u0169\2\274\1\u016b\1\274\1\u016a\11\274" + "\2\0\1\274\1\0\1\153\25\0\4\40\1\u016c\25\40"
      + "\1\u016d\15\40\1\u016c\16\40\1\155\1\0\1\40\40\0" + "\1\u016e\117\0\1\u016f\111\0\1\u0140\131\0\1\u0170\117\0"
      + "\1\u014c\107\0\1\u0171\7\0\1\u0172\122\0\1\u0173\114\0"
      + "\1\u0174\10\0\1\u0175\114\0\1\u0176\116\0\1\u0177\110\0"
      + "\1\u014c\120\0\1\u014d\71\0\1\153\25\0\56\40\1\u0178" + "\10\40\1\155\1\0\1\40\1\0\1\u0179\25\0\12\40"
      + "\1\u017a\12\40\1\u017b\7\40\1\u017a\15\40\1\u017b\13\40" + "\1\155\1\0\1\40\1\0\1\u017c\25\0\67\40\1\155"
      + "\1\0\1\40\27\0\4\274\1\u017d\43\274\1\u017d\16\274" + "\2\0\1\274\27\0\4\274\1\u017e\43\274\1\u017e\16\274"
      + "\2\0\1\274\27\0\4\274\1\u017f\43\274\1\u017f\16\274" + "\2\0\1\274\1\0\1\153\25\0\4\40\1\u0180\43\40"
      + "\1\u0180\16\40\1\155\1\0\1\40\27\0\4\274\1\u0181" + "\15\274\1\u0182\25\274\1\u0181\4\274\1\u0182\11\274\2\0"
      + "\1\274\27\0\4\274\1\u0183\43\274\1\u0183\16\274\2\0" + "\1\274\1\0\1\153\25\0\14\40\1\u0184\11\40\1\u0184"
      + "\40\40\1\155\1\0\1\40\1\0\1\153\25\0\23\40" + "\1\u0185\20\40\1\u0185\22\40\1\155\1\0\1\40\27\0"
      + "\4\274\1\u0186\43\274\1\u0186\16\274\2\0\1\274\1\0" + "\1\u0187\25\0\67\40\1\155\1\0\1\40\1\0\1\u0188"
      + "\25\0\67\40\1\155\1\0\1\40\27\0\4\274\1\u0189" + "\43\274\1\u0189\16\274\2\0\1\274\27\0\4\274\1\u018a"
      + "\43\274\1\u018a\16\274\2\0\1\274\27\0\4\274\1\u018b" + "\43\274\1\u018b\16\274\2\0\1\274\1\0\1\u018c\25\0"
      + "\67\274\1\155\1\0\1\274\1\0\1\u018d\25\0\67\274" + "\1\155\1\0\1\274\1\0\1\153\25\0\32\40\1\u018e"
      + "\34\40\1\155\1\0\1\40\35\0\1\u018f\115\0\1\u0190" + "\130\0\1\u0171\105\0\1\u0171\137\0\1\u0175\113\0\1\u0191"
      + "\106\0\4\274\1\u0192\43\274\1\u0192\16\274\2\0\1\274" + "\1\0\1\u0193\25\0\67\40\1\155\1\0\1\40\1\0"
      + "\1\u0194\25\0\67\40\1\155\1\0\1\40\27\0\4\274" + "\1\u0195\43\274\1\u0195\16\274\2\0\1\274\1\0\1\u0196"
      + "\25\0\67\40\1\155\1\0\1\40\1\0\1\u0197\25\0" + "\67\274\1\155\1\0\1\274\1\0\1\u0198\25\0\32\274"
      + "\1\u0199\34\274\1\155\1\0\1\274\1\0\1\u019a\25\0" + "\67\40\1\155\1\0\1\40\1\0\1\u019b\25\0\67\40"
      + "\1\155\1\0\1\40\27\0\4\274\1\u019c\43\274\1\u019c" + "\16\274\2\0\1\274\27\0\4\274\1\u019d\43\274\1\u019d"
      + "\16\274\2\0\1\274\54\0\1\u019e\25\0\1\u019e\51\0" + "\1\u019f\15\0\1\u019f\25\0\1\u019f\4\0\1\u019f\55\0"
      + "\1\u01a0\106\0\4\274\1\u01a1\43\274\1\u01a1\16\274\2\0" + "\1\274\27\0\4\274\1\u01a2\43\274\1\u01a2\16\274\2\0"
      + "\1\274\27\0\4\274\1\u01a3\43\274\1\u01a3\16\274\2\0" + "\1\274\51\0\1\u01a4\32\0\1\u01a4\47\0\1\u01a5\43\0"
      + "\1\u01a5\22\0\1\u01a6\25\0\67\274\1\155\1\0\1\274" + "\27\0\4\274\1\u01a7\43\274\1\u01a7\16\274\2\0\1\274"
      + "\27\0\4\274\1\u01a8\43\274\1\u01a8\16\274\2\0\1\274" + "\61\0\1\u01a9\72\0\1\u01aa\43\0\1\u01aa\21\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[22761];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = { "Unknown internal scanner error", "Error: could not match input",
      "Error: pushback value was too large" };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\6\0\1\11\1\1\6\11\4\1\5\11\1\1\2\11"
      + "\31\1\3\11\1\1\4\11\1\1\3\11\1\1\12\11" + "\1\1\14\11\13\0\1\1\2\0\2\1\1\0\1\11"
      + "\1\1\1\0\1\1\1\11\56\1\1\0\7\1\27\0" + "\1\11\64\1\1\0\7\1\13\0\1\11\11\0\33\1"
      + "\1\0\12\1\2\0\6\1\1\0\4\1\1\11\7\0" + "\1\11\2\0\3\11\2\0\1\11\1\0\7\1\3\0"
      + "\1\1\2\0\4\1\1\0\2\1\3\0\5\1\3\0" + "\1\11\1\1\1\11\1\0\1\11\1\0\1\11\1\1"
      + "\1\0\2\1\1\0\12\1\2\0\3\1\2\0\1\1" + "\1\11\1\0\1\11\1\1\2\0\1\1\3\0\1\1"
      + "\2\0\2\1\3\11\4\1\1\11\1\0\2\1\2\11";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[426];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read from input
   */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead. When a lead/high surrogate has been read from the
   * input stream into the final zzBuffer position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  private StringBuffer text;

  /**
   * This method creates a new cup Symbol with a predefined value obtained with the yytext() method.
   *
   * @param type the symbol type
   * @return the cup symbol
   */
  private java_cup.runtime.Symbol symbol(int type) {
    return new java_cup.runtime.Symbol(type, yyline + 1, yycolumn + 1, yytext());
  }

  /**
   * This method creates a new cup Symbol with a given value.
   *
   * @param type the symbol type
   * @param value the symbol value
   * @return the cup symbol
   */
  private java_cup.runtime.Symbol symbol(int type, Object value) {
    return new java_cup.runtime.Symbol(type, yyline + 1, yycolumn + 1, value);
  }

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.text = new StringBuffer(0);
    this.zzReader = in;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x110000];
    int i = 0; /* index in packed string */
    int j = 0; /* index in unpacked array */
    while (i < 244) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do
        map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   *
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /*
       * If numRead == requested, we might have requested to few chars to encode a full Unicode character. We assume
       * that a Reader would otherwise never return half characters.
       */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; /* indicate end of file */
    zzEndRead = zzStartRead; /* invalidate buffer */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Resets the scanner to read from a new input stream. Does not close the old reader.
   *
   * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and
   * lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen". If this method is called, something is seriously
   * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again. This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Contains user EOF-code, which will be executed exactly once, when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error
   * occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
          case '\u000B': // fall through
          case '\u000C': // fall through
          case '\u0085': // fall through
          case '\u2028': // fall through
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek)
          yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        {
          switch (yystate()) {
            case STRING:
              return symbol(Token.ERROR, "EOF in string constant");
            case CHARACTER:
              return symbol(Token.ERROR, "EOF in char constant");
            case SBACKSLASH:
              return symbol(Token.ERROR, "EOF in string constant");
            case CBACKSLASH:
              return symbol(Token.ERROR, "EOF in char constant");
            default:
              return symbol(Token.EOF);
          }
        }
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return symbol(Token.ERROR, "(syntax) unexpected character: '" + yytext() + "'");
          }
          // fall through
          case 178:
            break;
          case 2: {
            return symbol(Token.DOT);
          }
          // fall through
          case 179:
            break;
          case 3: {
            return symbol(Token.COMMA);
          }
          // fall through
          case 180:
            break;
          case 4: {
            return symbol(Token.LPAREN);
          }
          // fall through
          case 181:
            break;
          case 5: {
            return symbol(Token.RPAREN);
          }
          // fall through
          case 182:
            break;
          case 6: {
            return symbol(Token.TIMES);
          }
          // fall through
          case 183:
            break;
          case 7: {
            return symbol(Token.DIVIDE);
          }
          // fall through
          case 184:
            break;
          case 8: {
            return symbol(Token.MOD);
          }
          // fall through
          case 185:
            break;
          case 9: {
            return symbol(Token.PLUS);
          }
          // fall through
          case 186:
            break;
          case 10: {
            return symbol(Token.MINUS);
          }
          // fall through
          case 187:
            break;
          case 11: {
            return symbol(Token.AND);
          }
          // fall through
          case 188:
            break;
          case 12: {
            return symbol(Token.OR);
          }
          // fall through
          case 189:
            break;
          case 13: {
            return symbol(Token.XOR);
          }
          // fall through
          case 190:
            break;
          case 14: {
            return symbol(Token.NEG);
          }
          // fall through
          case 191:
            break;
          case 15: {
            this.text.setLength(0);
            yybegin(STRING);
          }
          // fall through
          case 192:
            break;
          case 16: {
            return symbol(Token.NEWLINE);
          }
          // fall through
          case 193:
            break;
          case 17: {
            this.text.setLength(0);
            yybegin(CHARACTER);
          }
          // fall through
          case 194:
            break;
          case 18: {
            yybegin(COMMENT);
          }
          // fall through
          case 195:
            break;
          case 19: {
            return symbol(Token.IDENTIFIER);
          }
          // fall through
          case 196:
            break;
          case 20: {
            try {
              return symbol(Token.NUMBER, Integer.parseInt(yytext()));
            } catch (Exception e) {
              return symbol(Token.ERROR, "(32 bits only) invalid number constant: '" + yytext() + "'");
            }
          }
          // fall through
          case 197:
            break;
          case 21: {
            return symbol(Token.I_J);
          }
          // fall through
          case 198:
            break;
          case 22: { /* do nothing */
          }
          // fall through
          case 199:
            break;
          case 23: { /* NOTHING TO DO */
          }
          // fall through
          case 200:
            break;
          case 24: {
            yypushback(yylength());
            yybegin(YYINITIAL);
          }
          // fall through
          case 201:
            break;
          case 25: {
            this.text.append(yytext());
          }
          // fall through
          case 202:
            break;
          case 26: {
            yybegin(YYINITIAL);
            return symbol(Token.STRING, this.text.toString());
          }
          // fall through
          case 203:
            break;
          case 27: {
            yybegin(SBACKSLASH);
          }
          // fall through
          case 204:
            break;
          case 28: {
            yypushback(yylength());
            yybegin(YYINITIAL);
            return symbol(Token.ERROR, "unterminated string constant");
          }
          // fall through
          case 205:
            break;
          case 29: {
            this.text.append(yytext());
            yybegin(STRING);
          }
          // fall through
          case 206:
            break;
          case 30: {
            this.text.append("\"");
            yybegin(STRING);
          }
          // fall through
          case 207:
            break;
          case 31: {
            this.text.append("\\");
            yybegin(STRING);
          }
          // fall through
          case 208:
            break;
          case 32: {
            this.text.append("'");
            yybegin(STRING);
          }
          // fall through
          case 209:
            break;
          case 33: {
            this.text.append('\r');
            yybegin(STRING);
          }
          // fall through
          case 210:
            break;
          case 34: {
            this.text.append('\t');
            yybegin(STRING);
          }
          // fall through
          case 211:
            break;
          case 35: {
            this.text.append(System.getProperty("line.separator"));
            yybegin(STRING);
          }
          // fall through
          case 212:
            break;
          case 36: {
            this.text.append('\b');
            yybegin(STRING);
          }
          // fall through
          case 213:
            break;
          case 37: {
            this.text.append('\f');
            yybegin(STRING);
          }
          // fall through
          case 214:
            break;
          case 38: {
            this.text.append('\0');
            yybegin(STRING);
          }
          // fall through
          case 215:
            break;
          case 39: {
            this.text.append((char) 11);
            yybegin(STRING);
          }
          // fall through
          case 216:
            break;
          case 40: {
            yybegin(CBACKSLASH);
          }
          // fall through
          case 217:
            break;
          case 41: {
            yypushback(yylength());
            yybegin(YYINITIAL);
            return symbol(Token.ERROR, "unterminated char constant");
          }
          // fall through
          case 218:
            break;
          case 42: {
            yybegin(YYINITIAL);
            String ch = this.text.toString();
            if (ch.length() == 1)
              return symbol(Token.CHARACTER, this.text.toString().charAt(0));
            else
              return symbol(Token.ERROR, "invalid char: '" + ch + "'");
          }
          // fall through
          case 219:
            break;
          case 43: {
            this.text.append(yytext());
            yybegin(CHARACTER);
          }
          // fall through
          case 220:
            break;
          case 44: {
            this.text.append("\"");
            yybegin(CHARACTER);
          }
          // fall through
          case 221:
            break;
          case 45: {
            this.text.append("\\");
            yybegin(CHARACTER);
          }
          // fall through
          case 222:
            break;
          case 46: {
            this.text.append("\'");
            yybegin(CHARACTER);
          }
          // fall through
          case 223:
            break;
          case 47: {
            this.text.append((char) '\r');
            yybegin(CHARACTER);
          }
          // fall through
          case 224:
            break;
          case 48: {
            this.text.append('\t');
            yybegin(CHARACTER);
          }
          // fall through
          case 225:
            break;
          case 49: {
            this.text.append('\n');
            yybegin(CHARACTER);
          }
          // fall through
          case 226:
            break;
          case 50: {
            this.text.append('\b');
            yybegin(CHARACTER);
          }
          // fall through
          case 227:
            break;
          case 51: {
            this.text.append('\f');
            yybegin(CHARACTER);
          }
          // fall through
          case 228:
            break;
          case 52: {
            this.text.append('\0');
            yybegin(CHARACTER);
          }
          // fall through
          case 229:
            break;
          case 53: {
            this.text.append((char) 11);
            yybegin(CHARACTER);
          }
          // fall through
          case 230:
            break;
          case 54: {
            try {
              return symbol(Token.FLOAT, Float.parseFloat(yytext()));
            } catch (Exception e) {
              return symbol(Token.ERROR, "invalid floating-point constat: '" + yytext() + "'");
            }
          }
          // fall through
          case 231:
            break;
          case 55: {
            return symbol(Token.SLL);
          }
          // fall through
          case 232:
            break;
          case 56: {
            return symbol(Token.SRA);
          }
          // fall through
          case 233:
            break;
          case 57: {
            return symbol(Token.LABEL);
          }
          // fall through
          case 234:
            break;
          case 58: {
            return symbol(Token.REGISTER);
          }
          // fall through
          case 235:
            break;
          case 59: {
            return symbol(Token.I_OR);
          }
          // fall through
          case 236:
            break;
          case 60: {
            return symbol(Token.I_SB);
          }
          // fall through
          case 237:
            break;
          case 61: {
            return symbol(Token.I_SH);
          }
          // fall through
          case 238:
            break;
          case 62: {
            return symbol(Token.I_SW);
          }
          // fall through
          case 239:
            break;
          case 63: {
            return symbol(Token.I_LA);
          }
          // fall through
          case 240:
            break;
          case 64: {
            return symbol(Token.I_LI);
          }
          // fall through
          case 241:
            break;
          case 65: {
            return symbol(Token.I_LB);
          }
          // fall through
          case 242:
            break;
          case 66: {
            return symbol(Token.I_LH);
          }
          // fall through
          case 243:
            break;
          case 67: {
            return symbol(Token.I_LW);
          }
          // fall through
          case 244:
            break;
          case 68: {
            return symbol(Token.FREGISTER);
          }
          // fall through
          case 245:
            break;
          case 69: {
            return symbol(Token.I_JR);
          }
          // fall through
          case 246:
            break;
          case 70: {
            return symbol(Token.I_MV);
          }
          // fall through
          case 247:
            break;
          case 71: {
            return symbol(Token.SRL);
          }
          // fall through
          case 248:
            break;
          case 72: {
            return symbol(Token.I_RET);
          }
          // fall through
          case 249:
            break;
          case 73: {
            return symbol(Token.I_REM);
          }
          // fall through
          case 250:
            break;
          case 74: {
            return symbol(Token.I_ORI);
          }
          // fall through
          case 251:
            break;
          case 75: {
            return symbol(Token.I_SRA);
          }
          // fall through
          case 252:
            break;
          case 76: {
            return symbol(Token.I_SRL);
          }
          // fall through
          case 253:
            break;
          case 77: {
            return symbol(Token.I_SLT);
          }
          // fall through
          case 254:
            break;
          case 78: {
            return symbol(Token.I_SLL);
          }
          // fall through
          case 255:
            break;
          case 79: {
            return symbol(Token.I_SUB);
          }
          // fall through
          case 256:
            break;
          case 80: {
            return symbol(Token.I_AND);
          }
          // fall through
          case 257:
            break;
          case 81: {
            return symbol(Token.I_ADD);
          }
          // fall through
          case 258:
            break;
          case 82: {
            return symbol(Token.I_NEG);
          }
          // fall through
          case 259:
            break;
          case 83: {
            return symbol(Token.I_NOP);
          }
          // fall through
          case 260:
            break;
          case 84: {
            return symbol(Token.I_NOT);
          }
          // fall through
          case 261:
            break;
          case 85: {
            return symbol(Token.I_BEQ);
          }
          // fall through
          case 262:
            break;
          case 86: {
            return symbol(Token.I_BNE);
          }
          // fall through
          case 263:
            break;
          case 87: {
            return symbol(Token.I_BGE);
          }
          // fall through
          case 264:
            break;
          case 88: {
            return symbol(Token.I_BGT);
          }
          // fall through
          case 265:
            break;
          case 89: {
            return symbol(Token.I_BLE);
          }
          // fall through
          case 266:
            break;
          case 90: {
            return symbol(Token.I_BLT);
          }
          // fall through
          case 267:
            break;
          case 91: {
            return symbol(Token.I_LBU);
          }
          // fall through
          case 268:
            break;
          case 92: {
            return symbol(Token.I_LHU);
          }
          // fall through
          case 269:
            break;
          case 93: {
            return symbol(Token.I_LUI);
          }
          // fall through
          case 270:
            break;
          case 94: {
            return symbol(Token.F_FSW);
          }
          // fall through
          case 271:
            break;
          case 95: {
            return symbol(Token.F_FLW);
          }
          // fall through
          case 272:
            break;
          case 96: {
            return symbol(Token.I_DIV);
          }
          // fall through
          case 273:
            break;
          case 97: {
            return symbol(Token.I_XOR);
          }
          // fall through
          case 274:
            break;
          case 98: {
            return symbol(Token.I_JAL);
          }
          // fall through
          case 275:
            break;
          case 99: {
            return symbol(Token.I_MUL);
          }
          // fall through
          case 276:
            break;
          case 100: {
            try {
              return symbol(Token.BINARY, Integer.parseUnsignedInt(yytext().substring(2), 2));
            } catch (Exception e) {
              return symbol(Token.ERROR, "(32 bits only) invalid binary constant: '" + yytext() + "'");
            }
          }
          // fall through
          case 277:
            break;
          case 101: {
            try {
              return symbol(Token.HEXNUM, Integer.parseUnsignedInt(yytext().substring(2), 16));
            } catch (Exception e) {
              return symbol(Token.ERROR, "(32 bits only) invalid hexadecimal constant: '" + yytext() + "'");
            }
          }
          // fall through
          case 278:
            break;
          case 102: {
            return symbol(Token.D_BSS);
          }
          // fall through
          case 279:
            break;
          case 103: {
            return symbol(Token.I_REMU);
          }
          // fall through
          case 280:
            break;
          case 104: {
            return symbol(Token.I_SEQZ);
          }
          // fall through
          case 281:
            break;
          case 105: {
            return symbol(Token.I_SRAI);
          }
          // fall through
          case 282:
            break;
          case 106: {
            return symbol(Token.I_SRLI);
          }
          // fall through
          case 283:
            break;
          case 107: {
            return symbol(Token.I_SNEZ);
          }
          // fall through
          case 284:
            break;
          case 108: {
            return symbol(Token.I_SGTZ);
          }
          // fall through
          case 285:
            break;
          case 109: {
            return symbol(Token.I_SLTZ);
          }
          // fall through
          case 286:
            break;
          case 110: {
            return symbol(Token.I_SLTI);
          }
          // fall through
          case 287:
            break;
          case 111: {
            return symbol(Token.I_SLTU);
          }
          // fall through
          case 288:
            break;
          case 112: {
            return symbol(Token.I_SLLI);
          }
          // fall through
          case 289:
            break;
          case 113: {
            return symbol(Token.I_ANDI);
          }
          // fall through
          case 290:
            break;
          case 114: {
            return symbol(Token.I_ADDI);
          }
          // fall through
          case 291:
            break;
          case 115: {
            return symbol(Token.I_CALL);
          }
          // fall through
          case 292:
            break;
          case 116: {
            return symbol(Token.I_TAIL);
          }
          // fall through
          case 293:
            break;
          case 117: {
            return symbol(Token.I_BEQZ);
          }
          // fall through
          case 294:
            break;
          case 118: {
            return symbol(Token.I_BNEZ);
          }
          // fall through
          case 295:
            break;
          case 119: {
            return symbol(Token.I_BGEZ);
          }
          // fall through
          case 296:
            break;
          case 120: {
            return symbol(Token.I_BGEU);
          }
          // fall through
          case 297:
            break;
          case 121: {
            return symbol(Token.I_BGTZ);
          }
          // fall through
          case 298:
            break;
          case 122: {
            return symbol(Token.I_BGTU);
          }
          // fall through
          case 299:
            break;
          case 123: {
            return symbol(Token.I_BLEZ);
          }
          // fall through
          case 300:
            break;
          case 124: {
            return symbol(Token.I_BLEU);
          }
          // fall through
          case 301:
            break;
          case 125: {
            return symbol(Token.I_BLTZ);
          }
          // fall through
          case 302:
            break;
          case 126: {
            return symbol(Token.I_BLTU);
          }
          // fall through
          case 303:
            break;
          case 127: {
            return symbol(Token.I_DIVU);
          }
          // fall through
          case 304:
            break;
          case 128: {
            return symbol(Token.I_XORI);
          }
          // fall through
          case 305:
            break;
          case 129: {
            return symbol(Token.I_JALR);
          }
          // fall through
          case 306:
            break;
          case 130: {
            return symbol(Token.I_MULH);
          }
          // fall through
          case 307:
            break;
          case 131: {
            return symbol(Token.D_ZERO);
          }
          // fall through
          case 308:
            break;
          case 132: {
            return symbol(Token.D_TEXT);
          }
          // fall through
          case 309:
            break;
          case 133: {
            return symbol(Token.D_BYTE);
          }
          // fall through
          case 310:
            break;
          case 134: {
            return symbol(Token.D_HALF);
          }
          // fall through
          case 311:
            break;
          case 135: {
            return symbol(Token.D_WORD);
          }
          // fall through
          case 312:
            break;
          case 136: {
            return symbol(Token.D_DATA);
          }
          // fall through
          case 313:
            break;
          case 137: {
            return symbol(Token.I_ECALL);
          }
          // fall through
          case 314:
            break;
          case 138: {
            return symbol(Token.I_SLTIU);
          }
          // fall through
          case 315:
            break;
          case 139: {
            return symbol(Token.I_AUIPC);
          }
          // fall through
          case 316:
            break;
          case 140: {
            return symbol(Token.F_FEQS);
          }
          // fall through
          case 317:
            break;
          case 141: {
            return symbol(Token.F_FLES);
          }
          // fall through
          case 318:
            break;
          case 142: {
            return symbol(Token.F_FLTS);
          }
          // fall through
          case 319:
            break;
          case 143: {
            return symbol(Token.F_FMVS);
          }
          // fall through
          case 320:
            break;
          case 144: {
            return symbol(Token.I_MULHU);
          }
          // fall through
          case 321:
            break;
          case 145: {
            return symbol(Token.D_ASCIIZ);
          }
          // fall through
          case 322:
            break;
          case 146: {
            return symbol(Token.D_ASCII);
          }
          // fall through
          case 323:
            break;
          case 147: {
            return symbol(Token.D_ALIGN);
          }
          // fall through
          case 324:
            break;
          case 148: {
            return symbol(Token.D_GLOBL);
          }
          // fall through
          case 325:
            break;
          case 149: {
            return symbol(Token.D_FLOAT);
          }
          // fall through
          case 326:
            break;
          case 150: {
            return symbol(Token.I_BREAK);
          }
          // fall through
          case 327:
            break;
          case 151: {
            return symbol(Token.F_FSUBS);
          }
          // fall through
          case 328:
            break;
          case 152: {
            return symbol(Token.F_FABSS);
          }
          // fall through
          case 329:
            break;
          case 153: {
            return symbol(Token.F_FADDS);
          }
          // fall through
          case 330:
            break;
          case 154: {
            return symbol(Token.F_FNEGS);
          }
          // fall through
          case 331:
            break;
          case 155: {
            return symbol(Token.F_FDIVS);
          }
          // fall through
          case 332:
            break;
          case 156: {
            return symbol(Token.F_FMAXS);
          }
          // fall through
          case 333:
            break;
          case 157: {
            return symbol(Token.F_FMINS);
          }
          // fall through
          case 334:
            break;
          case 158: {
            return symbol(Token.F_FMULS);
          }
          // fall through
          case 335:
            break;
          case 159: {
            return symbol(Token.I_MULHSU);
          }
          // fall through
          case 336:
            break;
          case 160: {
            return symbol(Token.D_RODATA);
          }
          // fall through
          case 337:
            break;
          case 161: {
            return symbol(Token.D_BALIGN);
          }
          // fall through
          case 338:
            break;
          case 162: {
            return symbol(Token.F_FSGNJS);
          }
          // fall through
          case 339:
            break;
          case 163: {
            return symbol(Token.F_FSQRTS);
          }
          // fall through
          case 340:
            break;
          case 164: {
            return symbol(Token.F_FMSUBS);
          }
          // fall through
          case 341:
            break;
          case 165: {
            return symbol(Token.F_FMADDS);
          }
          // fall through
          case 342:
            break;
          case 166: {
            return symbol(Token.F_FMVWX);
          }
          // fall through
          case 343:
            break;
          case 167: {
            return symbol(Token.F_FMVXW);
          }
          // fall through
          case 344:
            break;
          case 168: {
            return symbol(Token.D_SECTION);
          }
          // fall through
          case 345:
            break;
          case 169: {
            return symbol(Token.F_FSGNJNS);
          }
          // fall through
          case 346:
            break;
          case 170: {
            return symbol(Token.F_FSGNJXS);
          }
          // fall through
          case 347:
            break;
          case 171: {
            return symbol(Token.F_FCLASSS);
          }
          // fall through
          case 348:
            break;
          case 172: {
            return symbol(Token.F_FCVTSW);
          }
          // fall through
          case 349:
            break;
          case 173: {
            return symbol(Token.F_FCVTWS);
          }
          // fall through
          case 350:
            break;
          case 174: {
            return symbol(Token.F_FNMSUBS);
          }
          // fall through
          case 351:
            break;
          case 175: {
            return symbol(Token.F_FNMADDS);
          }
          // fall through
          case 352:
            break;
          case 176: {
            return symbol(Token.F_FCVTSWU);
          }
          // fall through
          case 353:
            break;
          case 177: {
            return symbol(Token.F_FCVTWUS);
          }
          // fall through
          case 354:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

}
