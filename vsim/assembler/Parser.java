
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package vsim.assembler;

import vsim.Errors;
import vsim.Globals;
import java.io.File;
import vsim.Settings;
import vsim.utils.Data;
import java.io.FileReader;
import vsim.utils.Message;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.IOException;
import vsim.linker.Relocation;
import vsim.assembler.statements.*;
import java.io.FileNotFoundException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\005" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\021\003\000\002\014\012\000\002" +
    "\014\012\000\002\014\012\000\002\014\012\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\006\006\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\006\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\007\011\000\002" +
    "\007\011\000\002\007\011\000\002\007\011\000\002\007" +
    "\011\000\002\007\003\000\002\007\003\000\002\007\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\010\011\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\012\006\000\002\012\006\000\002\013\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\004\000" +
    "\002\022\004\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\022\010\000\002\022\010\000\002\022" +
    "\010\000\002\022\010\000\002\022\010\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\022\006\000\002" +
    "\022\003\000\002\022\006\000\002\022\006\000\002\022" +
    "\006\000\002\022\004\000\002\022\004\000\002\022\003" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\022\006\000\002" +
    "\022\010\000\002\022\010\000\002\022\010\000\002\022" +
    "\010\000\002\022\004\000\002\022\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\023\003\000\002\023\005\000\002\026" +
    "\003\000\002\026\005\000\002\024\003\000\002\024\005" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\004\000\002\030\004\000\002\030\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\031\004\000\002\025\003\000\002\025\005" +
    "\000\002\032\004\000\002\032\004\000\002\043\003\000" +
    "\002\043\003\000\002\033\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\040\003\000\002\041" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\042\003\000\002\034\003\000" +
    "\002\035\003\000\002\036\003\000\002\045\003\000\002" +
    "\045\003\000\002\046\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u027e\000\360\004\140\010\160\011\022\012\071\013" +
    "\145\014\130\015\072\016\212\017\216\020\016\021\027" +
    "\022\147\023\123\024\132\025\035\026\104\027\076\030" +
    "\120\031\107\032\214\033\163\034\175\035\153\036\144" +
    "\037\201\040\010\041\021\042\047\043\116\044\151\045" +
    "\051\046\112\047\044\050\113\051\142\052\102\053\207" +
    "\054\171\055\050\056\164\057\100\060\040\061\117\062" +
    "\203\063\211\064\136\065\067\066\167\067\134\070\061" +
    "\071\043\072\055\073\054\074\032\075\133\076\126\077" +
    "\056\100\053\101\025\102\075\103\135\104\105\105\074" +
    "\106\023\107\017\110\217\111\037\112\011\113\166\114" +
    "\073\115\200\116\161\117\141\120\036\121\034\122\114" +
    "\123\063\124\012\125\052\126\215\127\005\130\157\131" +
    "\173\132\125\133\030\134\070\135\103\136\014\137\026" +
    "\140\066\141\150\142\174\143\155\144\213\145\177\146" +
    "\033\147\202\150\124\151\127\152\111\153\077\154\024" +
    "\155\172\156\007\170\110\171\065\172\060\173\162\174" +
    "\205\175\204\176\045\177\020\200\131\201\121\202\154" +
    "\203\046\204\137\205\156\206\004\001\002\000\012\157" +
    "\u027c\160\237\161\226\162\u027e\001\002\000\004\165\220" +
    "\001\002\000\362\002\001\004\140\010\160\011\022\012" +
    "\071\013\145\014\130\015\072\016\212\017\216\020\016" +
    "\021\027\022\147\023\123\024\132\025\035\026\104\027" +
    "\076\030\120\031\107\032\214\033\163\034\175\035\153" +
    "\036\144\037\201\040\010\041\021\042\047\043\116\044" +
    "\151\045\051\046\112\047\044\050\113\051\142\052\102" +
    "\053\207\054\171\055\050\056\164\057\100\060\040\061" +
    "\117\062\203\063\211\064\136\065\067\066\167\067\134" +
    "\070\061\071\043\072\055\073\054\074\032\075\133\076" +
    "\126\077\056\100\053\101\025\102\075\103\135\104\105" +
    "\105\074\106\023\107\017\110\217\111\037\112\011\113" +
    "\166\114\073\115\200\116\161\117\141\120\036\121\034" +
    "\122\114\123\063\124\012\125\052\126\215\127\005\130" +
    "\157\131\173\132\125\133\030\134\070\135\103\136\014" +
    "\137\026\140\066\141\150\142\174\143\155\144\213\145" +
    "\177\146\033\147\202\150\124\151\127\152\111\153\077" +
    "\154\024\155\172\156\007\170\110\171\065\172\060\173" +
    "\162\174\205\175\204\176\045\177\020\200\131\201\121" +
    "\202\154\203\046\204\137\205\156\206\004\001\002\000" +
    "\004\166\277\001\002\000\004\165\220\001\002\000\004" +
    "\165\220\001\002\000\006\002\uff8d\011\uff8d\001\002\000" +
    "\006\002\uffef\011\uffef\001\002\000\004\165\220\001\002" +
    "\000\006\002\ufffe\011\u0266\001\002\000\004\165\220\001" +
    "\002\000\004\165\220\001\002\000\006\002\uff66\011\uff66" +
    "\001\002\000\004\165\220\001\002\000\362\002\ufffc\004" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc" +
    "\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073" +
    "\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc" +
    "\102\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\110" +
    "\ufffc\111\ufffc\112\ufffc\113\ufffc\114\ufffc\115\ufffc\116\ufffc" +
    "\117\ufffc\120\ufffc\121\ufffc\122\ufffc\123\ufffc\124\ufffc\125" +
    "\ufffc\126\ufffc\127\ufffc\130\ufffc\131\ufffc\132\ufffc\133\ufffc" +
    "\134\ufffc\135\ufffc\136\ufffc\137\ufffc\140\ufffc\141\ufffc\142" +
    "\ufffc\143\ufffc\144\ufffc\145\ufffc\146\ufffc\147\ufffc\150\ufffc" +
    "\151\ufffc\152\ufffc\153\ufffc\154\ufffc\155\ufffc\156\ufffc\170" +
    "\ufffc\171\ufffc\172\ufffc\173\ufffc\174\ufffc\175\ufffc\176\ufffc" +
    "\177\ufffc\200\ufffc\201\ufffc\202\ufffc\203\ufffc\204\ufffc\205" +
    "\ufffc\206\ufffc\001\002\000\004\165\220\001\002\000\004" +
    "\166\277\001\002\000\004\165\220\001\002\000\004\165" +
    "\220\001\002\000\004\165\220\001\002\000\004\165\220" +
    "\001\002\000\006\002\ufff7\011\ufff7\001\002\000\004\165" +
    "\220\001\002\000\004\165\220\001\002\000\004\165\220" +
    "\001\002\000\004\165\220\001\002\000\004\165\220\001" +
    "\002\000\004\166\277\001\002\000\004\165\220\001\002" +
    "\000\006\002\uff6a\011\uff6a\001\002\000\336\002\ufff8\011" +
    "\ufff8\012\071\013\145\014\130\015\072\016\212\017\216" +
    "\020\016\021\027\022\147\023\123\024\132\025\035\026" +
    "\104\027\076\030\120\031\107\032\214\033\163\034\175" +
    "\035\153\036\144\037\201\040\010\041\021\042\047\043" +
    "\116\044\151\045\051\046\112\047\044\050\113\051\142" +
    "\052\102\053\207\054\171\055\050\056\164\057\100\060" +
    "\040\061\117\062\203\063\211\064\136\065\067\066\167" +
    "\067\134\070\061\071\043\072\055\073\054\074\032\075" +
    "\133\076\126\077\056\100\053\101\025\102\075\103\135" +
    "\104\105\105\074\106\023\107\017\110\217\111\037\112" +
    "\011\113\166\114\073\115\200\116\161\117\141\120\036" +
    "\121\034\122\114\123\063\124\012\125\052\126\215\127" +
    "\005\130\157\131\173\132\125\133\030\134\070\135\103" +
    "\136\014\137\026\140\066\141\150\142\174\143\155\144" +
    "\213\145\177\146\033\147\202\150\124\151\127\152\111" +
    "\153\077\154\024\155\172\156\007\170\110\171\065\172" +
    "\060\173\162\174\205\175\204\206\004\001\002\000\004" +
    "\165\220\001\002\000\004\166\277\001\002\000\012\177" +
    "\020\200\131\201\121\202\154\001\002\000\010\157\231" +
    "\160\237\161\226\001\002\000\004\166\277\001\002\000" +
    "\004\166\277\001\002\000\004\166\277\001\002\000\004" +
    "\165\220\001\002\000\004\165\220\001\002\000\004\165" +
    "\220\001\002\000\004\165\220\001\002\000\004\165\220" +
    "\001\002\000\006\002\ufff1\011\ufff1\001\002\000\010\157" +
    "\231\160\237\161\226\001\002\000\004\165\220\001\002" +
    "\000\006\002\uffee\011\uffee\001\002\000\004\165\220\001" +
    "\002\000\006\002\uff6c\011\uff6c\001\002\000\004\163\u0184" +
    "\001\002\000\004\165\220\001\002\000\004\165\220\001" +
    "\002\000\004\165\220\001\002\000\004\165\220\001\002" +
    "\000\004\165\220\001\002\000\004\165\220\001\002\000" +
    "\004\166\277\001\002\000\004\165\220\001\002\000\004" +
    "\165\220\001\002\000\004\167\236\001\002\000\004\166" +
    "\277\001\002\000\006\002\uff6b\011\uff6b\001\002\000\004" +
    "\166\277\001\002\000\004\165\220\001\002\000\004\165" +
    "\220\001\002\000\006\002\uffaf\011\uffaf\001\002\000\006" +
    "\002\ufff5\011\ufff5\001\002\000\004\165\220\001\002\000" +
    "\004\163\u0184\001\002\000\004\167\236\001\002\000\004" +
    "\166\277\001\002\000\004\166\277\001\002\000\006\165" +
    "\220\167\236\001\002\000\006\002\uff67\011\uff67\001\002" +
    "\000\004\166\277\001\002\000\004\165\220\001\002\000" +
    "\004\165\220\001\002\000\006\002\uff64\011\uff64\001\002" +
    "\000\006\002\ufff2\011\ufff2\001\002\000\004\165\220\001" +
    "\002\000\004\165\220\001\002\000\004\165\220\001\002" +
    "\000\004\165\220\001\002\000\006\002\uff87\011\uff87\001" +
    "\002\000\004\165\220\001\002\000\006\002\uff65\011\uff65" +
    "\001\002\000\004\165\220\001\002\000\004\165\220\001" +
    "\002\000\004\165\220\001\002\000\004\165\220\001\002" +
    "\000\004\165\220\001\002\000\010\157\231\160\237\161" +
    "\226\001\002\000\004\167\236\001\002\000\004\165\220" +
    "\001\002\000\004\166\277\001\002\000\006\002\uffeb\011" +
    "\uffeb\001\002\000\004\166\277\001\002\000\004\165\220" +
    "\001\002\000\006\002\uffed\011\uffed\001\002\000\004\165" +
    "\220\001\002\000\004\165\220\001\002\000\004\166\277" +
    "\001\002\000\006\002\ufff4\011\ufff4\001\002\000\004\165" +
    "\220\001\002\000\006\002\uff63\011\uff63\001\002\000\004" +
    "\165\220\001\002\000\004\167\236\001\002\000\004\165" +
    "\220\001\002\000\336\002\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3" +
    "\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106" +
    "\ufff3\107\ufff3\110\ufff3\111\ufff3\112\ufff3\113\ufff3\114\ufff3" +
    "\115\ufff3\116\ufff3\117\ufff3\120\ufff3\121\ufff3\122\ufff3\123" +
    "\ufff3\124\ufff3\125\ufff3\126\ufff3\127\ufff3\130\ufff3\131\ufff3" +
    "\132\ufff3\133\ufff3\134\ufff3\135\ufff3\136\ufff3\137\ufff3\140" +
    "\ufff3\141\ufff3\142\ufff3\143\ufff3\144\ufff3\145\ufff3\146\ufff3" +
    "\147\ufff3\150\ufff3\151\ufff3\152\ufff3\153\ufff3\154\ufff3\155" +
    "\ufff3\156\ufff3\170\ufff3\171\ufff3\172\ufff3\173\ufff3\174\ufff3" +
    "\175\ufff3\206\ufff3\001\002\000\004\165\220\001\002\000" +
    "\012\157\231\160\237\161\226\164\227\001\002\000\004" +
    "\165\220\001\002\000\004\166\277\001\002\000\006\002" +
    "\uffec\011\uffec\001\002\000\004\165\220\001\002\000\006" +
    "\002\uffb0\011\uffb0\001\002\000\004\002\362\001\002\000" +
    "\004\166\277\001\002\000\004\166\277\001\002\000\004" +
    "\165\220\001\002\000\004\165\220\001\002\000\004\166" +
    "\277\001\002\000\006\002\ufff6\011\ufff6\001\002\000\004" +
    "\165\220\001\002\000\004\165\220\001\002\000\004\166" +
    "\277\001\002\000\004\167\236\001\002\000\004\165\220" +
    "\001\002\000\014\157\231\160\237\161\226\164\227\167" +
    "\236\001\002\000\012\157\231\160\237\161\226\164\227" +
    "\001\002\000\006\002\uffea\011\uffea\001\002\000\004\166" +
    "\277\001\002\000\006\002\ufff0\011\ufff0\001\002\000\004" +
    "\165\220\001\002\000\004\165\220\001\002\000\004\165" +
    "\220\001\002\000\004\165\220\001\002\000\004\165\220" +
    "\001\002\000\004\165\220\001\002\000\004\165\220\001" +
    "\002\000\030\002\uff4f\005\uff4f\007\uff4f\011\uff4f\157\uff4f" +
    "\160\uff4f\161\uff4f\164\uff4f\165\uff4f\166\uff4f\167\uff4f\001" +
    "\002\000\016\005\222\157\uff4b\160\uff4b\161\uff4b\164\uff4b" +
    "\167\uff4b\001\002\000\020\157\uff4d\160\uff4d\161\uff4d\164" +
    "\uff4d\165\uff4d\166\uff4d\167\uff4d\001\002\000\014\157\231" +
    "\160\237\161\226\164\227\167\236\001\002\000\020\157" +
    "\uff4c\160\uff4c\161\uff4c\164\uff4c\165\uff4c\166\uff4c\167\uff4c" +
    "\001\002\000\004\006\242\001\002\000\012\002\uff56\005" +
    "\uff56\006\uff56\011\uff56\001\002\000\012\002\uff51\005\uff51" +
    "\006\uff51\011\uff51\001\002\000\006\005\222\165\uff4b\001" +
    "\002\000\012\002\uff5a\005\uff5a\006\uff5a\011\uff5a\001\002" +
    "\000\012\002\uff58\005\uff58\006\uff58\011\uff58\001\002\000" +
    "\012\002\uff59\005\uff59\006\uff59\011\uff59\001\002\000\012" +
    "\002\uff5d\005\uff5d\006\uff5d\011\uff5d\001\002\000\012\002" +
    "\uff5c\005\uff5c\006\uff5c\011\uff5c\001\002\000\012\002\uff5b" +
    "\005\uff5b\011\uff5b\165\uff5b\001\002\000\012\002\uff57\005" +
    "\uff57\006\uff57\011\uff57\001\002\000\004\165\220\001\002" +
    "\000\006\002\uff96\011\uff96\001\002\000\004\165\220\001" +
    "\002\000\004\007\244\001\002\000\006\002\uffab\011\uffab" +
    "\001\002\000\006\005\222\165\uff4b\001\002\000\004\165" +
    "\220\001\002\000\006\005\222\165\uff4b\001\002\000\004" +
    "\165\220\001\002\000\006\002\uffd8\011\uffd8\001\002\000" +
    "\006\005\222\165\uff4b\001\002\000\004\165\220\001\002" +
    "\000\006\002\uff8c\011\uff8c\001\002\000\006\005\222\165" +
    "\uff4b\001\002\000\004\165\220\001\002\000\006\005\222" +
    "\165\uff4b\001\002\000\004\165\220\001\002\000\006\002" +
    "\uffe1\011\uffe1\001\002\000\006\005\222\165\uff4b\001\002" +
    "\000\004\165\220\001\002\000\006\005\222\167\uff4b\001" +
    "\002\000\004\167\236\001\002\000\006\002\uff7f\011\uff7f" +
    "\001\002\000\006\005\222\165\uff4b\001\002\000\004\165" +
    "\220\001\002\000\006\005\222\165\uff4b\001\002\000\004" +
    "\165\220\001\002\000\006\002\uffd9\011\uffd9\001\002\000" +
    "\006\005\222\166\uff4b\001\002\000\004\166\277\001\002" +
    "\000\006\002\uffc0\011\uffc0\001\002\000\026\002\uff4e\005" +
    "\uff4e\011\uff4e\157\uff4e\160\uff4e\161\uff4e\164\uff4e\165\uff4e" +
    "\166\uff4e\167\uff4e\001\002\000\006\005\222\166\uff4b\001" +
    "\002\000\004\166\277\001\002\000\006\005\222\166\uff4b" +
    "\001\002\000\004\166\277\001\002\000\006\002\uffce\011" +
    "\uffce\001\002\000\010\002\uff72\005\uff72\011\uff72\001\002" +
    "\000\010\002\uff79\005\307\011\uff79\001\002\000\012\157" +
    "\231\160\237\161\226\164\227\001\002\000\010\002\uff71" +
    "\005\uff71\011\uff71\001\002\000\010\002\uff70\005\uff70\011" +
    "\uff70\001\002\000\010\002\uff78\005\307\011\uff78\001\002" +
    "\000\010\002\uff77\005\314\011\uff77\001\002\000\004\167" +
    "\236\001\002\000\010\002\uff6f\005\uff6f\011\uff6f\001\002" +
    "\000\006\005\222\166\uff4b\001\002\000\004\166\277\001" +
    "\002\000\006\005\222\166\uff4b\001\002\000\004\166\277" +
    "\001\002\000\006\002\uffc1\011\uffc1\001\002\000\006\002" +
    "\uff7b\011\uff7b\001\002\000\006\005\222\165\uff4b\001\002" +
    "\000\004\165\220\001\002\000\006\002\uffc6\011\uffc6\001" +
    "\002\000\006\005\222\165\uff4b\001\002\000\004\165\220" +
    "\001\002\000\006\005\222\167\uff4b\001\002\000\004\167" +
    "\236\001\002\000\006\002\uffa7\011\uffa7\001\002\000\006" +
    "\005\222\165\uff4b\001\002\000\004\165\220\001\002\000" +
    "\006\005\222\167\uff4b\001\002\000\004\167\236\001\002" +
    "\000\006\002\uff7e\011\uff7e\001\002\000\006\005\222\165" +
    "\uff4b\001\002\000\004\165\220\001\002\000\006\002\uffc8" +
    "\011\uffc8\001\002\000\006\005\222\167\uff4b\001\002\000" +
    "\004\167\236\001\002\000\006\002\uff81\011\uff81\001\002" +
    "\000\006\005\222\165\uff4b\001\002\000\004\165\220\001" +
    "\002\000\006\002\uff8a\011\uff8a\001\002\000\006\005\222" +
    "\166\uff4b\001\002\000\004\166\277\001\002\000\006\002" +
    "\uff8f\011\uff8f\001\002\000\006\005\222\166\uff4b\001\002" +
    "\000\004\166\277\001\002\000\006\005\222\166\uff4b\001" +
    "\002\000\004\166\277\001\002\000\006\002\uffcd\011\uffcd" +
    "\001\002\000\004\002\000\001\002\000\006\005\222\165" +
    "\uff4b\001\002\000\004\165\220\001\002\000\006\005\222" +
    "\167\uff4b\001\002\000\004\167\236\001\002\000\006\002" +
    "\uffa6\011\uffa6\001\002\000\006\005\222\166\uff4b\001\002" +
    "\000\004\166\277\001\002\000\006\005\222\166\uff4b\001" +
    "\002\000\004\166\277\001\002\000\006\002\uffcb\011\uffcb" +
    "\001\002\000\006\005\222\165\uff4b\001\002\000\004\165" +
    "\220\001\002\000\006\005\222\165\uff4b\001\002\000\004" +
    "\165\220\001\002\000\006\002\uffe0\011\uffe0\001\002\000" +
    "\010\002\uff7a\005\307\011\uff7a\001\002\000\006\005\222" +
    "\165\uff4b\001\002\000\004\165\220\001\002\000\006\005" +
    "\222\167\uff4b\001\002\000\004\167\236\001\002\000\006" +
    "\002\uffa5\011\uffa5\001\002\000\006\005\222\165\uff4b\001" +
    "\002\000\004\165\220\001\002\000\006\002\uff94\011\uff94" +
    "\001\002\000\010\002\uff61\005\uff61\011\uff61\001\002\000" +
    "\010\002\uff62\005\u010d\011\uff62\001\002\000\004\167\236" +
    "\001\002\000\010\002\uff60\005\uff60\011\uff60\001\002\000" +
    "\006\005\222\165\uff4b\001\002\000\004\165\220\001\002" +
    "\000\006\005\222\167\uff4b\001\002\000\004\167\236\001" +
    "\002\000\006\002\uff80\011\uff80\001\002\000\006\005\222" +
    "\166\uff4b\001\002\000\004\166\277\001\002\000\006\002" +
    "\uffc9\011\uffc9\001\002\000\006\005\222\166\uff4b\001\002" +
    "\000\004\166\277\001\002\000\006\005\222\166\uff4b\001" +
    "\002\000\004\166\277\001\002\000\006\002\uffd1\011\uffd1" +
    "\001\002\000\006\005\222\167\uff4b\001\002\000\004\167" +
    "\236\001\002\000\006\002\uff82\011\uff82\001\002\000\006" +
    "\005\222\165\uff4b\001\002\000\004\165\220\001\002\000" +
    "\006\005\222\165\uff4b\001\002\000\004\165\220\001\002" +
    "\000\006\002\uffdf\011\uffdf\001\002\000\006\005\222\165" +
    "\uff4b\001\002\000\004\165\220\001\002\000\006\005\222" +
    "\165\uff4b\001\002\000\004\165\220\001\002\000\006\002" +
    "\uffde\011\uffde\001\002\000\006\005\222\165\uff4b\001\002" +
    "\000\004\165\220\001\002\000\006\002\uffc7\011\uffc7\001" +
    "\002\000\006\005\222\166\uff4b\001\002\000\004\166\277" +
    "\001\002\000\006\005\222\166\uff4b\001\002\000\004\166" +
    "\277\001\002\000\006\005\222\166\uff4b\001\002\000\004" +
    "\166\277\001\002\000\006\002\uffe6\011\uffe6\001\002\000" +
    "\006\005\222\165\uff4b\001\002\000\004\165\220\001\002" +
    "\000\006\005\222\167\uff4b\001\002\000\004\167\236\001" +
    "\002\000\006\002\uffa8\011\uffa8\001\002\000\006\002\uff69" +
    "\011\uff69\001\002\000\006\002\uff5e\011\uff5e\001\002\000" +
    "\006\005\222\165\uff4b\001\002\000\004\165\220\001\002" +
    "\000\014\005\222\157\uff4b\160\uff4b\161\uff4b\164\uff4b\001" +
    "\002\000\012\157\231\160\237\161\226\164\227\001\002" +
    "\000\006\002\uffbf\011\uffbf\001\002\000\006\005\222\165" +
    "\uff4b\001\002\000\004\165\220\001\002\000\014\005\222" +
    "\157\uff4b\160\uff4b\161\uff4b\164\uff4b\001\002\000\012\157" +
    "\231\160\237\161\226\164\227\001\002\000\006\002\uffbe" +
    "\011\uffbe\001\002\000\012\002\uff88\005\222\011\uff88\165" +
    "\uff4b\001\002\000\004\165\220\001\002\000\014\005\222" +
    "\157\uff4b\160\uff4b\161\uff4b\164\uff4b\001\002\000\012\157" +
    "\231\160\237\161\226\164\227\001\002\000\006\002\uffb6" +
    "\011\uffb6\001\002\000\006\005\222\165\uff4b\001\002\000" +
    "\004\165\220\001\002\000\014\005\222\157\uff4b\160\uff4b" +
    "\161\uff4b\164\uff4b\001\002\000\012\157\231\160\237\161" +
    "\226\164\227\001\002\000\006\002\uffbd\011\uffbd\001\002" +
    "\000\006\005\222\165\uff4b\001\002\000\004\165\220\001" +
    "\002\000\006\005\222\165\uff4b\001\002\000\004\165\220" +
    "\001\002\000\006\002\uffd5\011\uffd5\001\002\000\006\005" +
    "\222\165\uff4b\001\002\000\004\165\220\001\002\000\006" +
    "\005\222\165\uff4b\001\002\000\004\165\220\001\002\000" +
    "\006\002\uffd6\011\uffd6\001\002\000\006\005\222\165\uff4b" +
    "\001\002\000\004\165\220\001\002\000\014\005\222\157" +
    "\uff4b\160\uff4b\161\uff4b\164\uff4b\001\002\000\012\157\231" +
    "\160\237\161\226\164\227\001\002\000\006\002\uffb9\011" +
    "\uffb9\001\002\000\006\005\222\165\uff4b\001\002\000\004" +
    "\165\220\001\002\000\006\002\uff93\011\uff93\001\002\000" +
    "\006\002\uff89\011\uff89\001\002\000\006\005\222\165\uff4b" +
    "\001\002\000\004\165\220\001\002\000\006\005\222\165" +
    "\uff4b\001\002\000\004\165\220\001\002\000\006\002\uffd4" +
    "\011\uffd4\001\002\000\006\005\222\165\uff4b\001\002\000" +
    "\004\165\220\001\002\000\006\005\222\165\uff4b\001\002" +
    "\000\004\165\220\001\002\000\006\002\uffe3\011\uffe3\001" +
    "\002\000\006\005\222\166\uff4b\001\002\000\004\166\277" +
    "\001\002\000\006\005\222\166\uff4b\001\002\000\004\166" +
    "\277\001\002\000\006\002\uffc2\011\uffc2\001\002\000\006" +
    "\005\222\166\uff4b\001\002\000\004\166\277\001\002\000" +
    "\006\005\222\166\uff4b\001\002\000\004\166\277\001\002" +
    "\000\006\002\uffd2\011\uffd2\001\002\000\006\002\uff7c\011" +
    "\uff7c\001\002\000\006\005\222\167\uff4b\001\002\000\004" +
    "\167\236\001\002\000\006\002\uffa1\011\uffa1\001\002\000" +
    "\006\005\222\166\uff4b\001\002\000\004\166\277\001\002" +
    "\000\006\005\222\166\uff4b\001\002\000\004\166\277\001" +
    "\002\000\006\005\222\166\uff4b\001\002\000\004\166\277" +
    "\001\002\000\006\002\uffe8\011\uffe8\001\002\000\006\005" +
    "\222\166\uff4b\001\002\000\004\166\277\001\002\000\006" +
    "\002\uffcf\011\uffcf\001\002\000\006\002\uff9e\011\uff9e\001" +
    "\002\000\006\002\uff50\011\uff50\001\002\000\006\002\uff76" +
    "\011\uff76\001\002\000\006\005\222\165\uff4b\001\002\000" +
    "\004\165\220\001\002\000\006\005\222\165\uff4b\001\002" +
    "\000\004\165\220\001\002\000\006\002\uffe4\011\uffe4\001" +
    "\002\000\006\005\222\165\uff4b\001\002\000\004\165\220" +
    "\001\002\000\006\005\222\165\uff4b\001\002\000\004\165" +
    "\220\001\002\000\006\002\uffe5\011\uffe5\001\002\000\006" +
    "\005\222\167\uff4b\001\002\000\004\167\236\001\002\000" +
    "\006\002\uff86\011\uff86\001\002\000\006\005\222\166\uff4b" +
    "\001\002\000\004\166\277\001\002\000\006\005\222\166" +
    "\uff4b\001\002\000\004\166\277\001\002\000\006\005\222" +
    "\166\uff4b\001\002\000\004\166\277\001\002\000\006\002" +
    "\uffe7\011\uffe7\001\002\000\006\005\222\166\uff4b\001\002" +
    "\000\004\166\277\001\002\000\006\005\222\166\uff4b\001" +
    "\002\000\004\166\277\001\002\000\006\002\uffca\011\uffca" +
    "\001\002\000\006\002\uff9d\011\uff9d\001\002\000\006\005" +
    "\222\165\uff4b\001\002\000\004\165\220\001\002\000\006" +
    "\005\222\165\uff4b\001\002\000\004\165\220\001\002\000" +
    "\006\002\uffdd\011\uffdd\001\002\000\006\005\222\165\uff4b" +
    "\001\002\000\004\165\220\001\002\000\014\005\222\157" +
    "\uff4b\160\uff4b\161\uff4b\164\uff4b\001\002\000\012\157\231" +
    "\160\237\161\226\164\227\001\002\000\006\002\uffb8\011" +
    "\uffb8\001\002\000\016\005\222\157\uff4b\160\uff4b\161\uff4b" +
    "\164\uff4b\167\uff4b\001\002\000\014\157\231\160\237\161" +
    "\226\164\227\167\236\001\002\000\004\006\u01b0\001\002" +
    "\000\006\005\222\165\uff4b\001\002\000\004\165\220\001" +
    "\002\000\006\002\uff99\011\uff99\001\002\000\004\165\220" +
    "\001\002\000\004\007\u01b2\001\002\000\006\002\uffae\011" +
    "\uffae\001\002\000\006\005\222\165\uff4b\001\002\000\004" +
    "\165\220\001\002\000\006\005\222\167\uff4b\001\002\000" +
    "\004\167\236\001\002\000\006\002\uffa4\011\uffa4\001\002" +
    "\000\006\005\222\165\uff4b\001\002\000\004\165\220\001" +
    "\002\000\006\005\222\165\uff4b\001\002\000\004\165\220" +
    "\001\002\000\006\002\uffd7\011\uffd7\001\002\000\006\005" +
    "\222\165\uff4b\001\002\000\004\165\220\001\002\000\006" +
    "\005\222\165\uff4b\001\002\000\004\165\220\001\002\000" +
    "\006\002\uffe2\011\uffe2\001\002\000\006\005\222\165\uff4b" +
    "\001\002\000\004\165\220\001\002\000\006\002\uff91\011" +
    "\uff91\001\002\000\006\005\222\165\uff4b\001\002\000\004" +
    "\165\220\001\002\000\014\005\222\157\uff4b\160\uff4b\161" +
    "\uff4b\164\uff4b\001\002\000\012\157\231\160\237\161\226" +
    "\164\227\001\002\000\006\002\uffbc\011\uffbc\001\002\000" +
    "\006\005\222\167\uff4b\001\002\000\004\167\236\001\002" +
    "\000\006\002\uff83\011\uff83\001\002\000\006\002\uff75\011" +
    "\uff75\001\002\000\006\005\222\167\uff4b\001\002\000\004" +
    "\167\236\001\002\000\006\002\uffa0\011\uffa0\001\002\000" +
    "\016\005\222\157\uff4b\160\uff4b\161\uff4b\164\uff4b\167\uff4b" +
    "\001\002\000\014\157\231\160\237\161\226\164\227\167" +
    "\236\001\002\000\004\006\u01d5\001\002\000\006\002\uff9c" +
    "\011\uff9c\001\002\000\004\165\220\001\002\000\004\007" +
    "\u01d7\001\002\000\006\002\uffb5\011\uffb5\001\002\000\006" +
    "\002\uff74\011\uff74\001\002\000\006\005\222\165\uff4b\001" +
    "\002\000\004\165\220\001\002\000\014\005\222\157\uff4b" +
    "\160\uff4b\161\uff4b\164\uff4b\001\002\000\012\157\231\160" +
    "\237\161\226\164\227\001\002\000\006\002\uffbb\011\uffbb" +
    "\001\002\000\016\005\222\157\uff4b\160\uff4b\161\uff4b\164" +
    "\uff4b\167\uff4b\001\002\000\014\157\231\160\237\161\226" +
    "\164\227\167\236\001\002\000\004\006\u01e2\001\002\000" +
    "\006\002\uff9b\011\uff9b\001\002\000\004\165\220\001\002" +
    "\000\004\007\u01e4\001\002\000\006\002\uffb3\011\uffb3\001" +
    "\002\000\014\005\222\157\uff4b\160\uff4b\161\uff4b\164\uff4b" +
    "\001\002\000\012\157\231\160\237\161\226\164\227\001" +
    "\002\000\004\006\u01e8\001\002\000\004\165\220\001\002" +
    "\000\004\007\u01ea\001\002\000\006\002\uffb2\011\uffb2\001" +
    "\002\000\006\005\222\165\uff4b\001\002\000\004\165\220" +
    "\001\002\000\014\005\222\157\uff4b\160\uff4b\161\uff4b\164" +
    "\uff4b\001\002\000\012\157\231\160\237\161\226\164\227" +
    "\001\002\000\006\002\uffba\011\uffba\001\002\000\014\005" +
    "\222\157\uff4b\160\uff4b\161\uff4b\164\uff4b\001\002\000\012" +
    "\157\231\160\237\161\226\164\227\001\002\000\006\002" +
    "\uff9f\011\uff9f\001\002\000\006\005\222\166\uff4b\001\002" +
    "\000\004\166\277\001\002\000\006\005\222\166\uff4b\001" +
    "\002\000\004\166\277\001\002\000\006\002\uffd0\011\uffd0" +
    "\001\002\000\006\005\222\166\uff4b\001\002\000\004\166" +
    "\277\001\002\000\006\005\222\166\uff4b\001\002\000\004" +
    "\166\277\001\002\000\006\002\uffcc\011\uffcc\001\002\000" +
    "\006\005\222\166\uff4b\001\002\000\004\166\277\001\002" +
    "\000\006\005\222\166\uff4b\001\002\000\004\166\277\001" +
    "\002\000\006\002\uffd3\011\uffd3\001\002\000\006\002\uff5f" +
    "\011\uff5f\001\002\000\006\002\uff68\011\uff68\001\002\000" +
    "\006\005\222\166\uff4b\001\002\000\004\166\277\001\002" +
    "\000\006\005\222\166\uff4b\001\002\000\004\166\277\001" +
    "\002\000\006\005\222\166\uff4b\001\002\000\004\166\277" +
    "\001\002\000\006\002\uffe9\011\uffe9\001\002\000\014\005" +
    "\222\157\uff4b\160\uff4b\161\uff4b\164\uff4b\001\002\000\012" +
    "\157\231\160\237\161\226\164\227\001\002\000\004\006" +
    "\u020e\001\002\000\004\165\220\001\002\000\004\007\u0210" +
    "\001\002\000\006\002\uffb4\011\uffb4\001\002\000\006\002" +
    "\ufffb\011\ufffb\001\002\000\006\002\ufff9\011\ufff9\001\002" +
    "\000\006\002\ufffa\011\ufffa\001\002\000\006\005\222\166" +
    "\uff4b\001\002\000\004\166\277\001\002\000\006\005\222" +
    "\166\uff4b\001\002\000\004\166\277\001\002\000\006\002" +
    "\uffc3\011\uffc3\001\002\000\016\005\222\157\uff4b\160\uff4b" +
    "\161\uff4b\164\uff4b\167\uff4b\001\002\000\014\157\231\160" +
    "\237\161\226\164\227\167\236\001\002\000\004\006\u021f" +
    "\001\002\000\006\005\222\165\uff4b\001\002\000\004\165" +
    "\220\001\002\000\006\002\uff95\011\uff95\001\002\000\004" +
    "\165\220\001\002\000\004\007\u0221\001\002\000\006\002" +
    "\uffaa\011\uffaa\001\002\000\014\005\222\157\uff4b\160\uff4b" +
    "\161\uff4b\164\uff4b\001\002\000\012\157\231\160\237\161" +
    "\226\164\227\001\002\000\006\002\uffa2\011\uffa2\001\002" +
    "\000\006\005\222\165\uff4b\001\002\000\004\165\220\001" +
    "\002\000\006\005\222\165\uff4b\001\002\000\004\165\220" +
    "\001\002\000\006\002\uffdc\011\uffdc\001\002\000\014\005" +
    "\222\157\uff4b\160\uff4b\161\uff4b\164\uff4b\001\002\000\012" +
    "\157\231\160\237\161\226\164\227\001\002\000\006\002" +
    "\uffa3\011\uffa3\001\002\000\006\005\222\165\uff4b\001\002" +
    "\000\004\165\220\001\002\000\006\005\222\167\uff4b\001" +
    "\002\000\004\167\236\001\002\000\006\002\uff7d\011\uff7d" +
    "\001\002\000\016\005\222\157\uff4b\160\uff4b\161\uff4b\164" +
    "\uff4b\167\uff4b\001\002\000\014\157\231\160\237\161\226" +
    "\164\227\167\236\001\002\000\004\006\u0236\001\002\000" +
    "\006\002\uff9a\011\uff9a\001\002\000\004\165\220\001\002" +
    "\000\004\007\u0238\001\002\000\006\002\uffb1\011\uffb1\001" +
    "\002\000\006\005\222\165\uff4b\001\002\000\004\165\220" +
    "\001\002\000\006\002\uff92\011\uff92\001\002\000\006\005" +
    "\222\165\uff4b\001\002\000\004\165\220\001\002\000\006" +
    "\005\222\165\uff4b\001\002\000\004\165\220\001\002\000" +
    "\006\002\uffdb\011\uffdb\001\002\000\006\005\222\167\uff4b" +
    "\001\002\000\004\167\236\001\002\000\006\002\uff84\011" +
    "\uff84\001\002\000\006\005\222\165\uff4b\001\002\000\004" +
    "\165\220\001\002\000\014\005\222\157\uff4b\160\uff4b\161" +
    "\uff4b\164\uff4b\001\002\000\012\157\231\160\237\161\226" +
    "\164\227\001\002\000\006\002\uffb7\011\uffb7\001\002\000" +
    "\006\005\222\166\uff4b\001\002\000\004\166\277\001\002" +
    "\000\006\002\uff90\011\uff90\001\002\000\016\005\222\157" +
    "\uff4b\160\uff4b\161\uff4b\164\uff4b\167\uff4b\001\002\000\014" +
    "\157\231\160\237\161\226\164\227\167\236\001\002\000" +
    "\004\006\u0252\001\002\000\006\005\222\165\uff4b\001\002" +
    "\000\004\165\220\001\002\000\006\002\uff98\011\uff98\001" +
    "\002\000\004\165\220\001\002\000\004\007\u0254\001\002" +
    "\000\006\002\uffad\011\uffad\001\002\000\006\005\222\166" +
    "\uff4b\001\002\000\004\166\277\001\002\000\006\002\uffc4" +
    "\011\uffc4\001\002\000\016\005\222\157\uff4b\160\uff4b\161" +
    "\uff4b\164\uff4b\167\uff4b\001\002\000\014\157\231\160\237" +
    "\161\226\164\227\167\236\001\002\000\004\006\u025e\001" +
    "\002\000\006\005\222\165\uff4b\001\002\000\004\165\220" +
    "\001\002\000\006\002\uff97\011\uff97\001\002\000\004\165" +
    "\220\001\002\000\004\007\u0260\001\002\000\006\002\uffac" +
    "\011\uffac\001\002\000\006\005\222\165\uff4b\001\002\000" +
    "\004\165\220\001\002\000\006\005\222\165\uff4b\001\002" +
    "\000\004\165\220\001\002\000\006\002\uffda\011\uffda\001" +
    "\002\000\362\002\ufffd\004\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd" +
    "\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105" +
    "\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd" +
    "\114\ufffd\115\ufffd\116\ufffd\117\ufffd\120\ufffd\121\ufffd\122" +
    "\ufffd\123\ufffd\124\ufffd\125\ufffd\126\ufffd\127\ufffd\130\ufffd" +
    "\131\ufffd\132\ufffd\133\ufffd\134\ufffd\135\ufffd\136\ufffd\137" +
    "\ufffd\140\ufffd\141\ufffd\142\ufffd\143\ufffd\144\ufffd\145\ufffd" +
    "\146\ufffd\147\ufffd\150\ufffd\151\ufffd\152\ufffd\153\ufffd\154" +
    "\ufffd\155\ufffd\156\ufffd\170\ufffd\171\ufffd\172\ufffd\173\ufffd" +
    "\174\ufffd\175\ufffd\176\ufffd\177\ufffd\200\ufffd\201\ufffd\202" +
    "\ufffd\203\ufffd\204\ufffd\205\ufffd\206\ufffd\001\002\000\006" +
    "\005\222\167\uff4b\001\002\000\004\167\236\001\002\000" +
    "\006\002\uff85\011\uff85\001\002\000\006\005\222\165\uff4b" +
    "\001\002\000\004\165\220\001\002\000\006\005\222\167" +
    "\uff4b\001\002\000\004\167\236\001\002\000\006\002\uffa9" +
    "\011\uffa9\001\002\000\006\005\222\166\uff4b\001\002\000" +
    "\004\166\277\001\002\000\006\002\uffc5\011\uffc5\001\002" +
    "\000\006\005\222\166\uff4b\001\002\000\004\166\277\001" +
    "\002\000\006\002\uff8e\011\uff8e\001\002\000\004\002\uffff" +
    "\001\002\000\006\005\222\165\uff4b\001\002\000\004\165" +
    "\220\001\002\000\006\002\uff8b\011\uff8b\001\002\000\010" +
    "\002\uff54\005\uff54\011\uff54\001\002\000\010\002\uff6e\005" +
    "\uff6e\011\uff6e\001\002\000\010\002\uff73\005\u027f\011\uff73" +
    "\001\002\000\010\002\uff52\005\uff52\011\uff52\001\002\000" +
    "\010\002\uff53\005\uff53\011\uff53\001\002\000\010\002\uff55" +
    "\005\uff55\011\uff55\001\002\000\012\157\u027c\160\237\161" +
    "\226\162\u027e\001\002\000\010\002\uff6d\005\uff6d\011\uff6d" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u027e\000\054\002\167\003\005\004\121\005\030\006" +
    "\056\007\207\010\012\011\061\012\145\013\164\014\142" +
    "\015\014\016\041\017\105\020\114\021\175\022\205\027" +
    "\151\030\063\031\100\032\040\001\001\000\012\024\u027a" +
    "\040\u0278\041\u027c\044\u0279\001\001\000\004\035\u0275\001" +
    "\001\000\054\002\u0274\003\005\004\121\005\030\006\056" +
    "\007\207\010\012\011\061\012\145\013\164\014\142\015" +
    "\014\016\041\017\105\020\114\021\175\022\205\027\151" +
    "\030\063\031\100\032\040\001\001\000\004\036\u0271\001" +
    "\001\000\004\035\u026e\001\001\000\004\035\u0269\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u0266\001" +
    "\001\000\002\001\001\000\004\035\u0260\001\001\000\004" +
    "\035\u0257\001\001\000\002\001\001\000\004\035\u0254\001" +
    "\001\000\002\001\001\000\004\035\u024b\001\001\000\004" +
    "\036\u0248\001\001\000\004\035\u0243\001\001\000\004\035" +
    "\u0240\001\001\000\004\035\u023b\001\001\000\004\035\u0238" +
    "\001\001\000\002\001\001\000\004\035\u0231\001\001\000" +
    "\004\035\u022c\001\001\000\004\035\u0229\001\001\000\004" +
    "\035\u0224\001\001\000\004\035\u0221\001\001\000\004\036" +
    "\u0218\001\001\000\004\035\u0213\001\001\000\002\001\001" +
    "\000\032\004\121\005\u0210\006\056\007\207\010\012\011" +
    "\061\012\145\013\164\014\142\017\u0211\021\u0212\022\205" +
    "\001\001\000\004\035\u020a\001\001\000\004\036\u0203\001" +
    "\001\000\004\020\u0202\001\001\000\010\037\u0201\040\232" +
    "\041\231\001\001\000\004\036\u01fc\001\001\000\004\036" +
    "\u01f7\001\001\000\004\036\u01f2\001\001\000\004\035\u01ef" +
    "\001\001\000\004\035\u01ea\001\001\000\004\035\u01e4\001" +
    "\001\000\004\035\u01dd\001\001\000\004\035\u01d8\001\001" +
    "\000\002\001\001\000\010\037\u01d7\040\232\041\231\001" +
    "\001\000\004\035\u01d0\001\001\000\002\001\001\000\004" +
    "\035\u01cd\001\001\000\002\001\001\000\004\034\u01cc\001" +
    "\001\000\004\035\u01c9\001\001\000\004\035\u01c4\001\001" +
    "\000\004\035\u01c1\001\001\000\004\035\u01bc\001\001\000" +
    "\004\035\u01b7\001\001\000\004\035\u01b2\001\001\000\004" +
    "\036\u01a9\001\001\000\004\035\u01a4\001\001\000\004\035" +
    "\u019f\001\001\000\004\033\u019e\001\001\000\004\036\u0199" +
    "\001\001\000\002\001\001\000\004\036\u0192\001\001\000" +
    "\004\035\u018f\001\001\000\004\035\u018a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u0185\001\001\000" +
    "\004\034\u0184\001\001\000\004\033\u0182\001\001\000\004" +
    "\036\u017f\001\001\000\004\036\u0178\001\001\000\006\033" +
    "\u0174\035\u0175\001\001\000\002\001\001\000\004\036\u016f" +
    "\001\001\000\004\035\u016a\001\001\000\004\035\u0165\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u0160" +
    "\001\001\000\004\035\u015f\001\001\000\004\035\u015c\001" +
    "\001\000\004\035\u0157\001\001\000\002\001\001\000\004" +
    "\035\u0152\001\001\000\002\001\001\000\004\035\u014d\001" +
    "\001\000\004\035\u0148\001\001\000\004\035\u0143\001\001" +
    "\000\004\035\u013e\001\001\000\004\035\u0139\001\001\000" +
    "\010\037\u0138\040\232\041\231\001\001\000\004\033\u0137" +
    "\001\001\000\004\035\u0132\001\001\000\004\036\u012b\001" +
    "\001\000\002\001\001\000\004\036\u0128\001\001\000\004" +
    "\035\u0123\001\001\000\002\001\001\000\004\035\u011e\001" +
    "\001\000\004\035\u011b\001\001\000\004\036\u0116\001\001" +
    "\000\002\001\001\000\004\035\u0113\001\001\000\002\001" +
    "\001\000\004\035\u010e\001\001\000\006\025\u010b\033\u010a" +
    "\001\001\000\004\035\u0107\001\001\000\002\001\001\000" +
    "\004\035\u0102\001\001\000\016\023\u0101\037\233\040\232" +
    "\041\231\042\234\043\304\001\001\000\004\035\374\001" +
    "\001\000\004\036\367\001\001\000\002\001\001\000\004" +
    "\035\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\354\001\001\000\004\036\351\001\001\000\004" +
    "\035\346\001\001\000\004\035\343\001\001\000\004\036" +
    "\340\001\001\000\002\001\001\000\004\035\333\001\001" +
    "\000\004\035\326\001\001\000\004\036\323\001\001\000" +
    "\004\033\322\001\001\000\004\035\315\001\001\000\022" +
    "\023\311\026\312\033\310\037\233\040\232\041\231\042" +
    "\234\043\304\001\001\000\016\023\305\037\233\040\232" +
    "\041\231\042\234\043\304\001\001\000\002\001\001\000" +
    "\004\036\277\001\001\000\002\001\001\000\004\035\273" +
    "\001\001\000\004\035\266\001\001\000\004\035\261\001" +
    "\001\000\004\035\254\001\001\000\004\035\251\001\001" +
    "\000\004\035\244\001\001\000\004\035\220\001\001\000" +
    "\002\001\001\000\006\045\222\046\223\001\001\000\002" +
    "\001\001\000\016\033\227\037\233\040\232\041\231\042" +
    "\234\043\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\237\046" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\240\001\001\000\002" +
    "\001\001\000\004\035\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\245\046\223\001\001\000\004" +
    "\035\246\001\001\000\006\045\247\046\223\001\001\000" +
    "\004\035\250\001\001\000\002\001\001\000\006\045\252" +
    "\046\223\001\001\000\004\035\253\001\001\000\002\001" +
    "\001\000\006\045\255\046\223\001\001\000\004\035\256" +
    "\001\001\000\006\045\257\046\223\001\001\000\004\035" +
    "\260\001\001\000\002\001\001\000\006\045\262\046\223" +
    "\001\001\000\004\035\263\001\001\000\006\045\264\046" +
    "\223\001\001\000\004\033\265\001\001\000\002\001\001" +
    "\000\006\045\267\046\223\001\001\000\004\035\270\001" +
    "\001\000\006\045\271\046\223\001\001\000\004\035\272" +
    "\001\001\000\002\001\001\000\006\045\274\046\223\001" +
    "\001\000\004\036\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\300\046\223\001\001\000\004\036" +
    "\301\001\001\000\006\045\302\046\223\001\001\000\004" +
    "\036\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\233\040\232\041\231\042\234" +
    "\043\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\314\001\001" +
    "\000\002\001\001\000\006\045\316\046\223\001\001\000" +
    "\004\036\317\001\001\000\006\045\320\046\223\001\001" +
    "\000\004\036\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\324\046\223\001\001\000\004\035\325" +
    "\001\001\000\002\001\001\000\006\045\327\046\223\001" +
    "\001\000\004\035\330\001\001\000\006\045\331\046\223" +
    "\001\001\000\004\033\332\001\001\000\002\001\001\000" +
    "\006\045\334\046\223\001\001\000\004\035\335\001\001" +
    "\000\006\045\336\046\223\001\001\000\004\033\337\001" +
    "\001\000\002\001\001\000\006\045\341\046\223\001\001" +
    "\000\004\035\342\001\001\000\002\001\001\000\006\045" +
    "\344\046\223\001\001\000\004\033\345\001\001\000\002" +
    "\001\001\000\006\045\347\046\223\001\001\000\004\035" +
    "\350\001\001\000\002\001\001\000\006\045\352\046\223" +
    "\001\001\000\004\036\353\001\001\000\002\001\001\000" +
    "\006\045\355\046\223\001\001\000\004\036\356\001\001" +
    "\000\006\045\357\046\223\001\001\000\004\036\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\363" +
    "\046\223\001\001\000\004\035\364\001\001\000\006\045" +
    "\365\046\223\001\001\000\004\033\366\001\001\000\002" +
    "\001\001\000\006\045\370\046\223\001\001\000\004\036" +
    "\371\001\001\000\006\045\372\046\223\001\001\000\004" +
    "\036\373\001\001\000\002\001\001\000\006\045\375\046" +
    "\223\001\001\000\004\035\376\001\001\000\006\045\377" +
    "\046\223\001\001\000\004\035\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u0103\046\223\001\001" +
    "\000\004\035\u0104\001\001\000\006\045\u0105\046\223\001" +
    "\001\000\004\033\u0106\001\001\000\002\001\001\000\006" +
    "\045\u0108\046\223\001\001\000\004\035\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u010d\001\001\000\002\001\001\000\006\045\u010f\046" +
    "\223\001\001\000\004\035\u0110\001\001\000\006\045\u0111" +
    "\046\223\001\001\000\004\033\u0112\001\001\000\002\001" +
    "\001\000\006\045\u0114\046\223\001\001\000\004\036\u0115" +
    "\001\001\000\002\001\001\000\006\045\u0117\046\223\001" +
    "\001\000\004\036\u0118\001\001\000\006\045\u0119\046\223" +
    "\001\001\000\004\036\u011a\001\001\000\002\001\001\000" +
    "\006\045\u011c\046\223\001\001\000\004\033\u011d\001\001" +
    "\000\002\001\001\000\006\045\u011f\046\223\001\001\000" +
    "\004\035\u0120\001\001\000\006\045\u0121\046\223\001\001" +
    "\000\004\035\u0122\001\001\000\002\001\001\000\006\045" +
    "\u0124\046\223\001\001\000\004\035\u0125\001\001\000\006" +
    "\045\u0126\046\223\001\001\000\004\035\u0127\001\001\000" +
    "\002\001\001\000\006\045\u0129\046\223\001\001\000\004" +
    "\035\u012a\001\001\000\002\001\001\000\006\045\u012c\046" +
    "\223\001\001\000\004\036\u012d\001\001\000\006\045\u012e" +
    "\046\223\001\001\000\004\036\u012f\001\001\000\006\045" +
    "\u0130\046\223\001\001\000\004\036\u0131\001\001\000\002" +
    "\001\001\000\006\045\u0133\046\223\001\001\000\004\035" +
    "\u0134\001\001\000\006\045\u0135\046\223\001\001\000\004" +
    "\033\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\u013a\046\223\001\001\000\004" +
    "\035\u013b\001\001\000\006\045\u013c\046\223\001\001\000" +
    "\014\037\233\040\232\041\231\042\234\043\u013d\001\001" +
    "\000\002\001\001\000\006\045\u013f\046\223\001\001\000" +
    "\004\035\u0140\001\001\000\006\045\u0141\046\223\001\001" +
    "\000\014\037\233\040\232\041\231\042\234\043\u0142\001" +
    "\001\000\002\001\001\000\006\045\u0144\046\223\001\001" +
    "\000\004\035\u0145\001\001\000\006\045\u0146\046\223\001" +
    "\001\000\014\037\233\040\232\041\231\042\234\043\u0147" +
    "\001\001\000\002\001\001\000\006\045\u0149\046\223\001" +
    "\001\000\004\035\u014a\001\001\000\006\045\u014b\046\223" +
    "\001\001\000\014\037\233\040\232\041\231\042\234\043" +
    "\u014c\001\001\000\002\001\001\000\006\045\u014e\046\223" +
    "\001\001\000\004\035\u014f\001\001\000\006\045\u0150\046" +
    "\223\001\001\000\004\035\u0151\001\001\000\002\001\001" +
    "\000\006\045\u0153\046\223\001\001\000\004\035\u0154\001" +
    "\001\000\006\045\u0155\046\223\001\001\000\004\035\u0156" +
    "\001\001\000\002\001\001\000\006\045\u0158\046\223\001" +
    "\001\000\004\035\u0159\001\001\000\006\045\u015a\046\223" +
    "\001\001\000\014\037\233\040\232\041\231\042\234\043" +
    "\u015b\001\001\000\002\001\001\000\006\045\u015d\046\223" +
    "\001\001\000\004\035\u015e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\u0161\046\223\001\001\000\004" +
    "\035\u0162\001\001\000\006\045\u0163\046\223\001\001\000" +
    "\004\035\u0164\001\001\000\002\001\001\000\006\045\u0166" +
    "\046\223\001\001\000\004\035\u0167\001\001\000\006\045" +
    "\u0168\046\223\001\001\000\004\035\u0169\001\001\000\002" +
    "\001\001\000\006\045\u016b\046\223\001\001\000\004\036" +
    "\u016c\001\001\000\006\045\u016d\046\223\001\001\000\004" +
    "\036\u016e\001\001\000\002\001\001\000\006\045\u0170\046" +
    "\223\001\001\000\004\036\u0171\001\001\000\006\045\u0172" +
    "\046\223\001\001\000\004\036\u0173\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u0176\046\223\001\001" +
    "\000\004\033\u0177\001\001\000\002\001\001\000\006\045" +
    "\u0179\046\223\001\001\000\004\036\u017a\001\001\000\006" +
    "\045\u017b\046\223\001\001\000\004\036\u017c\001\001\000" +
    "\006\045\u017d\046\223\001\001\000\004\036\u017e\001\001" +
    "\000\002\001\001\000\006\045\u0180\046\223\001\001\000" +
    "\004\036\u0181\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\u0186\046" +
    "\223\001\001\000\004\035\u0187\001\001\000\006\045\u0188" +
    "\046\223\001\001\000\004\035\u0189\001\001\000\002\001" +
    "\001\000\006\045\u018b\046\223\001\001\000\004\035\u018c" +
    "\001\001\000\006\045\u018d\046\223\001\001\000\004\035" +
    "\u018e\001\001\000\002\001\001\000\006\045\u0190\046\223" +
    "\001\001\000\004\033\u0191\001\001\000\002\001\001\000" +
    "\006\045\u0193\046\223\001\001\000\004\036\u0194\001\001" +
    "\000\006\045\u0195\046\223\001\001\000\004\036\u0196\001" +
    "\001\000\006\045\u0197\046\223\001\001\000\004\036\u0198" +
    "\001\001\000\002\001\001\000\006\045\u019a\046\223\001" +
    "\001\000\004\036\u019b\001\001\000\006\045\u019c\046\223" +
    "\001\001\000\004\036\u019d\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\u01a0\046\223\001\001\000\004" +
    "\035\u01a1\001\001\000\006\045\u01a2\046\223\001\001\000" +
    "\004\035\u01a3\001\001\000\002\001\001\000\006\045\u01a5" +
    "\046\223\001\001\000\004\035\u01a6\001\001\000\006\045" +
    "\u01a7\046\223\001\001\000\014\037\233\040\232\041\231" +
    "\042\234\043\u01a8\001\001\000\002\001\001\000\006\045" +
    "\u01aa\046\223\001\001\000\016\033\u01ac\037\233\040\232" +
    "\041\231\042\234\043\u01ab\001\001\000\002\001\001\000" +
    "\006\045\u01ad\046\223\001\001\000\004\035\u01ae\001\001" +
    "\000\002\001\001\000\004\035\u01b0\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u01b3\046\223\001\001" +
    "\000\004\035\u01b4\001\001\000\006\045\u01b5\046\223\001" +
    "\001\000\004\033\u01b6\001\001\000\002\001\001\000\006" +
    "\045\u01b8\046\223\001\001\000\004\035\u01b9\001\001\000" +
    "\006\045\u01ba\046\223\001\001\000\004\035\u01bb\001\001" +
    "\000\002\001\001\000\006\045\u01bd\046\223\001\001\000" +
    "\004\035\u01be\001\001\000\006\045\u01bf\046\223\001\001" +
    "\000\004\035\u01c0\001\001\000\002\001\001\000\006\045" +
    "\u01c2\046\223\001\001\000\004\035\u01c3\001\001\000\002" +
    "\001\001\000\006\045\u01c5\046\223\001\001\000\004\035" +
    "\u01c6\001\001\000\006\045\u01c7\046\223\001\001\000\014" +
    "\037\233\040\232\041\231\042\234\043\u01c8\001\001\000" +
    "\002\001\001\000\006\045\u01ca\046\223\001\001\000\004" +
    "\033\u01cb\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\u01ce\046\223\001\001\000\004\033\u01cf\001\001" +
    "\000\002\001\001\000\006\045\u01d1\046\223\001\001\000" +
    "\016\033\u01d3\037\233\040\232\041\231\042\234\043\u01d2" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u01d5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\u01d9\046\223\001\001\000\004\035" +
    "\u01da\001\001\000\006\045\u01db\046\223\001\001\000\014" +
    "\037\233\040\232\041\231\042\234\043\u01dc\001\001\000" +
    "\002\001\001\000\006\045\u01de\046\223\001\001\000\016" +
    "\033\u01e0\037\233\040\232\041\231\042\234\043\u01df\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u01e2" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\u01e5\046\223\001\001\000\014\037\233\040\232\041\231" +
    "\042\234\043\u01e6\001\001\000\002\001\001\000\004\035" +
    "\u01e8\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\u01eb\046\223\001\001\000\004\035\u01ec\001\001\000" +
    "\006\045\u01ed\046\223\001\001\000\014\037\233\040\232" +
    "\041\231\042\234\043\u01ee\001\001\000\002\001\001\000" +
    "\006\045\u01f0\046\223\001\001\000\014\037\233\040\232" +
    "\041\231\042\234\043\u01f1\001\001\000\002\001\001\000" +
    "\006\045\u01f3\046\223\001\001\000\004\036\u01f4\001\001" +
    "\000\006\045\u01f5\046\223\001\001\000\004\036\u01f6\001" +
    "\001\000\002\001\001\000\006\045\u01f8\046\223\001\001" +
    "\000\004\036\u01f9\001\001\000\006\045\u01fa\046\223\001" +
    "\001\000\004\036\u01fb\001\001\000\002\001\001\000\006" +
    "\045\u01fd\046\223\001\001\000\004\036\u01fe\001\001\000" +
    "\006\045\u01ff\046\223\001\001\000\004\036\u0200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\u0204\046\223\001\001\000\004\036\u0205\001\001" +
    "\000\006\045\u0206\046\223\001\001\000\004\036\u0207\001" +
    "\001\000\006\045\u0208\046\223\001\001\000\004\036\u0209" +
    "\001\001\000\002\001\001\000\006\045\u020b\046\223\001" +
    "\001\000\014\037\233\040\232\041\231\042\234\043\u020c" +
    "\001\001\000\002\001\001\000\004\035\u020e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\u0214\046\223\001" +
    "\001\000\004\036\u0215\001\001\000\006\045\u0216\046\223" +
    "\001\001\000\004\036\u0217\001\001\000\002\001\001\000" +
    "\006\045\u0219\046\223\001\001\000\016\033\u021b\037\233" +
    "\040\232\041\231\042\234\043\u021a\001\001\000\002\001" +
    "\001\000\006\045\u021c\046\223\001\001\000\004\035\u021d" +
    "\001\001\000\002\001\001\000\004\035\u021f\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\045\u0222\046\223" +
    "\001\001\000\014\037\233\040\232\041\231\042\234\043" +
    "\u0223\001\001\000\002\001\001\000\006\045\u0225\046\223" +
    "\001\001\000\004\035\u0226\001\001\000\006\045\u0227\046" +
    "\223\001\001\000\004\035\u0228\001\001\000\002\001\001" +
    "\000\006\045\u022a\046\223\001\001\000\014\037\233\040" +
    "\232\041\231\042\234\043\u022b\001\001\000\002\001\001" +
    "\000\006\045\u022d\046\223\001\001\000\004\035\u022e\001" +
    "\001\000\006\045\u022f\046\223\001\001\000\004\033\u0230" +
    "\001\001\000\002\001\001\000\006\045\u0232\046\223\001" +
    "\001\000\016\033\u0234\037\233\040\232\041\231\042\234" +
    "\043\u0233\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u0236\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u0239\046\223\001\001\000\004\035\u023a\001" +
    "\001\000\002\001\001\000\006\045\u023c\046\223\001\001" +
    "\000\004\035\u023d\001\001\000\006\045\u023e\046\223\001" +
    "\001\000\004\035\u023f\001\001\000\002\001\001\000\006" +
    "\045\u0241\046\223\001\001\000\004\033\u0242\001\001\000" +
    "\002\001\001\000\006\045\u0244\046\223\001\001\000\004" +
    "\035\u0245\001\001\000\006\045\u0246\046\223\001\001\000" +
    "\014\037\233\040\232\041\231\042\234\043\u0247\001\001" +
    "\000\002\001\001\000\006\045\u0249\046\223\001\001\000" +
    "\004\036\u024a\001\001\000\002\001\001\000\006\045\u024c" +
    "\046\223\001\001\000\016\033\u024e\037\233\040\232\041" +
    "\231\042\234\043\u024d\001\001\000\002\001\001\000\006" +
    "\045\u024f\046\223\001\001\000\004\035\u0250\001\001\000" +
    "\002\001\001\000\004\035\u0252\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\u0255\046\223\001\001\000" +
    "\004\036\u0256\001\001\000\002\001\001\000\006\045\u0258" +
    "\046\223\001\001\000\016\033\u025a\037\233\040\232\041" +
    "\231\042\234\043\u0259\001\001\000\002\001\001\000\006" +
    "\045\u025b\046\223\001\001\000\004\035\u025c\001\001\000" +
    "\002\001\001\000\004\035\u025e\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\u0261\046\223\001\001\000" +
    "\004\035\u0262\001\001\000\006\045\u0263\046\223\001\001" +
    "\000\004\035\u0264\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\u0267\046\223\001\001\000\004\033\u0268" +
    "\001\001\000\002\001\001\000\006\045\u026a\046\223\001" +
    "\001\000\004\035\u026b\001\001\000\006\045\u026c\046\223" +
    "\001\001\000\004\033\u026d\001\001\000\002\001\001\000" +
    "\006\045\u026f\046\223\001\001\000\004\036\u0270\001\001" +
    "\000\002\001\001\000\006\045\u0272\046\223\001\001\000" +
    "\004\036\u0273\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u0276\046\223\001\001\000\004\035\u0277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\u0278\041\u027c\044\u027f\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static void parse(File file) {
    try {
      Parser parser = new Parser(new Lexer(new FileReader(file)));
      parser.parse();
    } catch (FileNotFoundException e) {
      Errors.add("assembler: file '" + file + "' not found");
    } catch (IOException e) {
      Errors.add("assembler: file '" + file + "' could not be read");
    } catch (Exception e) {
      /* DO NOTHING */
    }
  }

  public DebugInfo info(int lineno, int column, String source, String filename) {
    return new DebugInfo(lineno, column, source, filename);
  }

  @Override
  public void syntax_error(java_cup.runtime.Symbol cur_token) {
    // show all escaped sequences
    if (cur_token.value instanceof String) {
      cur_token.value = ((String) cur_token.value).replaceAll("\n", "\\\\n");
      cur_token.value = ((String) cur_token.value).replaceAll("\r", "\\\\r");
      cur_token.value = ((String) cur_token.value).replaceAll("\b", "\\\\b");
      cur_token.value = ((String) cur_token.value).replaceAll("\f", "\\\\f");
      cur_token.value = ((String) cur_token.value).replaceAll("\0", "\\\\0");
      cur_token.value = ((String) cur_token.value).replaceAll("\t", "\\\\t");
      cur_token.value = ((String) cur_token.value).replaceAll("\u000b", "\\\\v");
    }
    DebugInfo info = info(cur_token.left, cur_token.right, cur_token.value.toString(), Assembler.filename);
    // parser error
    if (cur_token.sym != Token.ERROR)
      Errors.add(
        info,
        "assembler",
        "(syntax) invalid statement: unexpected '" + cur_token.value + "'"
      );
    // lexer error
    else
      Errors.add(
        info,
        "assembler",
        (String)cur_token.value
      );
  }

  @Override
  public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) {
    /* DO NOTHING */
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Init ::= NLStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Init EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Init ::= NLStatement Init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Init ::= Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NLStatement ::= Statement NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NLStatement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NLStatement ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NLStatement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= Label RISCVInst 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= Label RISCVPSeudo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= Label Data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= Label 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= RISCVInst 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= RISCVPSeudo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= Data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= Directive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Label ::= LABEL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  String rawLabel = (String) id;
                  String lbl = rawLabel.substring(0, rawLabel.length() - 1);
                  if (!Assembler.program.addSymbol(Assembler.segment, lbl))
                    Errors.add(info(idleft, idright, rawLabel, Assembler.filename), "assembler", "label '" + lbl + "' is already defined");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Label",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RISCVInst ::= Instruction 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!(Assembler.segment == Segment.TEXT))
                    Errors.add(i.getDebugInfo(), "assembler", "instructions can appear only in text segment");
                  else
                    Assembler.program.add(i);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RISCVInst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruction ::= RType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instruction ::= IType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instruction ::= SType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruction ::= BType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruction ::= UType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruction ::= JType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruction ::= R4Type 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RISCVPSeudo ::= PSeudos 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!(Assembler.segment == Segment.TEXT))
                    Errors.add(l.get(0).getDebugInfo(), "assembler", "instructions can appear only in text segment");
                  else {
                    if (Settings.BARE)
                      Errors.add(l.get(0).getDebugInfo(), "assembler", "invalid pseudo instruction (bare machine mode)");
                    else {
                      for (Statement stmt: l)
                        Assembler.program.add(stmt);
                    }
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RISCVPSeudo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // R4Type ::= F_FMADDS FRegister Delimiter FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new R4Type("fmadd.s", info(ileft, iright, String.format("fmadd.s %s, %s, %s, %s", rd, rs1, rs2, rs3), Assembler.filename), rd, rs1, rs2, rs3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R4Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // R4Type ::= F_FMSUBS FRegister Delimiter FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new R4Type("fmsub.s", info(ileft, iright, String.format("fmsub.s %s, %s, %s, %s", rd, rs1, rs2, rs3), Assembler.filename), rd, rs1, rs2, rs3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R4Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // R4Type ::= F_FNMADDS FRegister Delimiter FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new R4Type("fnmadd.s", info(ileft, iright, String.format("fnmadd.s %s, %s, %s, %s", rd, rs1, rs2, rs3), Assembler.filename), rd, rs1, rs2, rs3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R4Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // R4Type ::= F_FNMSUBS FRegister Delimiter FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new R4Type("fnmsub.s", info(ileft, iright, String.format("fnmsub.s %s, %s, %s, %s", rd, rs1, rs2, rs3), Assembler.filename), rd, rs1, rs2, rs3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R4Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RType ::= I_SLL Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sll", info(ileft, iright, String.format("sll %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RType ::= I_SRL Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("srl", info(ileft, iright, String.format("srl %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RType ::= I_SRA Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sra", info(ileft, iright, String.format("sra %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RType ::= I_ADD Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("add", info(ileft, iright, String.format("add %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RType ::= I_SUB Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sub", info(ileft, iright, String.format("sub %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RType ::= I_XOR Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("xor", info(ileft, iright, String.format("xor %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RType ::= I_OR Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("or", info(ileft, iright, String.format("or %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RType ::= I_AND Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("and", info(ileft, iright, String.format("and %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RType ::= I_SLT Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("slt", info(ileft, iright, String.format("slt %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RType ::= I_SLTU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sltu", info(ileft, iright, String.format("sltu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RType ::= I_MUL Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("mul", info(ileft, iright, String.format("mul %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RType ::= I_MULH Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("mulh", info(ileft, iright, String.format("mulh %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RType ::= I_MULHSU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("mulhsu", info(ileft, iright, String.format("mulhsu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RType ::= I_MULHU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("mulhu", info(ileft, iright, String.format("mulhu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RType ::= I_DIV Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("div", info(ileft, iright, String.format("div %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RType ::= I_DIVU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("divu", info(ileft, iright, String.format("divu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RType ::= I_REM Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("rem", info(ileft, iright, String.format("rem %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RType ::= I_REMU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("remu", info(ileft, iright, String.format("remu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RType ::= F_FADDS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fadd.s", info(ileft, iright, String.format("fadd.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RType ::= F_FSUBS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsub.s", info(ileft, iright, String.format("fsub.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RType ::= F_FMULS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fmul.s", info(ileft, iright, String.format("fmul.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RType ::= F_FDIVS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fdiv.s", info(ileft, iright, String.format("fdiv.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RType ::= F_FSQRTS FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsqrt.s", info(ileft, iright, String.format("fsqrt.s %s, %s", rd, rs1), Assembler.filename), rd, rs1, "f0"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RType ::= F_FSGNJS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsgnj.s", info(ileft, iright, String.format("fsgnj.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RType ::= F_FSGNJNS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsgnjn.s", info(ileft, iright, String.format("fsgnjn.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RType ::= F_FSGNJXS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsgnjx.s", info(ileft, iright, String.format("fsgnjx.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RType ::= F_FMINS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fmin.s", info(ileft, iright, String.format("fmin.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RType ::= F_FMAXS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fmax.s", info(ileft, iright, String.format("fmax.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RType ::= F_FMVXW Register Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fmv.x.w", info(ileft, iright, String.format("fmv.x.w %s, %s", rd, rs1), Assembler.filename), "f" + num, rs1, "f0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RType ::= F_FMVWX FRegister Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rs1);
                  RESULT = new FRType("fmv.w.x", info(ileft, iright, String.format("fmv.w.x %s, %s", rd, rs1), Assembler.filename), rd, "f" + num, "f0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RType ::= F_FCVTSW FRegister Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rs1);
                  RESULT = new FRType("fcvt.s.w", info(ileft, iright, String.format("fcvt.s.w %s, %s", rd, rs1), Assembler.filename), rd, "f" + num, "f0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RType ::= F_FCVTSWU FRegister Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rs1);
                  RESULT = new FRType("fcvt.s.wu", info(ileft, iright, String.format("fcvt.s.wu %s, %s", rd, rs1), Assembler.filename), rd, "f" + num, "f1");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RType ::= F_FCVTWS Register Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fcvt.w.s", info(ileft, iright, String.format("fcvt.w.s %s, %s", rd, rs1), Assembler.filename), "f" + num, rs1, "f0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RType ::= F_FCVTWUS Register Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fcvt.wu.s", info(ileft, iright, String.format("fcvt.wu.s %s, %s", rd, rs1), Assembler.filename), "f" + num, rs1, "f1");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RType ::= F_FEQS Register Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("feq.s", info(ileft, iright, String.format("feq.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), "f" + num, rs1, rs2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RType ::= F_FLTS Register Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("flt.s", info(ileft, iright, String.format("flt.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), "f" + num, rs1, rs2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RType ::= F_FLES Register Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fle.s", info(ileft, iright, String.format("fle.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), "f" + num, rs1, rs2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RType ::= F_FCLASSS Register Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fclass.s", info(ileft, iright, String.format("fclass.s %s, %s", rd, rs1), Assembler.filename), "f" + num, rs1, "f1");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IType ::= I_ADDI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("addi", info(ileft, iright, String.format("addi %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IType ::= I_XORI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("xori", info(ileft, iright, String.format("xori %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IType ::= I_ORI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("ori", info(ileft, iright, String.format("ori %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IType ::= I_ANDI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("andi", info(ileft, iright, String.format("andi %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IType ::= I_SLTI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("slti", info(ileft, iright, String.format("slti %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IType ::= I_SLTIU Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("sltiu", info(ileft, iright, String.format("sltiu %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IType ::= I_SLLI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Shift("slli", info(ileft, iright, String.format("slli %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IType ::= I_SRLI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Shift("srli", info(ileft, iright, String.format("srli %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IType ::= I_SRAI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Shift("srai", info(ileft, iright, String.format("srai %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IType ::= I_JALR Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("jalr", info(ileft, iright, String.format("jalr %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IType ::= I_LB Register Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lb", info(ileft, iright, String.format("lb %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IType ::= I_LBU Register Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lbu", info(ileft, iright, String.format("lbu %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IType ::= I_LH Register Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lh", info(ileft, iright, String.format("lh %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IType ::= I_LHU Register Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lhu", info(ileft, iright, String.format("lhu %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IType ::= I_LW Register Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lw", info(ileft, iright, String.format("lw %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IType ::= I_ECALL 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("ecall", info(ileft, iright, "ecall", Assembler.filename), "x0", "x0", 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IType ::= I_BREAK 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("ebreak", info(ileft, iright, "ebreak", Assembler.filename), "x0", "x0", 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IType ::= F_FLW FRegister Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  // hack to re-use IType Statement
                  int num = Globals.fregfile.getRegisterNumber(rd);
                  RESULT = new IType("flw", info(ileft, iright, String.format("flw %s, %d(%s)", rd, offset, rs1), Assembler.filename), "x" + num, rs1, offset);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SType ::= I_SB Register Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SType("sb", info(ileft, iright, String.format("sb %s, %d(%s)", rs2, offset, rs1), Assembler.filename), rs1, rs2, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SType ::= I_SH Register Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SType("sh", info(ileft, iright, String.format("sh %s, %d(%s)", rs2, offset, rs1), Assembler.filename), rs1, rs2, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SType ::= I_SW Register Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SType("sw", info(ileft, iright, String.format("sw %s, %d(%s)", rs2, offset, rs1), Assembler.filename), rs1, rs2, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SType ::= F_FSW FRegister Delimiter Const LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  // hack to re-use SType Statement
                  int num = Globals.fregfile.getRegisterNumber(rs2);
                  RESULT = new SType("fsw", info(ileft, iright, String.format("fsw %s, %d(%s)", rs2, offset, rs1), Assembler.filename), rs1, "x" + num, offset);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BType ::= I_BEQ Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("beq", info(ileft, iright, String.format("beq %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BType ::= I_BNE Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bne", info(ileft, iright, String.format("bne %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BType ::= I_BLT Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("blt", info(ileft, iright, String.format("blt %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BType ::= I_BGE Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bge", info(ileft, iright, String.format("bge %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BType ::= I_BLTU Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bltu", info(ileft, iright, String.format("bltu %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BType ::= I_BGEU Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bgeu", info(ileft, iright, String.format("bgeu %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // UType ::= I_AUIPC Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UType("auipc", info(ileft, iright, String.format("auipc %s, %d", rd, imm), Assembler.filename), rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // UType ::= I_LUI Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UType("lui", info(ileft, iright, String.format("lui %s, %d", rd, imm), Assembler.filename), rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // JType ::= I_JAL Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", info(ileft, iright, String.format("jal %s, %s", rd, id), Assembler.filename), rd, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PSeudos ::= I_LA Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                  DebugInfo debug = info(ileft, iright, String.format("la %s, %s", rd, id), Assembler.filename);
                  stmts.add(new UType("auipc", debug, rd, new Relocation(Relocation.PCRELHI, id, debug)));
                  stmts.add(new IType("addi", debug, rd, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                  RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PSeudos ::= I_LI Register Delimiter Const 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(ileft, iright, String.format("li %s, %d", rd, imm), Assembler.filename);
                  if (imm > 2047 || imm < -2048) {
                    int imm_hi =  ((imm >>> 12) + ((imm >>> 11) & 0x1)) & 0x000fffff;
                    int imm_lo = Data.signExtend((imm & 0xfff), 12);
                    ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                    stmts.add(new UType("lui", debug, rd, imm_hi));
                    stmts.add(new IType("addi", debug, rd, rd, imm_lo));
                    RESULT = stmts;
                  } else {
                    ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                    stmts.add(new IType("addi", debug, rd, "x0", imm));
                    RESULT = stmts;
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PSeudos ::= I_CALL Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(ileft, iright, "call " + id, Assembler.filename);
                  ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                  stmts.add(new UType("auipc", debug, "x6", new Relocation(Relocation.PCRELHI, id, debug)));
                  stmts.add(new IType("jalr", debug, "x1", "x6", new Relocation(Relocation.PCRELLO, id, debug)));
                  RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PSeudos ::= I_TAIL Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(ileft, iright, "tail " + id, Assembler.filename);
                  ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                  stmts.add(new UType("auipc", debug, "x6", new Relocation(Relocation.PCRELHI, id, debug)));
                  stmts.add(new IType("jalr", debug, "x0", "x6", new Relocation(Relocation.PCRELLO, id, debug)));
                  RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PSeudos ::= I_LB Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("lb %s, %s", rd, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rd, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new IType("lb", debug, rd, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PSeudos ::= I_LH Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("lh %s, %s", rd, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rd, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new IType("lh", debug, rd, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PSeudos ::= I_LW Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("lw %s, %s", rd, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rd, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new IType("lw", debug, rd, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PSeudos ::= F_FLW FRegister Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("flw %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   // hack to re-use IType Statement
                   int num = Globals.fregfile.getRegisterNumber(rd);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new IType("flw", debug, "x" + num, rt, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PSeudos ::= I_SB Register Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("sb %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new SType("sb", debug, rt, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PSeudos ::= I_SH Register Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("sb %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new SType("sh", debug, rt, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PSeudos ::= I_SW Register Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("sb %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new SType("sw", debug, rt, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PSeudos ::= F_FSW FRegister Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("sb %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   // hack to re-use SType Statement
                   int num = Globals.fregfile.getRegisterNumber(rd);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new SType("fsw", debug, rt, "x" + num, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PSeudos ::= I_NEG Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("neg %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new RType("sub", debug, rd, "x0", rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PSeudos ::= I_SNEZ Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("snez %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new RType("sltu", debug, rd, "x0", rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PSeudos ::= I_SLTZ Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("sltz %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new RType("slt", debug, rd, rs, "x0"));
                   RESULT = stmts;

                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PSeudos ::= I_SGTZ Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("sgtz %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new RType("slt", debug, rd, "x0", rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PSeudos ::= F_FMVS FRegister Delimiter FRegister 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("fmv.s %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new FRType("fsgnj.s", debug, rd, rs, rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PSeudos ::= F_FABSS FRegister Delimiter FRegister 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("fabs.s %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new FRType("fsgnjx.s", debug, rd, rs, rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PSeudos ::= F_FNEGS FRegister Delimiter FRegister 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("fneg.s %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new FRType("fsgnjn.s", debug, rd, rs, rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PSeudos ::= I_NOP 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, "nop", Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("addi", debug, "x0", "x0", 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PSeudos ::= I_MV Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("mv %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("addi", debug, rd, rs, 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PSeudos ::= I_NOT Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("not %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("xori", debug, rd, rs, -1));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PSeudos ::= I_SEQZ Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("seqz %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("sltiu", debug, rd, rs, 1));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PSeudos ::= I_JR Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("jr %s", rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("jalr", debug, "x0", rs, 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PSeudos ::= I_JALR Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("jalr %s", rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("jalr", debug, "x1", rs, 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PSeudos ::= I_RET 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, "ret", Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("jalr", debug, "x0", "x1", 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PSeudos ::= I_BEQZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("beqz %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("beq", debug, rs, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PSeudos ::= I_BNEZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("bnez %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bne", debug, rs, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PSeudos ::= I_BLEZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("blez %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bge", debug, "x0", rs, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PSeudos ::= I_BGEZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("bgez %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bge", debug, rs, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PSeudos ::= I_BLTZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("bltz %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("blt", debug, rs, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PSeudos ::= I_BGTZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("bgtz %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("blt", debug, "x0", rs, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PSeudos ::= I_BGT Register Delimiter Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("bgt %s, %s, %s", rs1, rs2, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("blt", debug, rs2, rs1, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PSeudos ::= I_BLE Register Delimiter Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("ble %s, %s, %s", rs1, rs2, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bge", debug, rs2, rs1, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PSeudos ::= I_BGTU Register Delimiter Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("bgtu %s, %s, %s", rs1, rs2, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bltu", debug, rs2, rs1, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PSeudos ::= I_BLEU Register Delimiter Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("bleu %s, %s, %s", rs1, rs2, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bgeu", debug, rs2, rs1, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PSeudos ::= I_JAL Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("jal %s", id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new JType("jal", debug, "x1", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PSeudos ::= I_J Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, iright, String.format("j %s", id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new JType("jal", debug, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Data ::= D_BYTE DataList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    for (int i = 0; i < l.size(); i++) {
                      int value = l.get(i);
                      // lossy conversion ?
                      if (!Data.validByte(value)) {
                        String filename = Assembler.program.getFilename();
                        if (!Settings.EXTRICT)
                          Message.warning(filename + ":assembler:" + modeleft + ":" + moderight + " lossy conversion to byte: '" + value + "' -> " + (byte)(value & Data.BYTE_MASK));
                        else {
                          String list = l.toString();
                          list = list.substring(1, list.length() - 1);
                          Errors.add(info(moderight, modeleft, mode + " " + list, Assembler.filename), "assembler", "lossy conversion to byte: '" + value + "' -> " + (byte)(value & Data.BYTE_MASK));
                        }
                      }
                      // store byte by byte
                      for (int j = 0; j < Data.BYTE_LENGTH; j++) {
                        byte byteVal = (byte)((value >>> (j * Data.BYTE_LENGTH_BITS)) & Data.BYTE_MASK);
                        Assembler.program.addByte(Assembler.segment, byteVal);
                      }
                    }
                  } else {
                    String list = l.toString();
                    list = list.substring(1, list.length() - 1);
                    Errors.add(info(modeleft, moderight, mode + " " + list, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Data ::= D_HALF DataList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    for (int i = 0; i < l.size(); i++) {
                      int value = l.get(i);
                      if (!Data.validHalf(value)) {
                        String filename = Assembler.program.getFilename();
                        if (!Settings.EXTRICT)
                          Message.warning(filename + ":assembler:" + modeleft + ":" + moderight + " lossy conversion to half: '" + value + "' -> " + (short)(value & Data.HALF_MASK));
                        else {
                          String list = l.toString();
                          list = list.substring(1, list.length() - 1);
                          Errors.add(info(modeleft, moderight, mode + " " + list, Assembler.filename), "assembler", "lossy conversion to half: '" + value + "' -> " + (short)(value & Data.HALF_MASK));
                        }
                      }
                      // store byte by byte
                      for (int j = 0; j < Data.HALF_LENGTH; j++) {
                        byte byteVal = (byte)((value >>> (j * Data.BYTE_LENGTH_BITS)) & Data.BYTE_MASK);
                        Assembler.program.addByte(Assembler.segment, byteVal);
                      }
                    }
                  } else {
                    String list = l.toString();
                    list = list.substring(1, list.length() - 1);
                    Errors.add(info(modeleft, moderight, mode + " " + list, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Data ::= D_WORD DataList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    for (int i = 0; i < l.size(); i++) {
                      int value = l.get(i);
                      // store byte by byte
                      for (int j = 0; j < Data.WORD_LENGTH; j++) {
                        byte byteVal = (byte)((value >>> (j * Data.BYTE_LENGTH_BITS)) & Data.BYTE_MASK);
                        Assembler.program.addByte(Assembler.segment, byteVal);
                      }
                    }
                  } else {
                    String list = l.toString();
                    list = list.substring(1, list.length() - 1);
                    Errors.add(info(modeleft, moderight, mode + " " + list, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Data ::= D_WORD IdList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    for (String id: l)
                      Assembler.program.addRef(Assembler.segment, new Relocation(Relocation.DEFAULT, id, info(modeleft, moderight, ".word " + l, Assembler.filename)));
                  } else {
                    String list = l.toString();
                    list = list.substring(1, list.length() - 1);
                    Errors.add(info(modeleft, moderight, mode + " " + list, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Data ::= D_ASCIIZ Str 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    // scan char by char
                    for (int i = 0; i < s.length(); i++)
                      Assembler.program.addByte(Assembler.segment, (byte) s.charAt(i));
                    // null terminate string
                    Assembler.program.addByte(Assembler.segment, (byte) 0);
                  } else
                    Errors.add(info(modeleft, moderight, mode + " " + s, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Data ::= D_ASCII Str 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    // scan char by char
                    for (int i = 0; i < s.length(); i++)
                      Assembler.program.addByte(Assembler.segment, (byte) s.charAt(i));
                  } else
                    Errors.add(info(modeleft, moderight, mode + " " + s, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Data ::= D_ZERO Number 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (e > 0) {
                    if (!(Assembler.segment == Segment.TEXT || Assembler.segment == Segment.RODATA))
                      for (int i = 0; i < e; i++)
                        Assembler.program.addByte(Assembler.segment, (byte) 0);
                    else
                      Errors.add(info(modeleft, moderight, ".zero " + e, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                  } else
                    Errors.add(info(eleft, eright, ".zero " + e, Assembler.filename), "assembler", "invalid " + mode + " argument: '" + e + "', expected value > 0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Data ::= D_FLOAT FloatList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Float> l = (ArrayList<Float>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    for (int i = 0; i < l.size(); i++) {
                      int value = Float.floatToIntBits(l.get(i));
                      // store byte by byte
                      for (int j = 0; j < Data.WORD_LENGTH; j++) {
                        byte byteVal = (byte)((value >>> (j * Data.BYTE_LENGTH_BITS)) & Data.BYTE_MASK);
                        Assembler.program.addByte(Assembler.segment, byteVal);
                      }
                    }
                  } else {
                    String list = l.toString();
                    list = list.substring(1, list.length() - 1);
                    Errors.add(info(modeleft, moderight, ".float " + list, Assembler.filename), "assembler", ".float directive can not appear in " + Assembler.segment + " segment");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DataList ::= Const 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<Integer> l = new ArrayList<Integer>();
                  l.add(c);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DataList ::= DataList COMMA Const 
            {
              ArrayList<Integer> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(c);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IdList ::= Id 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<String> l = new ArrayList<String>();
                  l.add(id);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IdList ::= IdList COMMA Id 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(id);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FloatList ::= Float 
            {
              ArrayList<Float> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<Float> l = new ArrayList<Float>();
                  l.add(f);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FloatList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FloatList ::= FloatList COMMA Float 
            {
              ArrayList<Float> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Float> l = (ArrayList<Float>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(f);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FloatList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Directive ::= SectionDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Directive ::= SymbolDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Directive ::= AlignDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Directive ::= DOT Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Errors.add(info(ileft, iright, "." + id, Assembler.filename), "assembler", "invalid directive: '." + id + "'"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SectionDir ::= D_SECTION Section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionDir",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SectionDir ::= Section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionDir",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Section ::= D_TEXT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.segment = Segment.TEXT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Section ::= D_DATA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.segment = Segment.DATA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Section ::= D_RODATA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.segment = Segment.RODATA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Section ::= D_BSS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.segment = Segment.BSS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SymbolDir ::= D_GLOBL SymList 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  String list = l.toString();
                  list = list.substring(1, list.length() - 1);
                  DebugInfo debug = info(dleft, dright, ".globl " + list, Assembler.filename);
                  for (String id: l) {
                    if(!Assembler.program.addGlobal(id, debug))
                      Errors.add(debug, "assembler", "label '" + id + "' is already defined as global");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymbolDir",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SymList ::= Id 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<String> ids = new ArrayList<String>();
                  ids.add(id);
                  RESULT = ids;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SymList ::= SymList COMMA Id 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(id);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // AlignDir ::= D_ALIGN Number 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!(Assembler.segment == Segment.TEXT)) {
                    if (Data.inRange(e, 0, 2))
                      Assembler.program.align(e);
                    else
                      Errors.add(info(eleft, eright, ".align " + e, Assembler.filename), "assembler", "invalid align value: '" + e + "', expected 0 (byte), 1 (half) or 2 (word)");
                  } else
                    Errors.add(info(dleft, dright, ".align " + e, Assembler.filename), "assembler", ".align directive currently can not appear in text segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AlignDir",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // AlignDir ::= D_BALIGN Number 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!(Assembler.segment == Segment.TEXT)) {
                    if (e > 0)
                      Assembler.program.balign(e);
                    else
                      Errors.add(info(eleft, eright, ".balign " + e, Assembler.filename), "assembler", "invalid align value: '" + e + "', expected value > 0");
                  } else
                    Errors.add(info(dleft, dright, ".balign " + e, Assembler.filename), "assembler", ".balign directive can not appear in text segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AlignDir",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Const ::= Number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Const ::= Character 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Id ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Number ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Number ::= Hexnum 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Number ::= Binary 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Hexnum ::= HEXNUM 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Hexnum",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Binary ::= BINARY 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binary",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Float ::= FLOAT 
            {
              Float RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (float)f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Float",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Float ::= Hexnum 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Float.intBitsToFloat(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Float",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Float ::= Binary 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Float.intBitsToFloat(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Float",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Float ::= NUMBER 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((Integer) n).floatValue(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Float",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Character ::= CHARACTER 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)((char) c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Character",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Str ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Str",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Register ::= REGISTER 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)reg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Register",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FRegister ::= FREGISTER 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)reg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FRegister",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Delimiter ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Delimiter",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Delimiter ::= Epsilon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Delimiter",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Epsilon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Epsilon",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
