
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package vsim.assembler;

import vsim.Errors;
import vsim.Globals;
import java.io.File;
import vsim.Settings;
import vsim.utils.Data;
import java.io.FileReader;
import vsim.utils.Message;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.IOException;
import vsim.linker.Relocation;
import vsim.assembler.statements.*;
import java.io.FileNotFoundException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\321\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\005" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\021\003\000\002\014\012\000\002" +
    "\014\012\000\002\014\012\000\002\014\012\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\006\006\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\006\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\007\011\000\002" +
    "\007\011\000\002\007\011\000\002\007\011\000\002\007" +
    "\011\000\002\007\003\000\002\007\003\000\002\007\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\010\011\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\012\006\000\002\012\006\000\002\013\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\004\000" +
    "\002\022\004\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\022\010\000\002\022\010\000\002\022" +
    "\010\000\002\022\010\000\002\022\010\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\022\006\000\002" +
    "\022\003\000\002\022\006\000\002\022\006\000\002\022" +
    "\006\000\002\022\004\000\002\022\004\000\002\022\003" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\022\006\000\002" +
    "\022\010\000\002\022\010\000\002\022\010\000\002\022" +
    "\010\000\002\022\004\000\002\022\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\023\003\000\002\023" +
    "\005\000\002\026\003\000\002\026\005\000\002\024\003" +
    "\000\002\024\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\004\000\002\030\004\000\002" +
    "\030\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\031\004\000\002\025\003" +
    "\000\002\025\005\000\002\032\004\000\002\032\004\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\004\000" +
    "\002\044\004\000\002\044\004\000\002\044\003\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\005\000\002\047\004" +
    "\000\002\047\004\000\002\047\003\000\002\045\003\000" +
    "\002\045\003\000\002\033\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\041\003\000\002\042" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\043\003\000\002\034\003\000" +
    "\002\035\003\000\002\036\003\000\002\050\003\000\002" +
    "\050\003\000\002\051\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02af\000\360\004\141\010\161\011\023\030\072\031" +
    "\146\032\131\033\073\034\213\035\217\036\017\037\030" +
    "\040\150\041\124\042\133\043\036\044\105\045\077\046" +
    "\121\047\110\050\215\051\164\052\176\053\154\054\145" +
    "\055\202\056\010\057\022\060\050\061\117\062\152\063" +
    "\052\064\113\065\045\066\114\067\143\070\103\071\210" +
    "\072\172\073\051\074\165\075\101\076\042\077\120\100" +
    "\204\101\212\102\137\103\070\104\170\105\135\106\062" +
    "\107\044\110\056\111\055\112\033\113\134\114\127\115" +
    "\057\116\054\117\026\120\076\121\136\122\106\123\075" +
    "\124\024\125\020\126\220\127\040\130\011\131\167\132" +
    "\074\133\201\134\162\135\142\136\037\137\035\140\116" +
    "\141\064\142\012\143\053\144\216\145\005\146\160\147" +
    "\174\150\126\151\031\152\071\153\104\154\015\155\027" +
    "\156\067\157\151\160\175\161\156\162\214\163\200\164" +
    "\034\165\203\166\125\167\130\170\112\171\100\172\025" +
    "\173\173\174\007\206\111\207\066\210\061\211\163\212" +
    "\207\213\205\214\046\215\021\216\132\217\122\220\155" +
    "\221\047\222\140\223\157\224\004\001\002\000\020\006" +
    "\u02a0\015\u029d\016\u0298\175\u029b\176\227\177\234\200\u02a1" +
    "\001\002\000\004\203\221\001\002\000\362\002\001\004" +
    "\141\010\161\011\023\030\072\031\146\032\131\033\073" +
    "\034\213\035\217\036\017\037\030\040\150\041\124\042" +
    "\133\043\036\044\105\045\077\046\121\047\110\050\215" +
    "\051\164\052\176\053\154\054\145\055\202\056\010\057" +
    "\022\060\050\061\117\062\152\063\052\064\113\065\045" +
    "\066\114\067\143\070\103\071\210\072\172\073\051\074" +
    "\165\075\101\076\042\077\120\100\204\101\212\102\137" +
    "\103\070\104\170\105\135\106\062\107\044\110\056\111" +
    "\055\112\033\113\134\114\127\115\057\116\054\117\026" +
    "\120\076\121\136\122\106\123\075\124\024\125\020\126" +
    "\220\127\040\130\011\131\167\132\074\133\201\134\162" +
    "\135\142\136\037\137\035\140\116\141\064\142\012\143" +
    "\053\144\216\145\005\146\160\147\174\150\126\151\031" +
    "\152\071\153\104\154\015\155\027\156\067\157\151\160" +
    "\175\161\156\162\214\163\200\164\034\165\203\166\125" +
    "\167\130\170\112\171\100\172\025\173\173\174\007\206" +
    "\111\207\066\210\061\211\163\212\207\213\205\214\046" +
    "\215\021\216\132\217\122\220\155\221\047\222\140\223" +
    "\157\224\004\001\002\000\004\204\275\001\002\000\004" +
    "\203\221\001\002\000\004\203\221\001\002\000\006\002" +
    "\uff8d\011\uff8d\001\002\000\022\006\u01d8\015\u01d6\016\u01d3" +
    "\025\u01d7\175\231\176\227\177\234\202\u0137\001\002\000" +
    "\006\002\uffef\011\uffef\001\002\000\004\203\221\001\002" +
    "\000\006\002\ufffe\011\u0281\001\002\000\004\203\221\001" +
    "\002\000\004\203\221\001\002\000\006\002\uff65\011\uff65" +
    "\001\002\000\004\203\221\001\002\000\362\002\ufffc\004" +
    "\ufffc\010\ufffc\011\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074" +
    "\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc" +
    "\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111" +
    "\ufffc\112\ufffc\113\ufffc\114\ufffc\115\ufffc\116\ufffc\117\ufffc" +
    "\120\ufffc\121\ufffc\122\ufffc\123\ufffc\124\ufffc\125\ufffc\126" +
    "\ufffc\127\ufffc\130\ufffc\131\ufffc\132\ufffc\133\ufffc\134\ufffc" +
    "\135\ufffc\136\ufffc\137\ufffc\140\ufffc\141\ufffc\142\ufffc\143" +
    "\ufffc\144\ufffc\145\ufffc\146\ufffc\147\ufffc\150\ufffc\151\ufffc" +
    "\152\ufffc\153\ufffc\154\ufffc\155\ufffc\156\ufffc\157\ufffc\160" +
    "\ufffc\161\ufffc\162\ufffc\163\ufffc\164\ufffc\165\ufffc\166\ufffc" +
    "\167\ufffc\170\ufffc\171\ufffc\172\ufffc\173\ufffc\174\ufffc\206" +
    "\ufffc\207\ufffc\210\ufffc\211\ufffc\212\ufffc\213\ufffc\214\ufffc" +
    "\215\ufffc\216\ufffc\217\ufffc\220\ufffc\221\ufffc\222\ufffc\223" +
    "\ufffc\224\ufffc\001\002\000\004\203\221\001\002\000\004" +
    "\204\275\001\002\000\004\203\221\001\002\000\004\203" +
    "\221\001\002\000\004\203\221\001\002\000\004\203\221" +
    "\001\002\000\006\002\ufff7\011\ufff7\001\002\000\004\203" +
    "\221\001\002\000\004\203\221\001\002\000\004\203\221" +
    "\001\002\000\004\203\221\001\002\000\004\203\221\001" +
    "\002\000\004\204\275\001\002\000\006\002\uff69\011\uff69" +
    "\001\002\000\004\203\221\001\002\000\336\002\ufff8\011" +
    "\ufff8\030\072\031\146\032\131\033\073\034\213\035\217" +
    "\036\017\037\030\040\150\041\124\042\133\043\036\044" +
    "\105\045\077\046\121\047\110\050\215\051\164\052\176" +
    "\053\154\054\145\055\202\056\010\057\022\060\050\061" +
    "\117\062\152\063\052\064\113\065\045\066\114\067\143" +
    "\070\103\071\210\072\172\073\051\074\165\075\101\076" +
    "\042\077\120\100\204\101\212\102\137\103\070\104\170" +
    "\105\135\106\062\107\044\110\056\111\055\112\033\113" +
    "\134\114\127\115\057\116\054\117\026\120\076\121\136" +
    "\122\106\123\075\124\024\125\020\126\220\127\040\130" +
    "\011\131\167\132\074\133\201\134\162\135\142\136\037" +
    "\137\035\140\116\141\064\142\012\143\053\144\216\145" +
    "\005\146\160\147\174\150\126\151\031\152\071\153\104" +
    "\154\015\155\027\156\067\157\151\160\175\161\156\162" +
    "\214\163\200\164\034\165\203\166\125\167\130\170\112" +
    "\171\100\172\025\173\173\174\007\206\111\207\066\210" +
    "\061\211\163\212\207\213\205\224\004\001\002\000\004" +
    "\203\221\001\002\000\004\204\275\001\002\000\012\215" +
    "\021\216\132\217\122\220\155\001\002\000\010\175\231" +
    "\176\227\177\234\001\002\000\004\204\275\001\002\000" +
    "\004\204\275\001\002\000\004\204\275\001\002\000\004" +
    "\203\221\001\002\000\004\203\221\001\002\000\004\203" +
    "\221\001\002\000\004\203\221\001\002\000\004\203\221" +
    "\001\002\000\006\002\ufff1\011\ufff1\001\002\000\022\006" +
    "\u01d8\015\u01d6\016\u01d3\025\u01d7\175\231\176\227\177\234" +
    "\202\u0137\001\002\000\004\203\221\001\002\000\006\002" +
    "\uffee\011\uffee\001\002\000\004\203\221\001\002\000\006" +
    "\002\uff6b\011\uff6b\001\002\000\004\201\u017f\001\002\000" +
    "\004\203\221\001\002\000\004\203\221\001\002\000\004" +
    "\203\221\001\002\000\004\203\221\001\002\000\004\203" +
    "\221\001\002\000\004\203\221\001\002\000\004\204\275" +
    "\001\002\000\004\203\221\001\002\000\004\203\221\001" +
    "\002\000\004\205\233\001\002\000\004\204\275\001\002" +
    "\000\006\002\uff6a\011\uff6a\001\002\000\004\204\275\001" +
    "\002\000\004\203\221\001\002\000\004\203\221\001\002" +
    "\000\006\002\uffaf\011\uffaf\001\002\000\006\002\ufff5\011" +
    "\ufff5\001\002\000\004\203\221\001\002\000\004\201\u017f" +
    "\001\002\000\004\205\233\001\002\000\004\204\275\001" +
    "\002\000\004\204\275\001\002\000\006\002\uff66\011\uff66" +
    "\001\002\000\006\203\221\205\233\001\002\000\004\204" +
    "\275\001\002\000\004\203\221\001\002\000\004\203\221" +
    "\001\002\000\006\002\uff63\011\uff63\001\002\000\006\002" +
    "\ufff2\011\ufff2\001\002\000\004\203\221\001\002\000\004" +
    "\203\221\001\002\000\004\203\221\001\002\000\004\203" +
    "\221\001\002\000\006\002\uff87\011\uff87\001\002\000\004" +
    "\203\221\001\002\000\006\002\uff64\011\uff64\001\002\000" +
    "\004\203\221\001\002\000\004\203\221\001\002\000\004" +
    "\203\221\001\002\000\004\203\221\001\002\000\004\203" +
    "\221\001\002\000\010\175\231\176\227\177\234\001\002" +
    "\000\004\205\233\001\002\000\004\203\221\001\002\000" +
    "\004\204\275\001\002\000\006\002\uffeb\011\uffeb\001\002" +
    "\000\004\204\275\001\002\000\004\203\221\001\002\000" +
    "\006\002\uffed\011\uffed\001\002\000\004\203\221\001\002" +
    "\000\004\203\221\001\002\000\004\204\275\001\002\000" +
    "\006\002\ufff4\011\ufff4\001\002\000\004\203\221\001\002" +
    "\000\006\002\uff62\011\uff62\001\002\000\004\203\221\001" +
    "\002\000\004\205\233\001\002\000\004\203\221\001\002" +
    "\000\336\002\ufff3\011\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102" +
    "\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3" +
    "\111\ufff3\112\ufff3\113\ufff3\114\ufff3\115\ufff3\116\ufff3\117" +
    "\ufff3\120\ufff3\121\ufff3\122\ufff3\123\ufff3\124\ufff3\125\ufff3" +
    "\126\ufff3\127\ufff3\130\ufff3\131\ufff3\132\ufff3\133\ufff3\134" +
    "\ufff3\135\ufff3\136\ufff3\137\ufff3\140\ufff3\141\ufff3\142\ufff3" +
    "\143\ufff3\144\ufff3\145\ufff3\146\ufff3\147\ufff3\150\ufff3\151" +
    "\ufff3\152\ufff3\153\ufff3\154\ufff3\155\ufff3\156\ufff3\157\ufff3" +
    "\160\ufff3\161\ufff3\162\ufff3\163\ufff3\164\ufff3\165\ufff3\166" +
    "\ufff3\167\ufff3\170\ufff3\171\ufff3\172\ufff3\173\ufff3\174\ufff3" +
    "\206\ufff3\207\ufff3\210\ufff3\211\ufff3\212\ufff3\213\ufff3\224" +
    "\ufff3\001\002\000\004\203\221\001\002\000\022\006\uff74" +
    "\015\uff74\016\uff74\025\uff74\175\uff74\176\uff74\177\uff74\202" +
    "\uff74\001\002\000\004\203\221\001\002\000\004\204\275" +
    "\001\002\000\006\002\uffec\011\uffec\001\002\000\004\203" +
    "\221\001\002\000\006\002\uffb0\011\uffb0\001\002\000\004" +
    "\002\353\001\002\000\004\204\275\001\002\000\004\204" +
    "\275\001\002\000\004\203\221\001\002\000\004\203\221" +
    "\001\002\000\004\204\275\001\002\000\006\002\ufff6\011" +
    "\ufff6\001\002\000\004\203\221\001\002\000\004\203\221" +
    "\001\002\000\004\204\275\001\002\000\004\205\233\001" +
    "\002\000\004\203\221\001\002\000\024\006\uff72\015\uff72" +
    "\016\uff72\025\uff72\175\uff72\176\uff72\177\uff72\202\uff72\205" +
    "\233\001\002\000\006\002\uffea\011\uffea\001\002\000\022" +
    "\006\uff73\015\uff73\016\uff73\025\uff73\175\uff73\176\uff73\177" +
    "\uff73\202\uff73\001\002\000\004\204\275\001\002\000\006" +
    "\002\ufff0\011\ufff0\001\002\000\004\203\221\001\002\000" +
    "\004\203\221\001\002\000\004\203\221\001\002\000\004" +
    "\203\221\001\002\000\004\203\221\001\002\000\004\203" +
    "\221\001\002\000\004\203\221\001\002\000\030\002\uff35" +
    "\005\uff35\007\uff35\011\uff35\175\uff35\176\uff35\177\uff35\202" +
    "\uff35\203\uff35\204\uff35\205\uff35\001\002\000\014\005\223" +
    "\175\uff31\176\uff31\177\uff31\205\uff31\001\002\000\020\175" +
    "\uff33\176\uff33\177\uff33\202\uff33\203\uff33\204\uff33\205\uff33" +
    "\001\002\000\012\175\231\176\227\177\234\205\233\001" +
    "\002\000\020\175\uff32\176\uff32\177\uff32\202\uff32\203\uff32" +
    "\204\uff32\205\uff32\001\002\000\006\005\223\203\uff31\001" +
    "\002\000\042\002\uff3d\005\uff3d\006\uff3d\007\uff3d\011\uff3d" +
    "\012\uff3d\013\uff3d\014\uff3d\015\uff3d\016\uff3d\017\uff3d\020" +
    "\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d\001\002\000\042" +
    "\002\uff3f\005\uff3f\006\uff3f\007\uff3f\011\uff3f\012\uff3f\013" +
    "\uff3f\014\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f\021\uff3f" +
    "\022\uff3f\023\uff3f\024\uff3f\001\002\000\042\002\uff40\005" +
    "\uff40\006\uff40\007\uff40\011\uff40\012\uff40\013\uff40\014\uff40" +
    "\015\uff40\016\uff40\017\uff40\020\uff40\021\uff40\022\uff40\023" +
    "\uff40\024\uff40\001\002\000\004\006\236\001\002\000\012" +
    "\002\uff41\005\uff41\011\uff41\203\uff41\001\002\000\042\002" +
    "\uff3c\005\uff3c\006\uff3c\007\uff3c\011\uff3c\012\uff3c\013\uff3c" +
    "\014\uff3c\015\uff3c\016\uff3c\017\uff3c\020\uff3c\021\uff3c\022" +
    "\uff3c\023\uff3c\024\uff3c\001\002\000\042\002\uff3e\005\uff3e" +
    "\006\uff3e\007\uff3e\011\uff3e\012\uff3e\013\uff3e\014\uff3e\015" +
    "\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e\022\uff3e\023\uff3e" +
    "\024\uff3e\001\002\000\004\203\221\001\002\000\004\007" +
    "\240\001\002\000\006\002\uffab\011\uffab\001\002\000\004" +
    "\203\221\001\002\000\006\002\uff96\011\uff96\001\002\000" +
    "\006\005\223\203\uff31\001\002\000\004\203\221\001\002" +
    "\000\006\005\223\203\uff31\001\002\000\004\203\221\001" +
    "\002\000\006\002\uffd8\011\uffd8\001\002\000\006\005\223" +
    "\203\uff31\001\002\000\004\203\221\001\002\000\006\002" +
    "\uff8c\011\uff8c\001\002\000\006\005\223\203\uff31\001\002" +
    "\000\004\203\221\001\002\000\006\005\223\203\uff31\001" +
    "\002\000\004\203\221\001\002\000\006\002\uffe1\011\uffe1" +
    "\001\002\000\006\005\223\203\uff31\001\002\000\004\203" +
    "\221\001\002\000\006\005\223\205\uff31\001\002\000\004" +
    "\205\233\001\002\000\006\002\uff7f\011\uff7f\001\002\000" +
    "\006\005\223\203\uff31\001\002\000\004\203\221\001\002" +
    "\000\006\005\223\203\uff31\001\002\000\004\203\221\001" +
    "\002\000\006\002\uffd9\011\uffd9\001\002\000\006\005\223" +
    "\204\uff31\001\002\000\004\204\275\001\002\000\006\002" +
    "\uffc0\011\uffc0\001\002\000\024\002\uff34\005\uff34\011\uff34" +
    "\175\uff34\176\uff34\177\uff34\203\uff34\204\uff34\205\uff34\001" +
    "\002\000\006\005\223\204\uff31\001\002\000\004\204\275" +
    "\001\002\000\006\005\223\204\uff31\001\002\000\004\204" +
    "\275\001\002\000\006\002\uffce\011\uffce\001\002\000\010" +
    "\002\uff6f\005\uff6f\011\uff6f\001\002\000\010\002\uff79\005" +
    "\305\011\uff79\001\002\000\004\205\233\001\002\000\010" +
    "\002\uff6e\005\uff6e\011\uff6e\001\002\000\006\005\223\204" +
    "\uff31\001\002\000\004\204\275\001\002\000\006\005\223" +
    "\204\uff31\001\002\000\004\204\275\001\002\000\006\002" +
    "\uffc1\011\uffc1\001\002\000\006\002\uff7b\011\uff7b\001\002" +
    "\000\006\005\223\203\uff31\001\002\000\004\203\221\001" +
    "\002\000\006\002\uffc6\011\uffc6\001\002\000\006\005\223" +
    "\203\uff31\001\002\000\004\203\221\001\002\000\006\005" +
    "\223\205\uff31\001\002\000\004\205\233\001\002\000\006" +
    "\002\uffa7\011\uffa7\001\002\000\006\005\223\203\uff31\001" +
    "\002\000\004\203\221\001\002\000\006\005\223\205\uff31" +
    "\001\002\000\004\205\233\001\002\000\006\002\uff7e\011" +
    "\uff7e\001\002\000\006\005\223\203\uff31\001\002\000\004" +
    "\203\221\001\002\000\006\002\uffc8\011\uffc8\001\002\000" +
    "\006\005\223\205\uff31\001\002\000\004\205\233\001\002" +
    "\000\006\002\uff81\011\uff81\001\002\000\006\005\223\203" +
    "\uff31\001\002\000\004\203\221\001\002\000\006\002\uff8a" +
    "\011\uff8a\001\002\000\006\005\223\204\uff31\001\002\000" +
    "\004\204\275\001\002\000\006\002\uff8f\011\uff8f\001\002" +
    "\000\006\005\223\204\uff31\001\002\000\004\204\275\001" +
    "\002\000\006\005\223\204\uff31\001\002\000\004\204\275" +
    "\001\002\000\006\002\uffcd\011\uffcd\001\002\000\004\002" +
    "\000\001\002\000\006\005\223\203\uff31\001\002\000\004" +
    "\203\221\001\002\000\006\005\223\205\uff31\001\002\000" +
    "\004\205\233\001\002\000\006\002\uffa6\011\uffa6\001\002" +
    "\000\006\005\223\204\uff31\001\002\000\004\204\275\001" +
    "\002\000\006\005\223\204\uff31\001\002\000\004\204\275" +
    "\001\002\000\006\002\uffcb\011\uffcb\001\002\000\006\005" +
    "\223\203\uff31\001\002\000\004\203\221\001\002\000\006" +
    "\005\223\203\uff31\001\002\000\004\203\221\001\002\000" +
    "\006\002\uffe0\011\uffe0\001\002\000\006\005\223\203\uff31" +
    "\001\002\000\004\203\221\001\002\000\006\005\223\205" +
    "\uff31\001\002\000\004\205\233\001\002\000\006\002\uffa5" +
    "\011\uffa5\001\002\000\006\005\223\203\uff31\001\002\000" +
    "\004\203\221\001\002\000\006\002\uff94\011\uff94\001\002" +
    "\000\010\002\uff60\005\uff60\011\uff60\001\002\000\010\002" +
    "\uff61\005\u0105\011\uff61\001\002\000\004\205\233\001\002" +
    "\000\010\002\uff5f\005\uff5f\011\uff5f\001\002\000\006\005" +
    "\223\203\uff31\001\002\000\004\203\221\001\002\000\006" +
    "\005\223\205\uff31\001\002\000\004\205\233\001\002\000" +
    "\006\002\uff80\011\uff80\001\002\000\006\005\223\204\uff31" +
    "\001\002\000\004\204\275\001\002\000\006\002\uffc9\011" +
    "\uffc9\001\002\000\006\005\223\204\uff31\001\002\000\004" +
    "\204\275\001\002\000\006\005\223\204\uff31\001\002\000" +
    "\004\204\275\001\002\000\006\002\uffd1\011\uffd1\001\002" +
    "\000\006\005\223\205\uff31\001\002\000\004\205\233\001" +
    "\002\000\006\002\uff82\011\uff82\001\002\000\006\005\223" +
    "\203\uff31\001\002\000\004\203\221\001\002\000\006\005" +
    "\223\203\uff31\001\002\000\004\203\221\001\002\000\006" +
    "\002\uffdf\011\uffdf\001\002\000\006\005\223\203\uff31\001" +
    "\002\000\004\203\221\001\002\000\006\005\223\203\uff31" +
    "\001\002\000\004\203\221\001\002\000\006\002\uffde\011" +
    "\uffde\001\002\000\006\005\223\203\uff31\001\002\000\004" +
    "\203\221\001\002\000\006\002\uffc7\011\uffc7\001\002\000" +
    "\006\005\223\204\uff31\001\002\000\004\204\275\001\002" +
    "\000\006\005\223\204\uff31\001\002\000\004\204\275\001" +
    "\002\000\006\005\223\204\uff31\001\002\000\004\204\275" +
    "\001\002\000\006\002\uffe6\011\uffe6\001\002\000\006\005" +
    "\223\203\uff31\001\002\000\004\203\221\001\002\000\006" +
    "\005\223\205\uff31\001\002\000\004\205\233\001\002\000" +
    "\006\002\uffa8\011\uffa8\001\002\000\006\002\uff68\011\uff68" +
    "\001\002\000\006\002\uff5d\011\uff5d\001\002\000\006\005" +
    "\223\203\uff31\001\002\000\004\203\221\001\002\000\014" +
    "\005\223\175\uff31\176\uff31\177\uff31\202\uff31\001\002\000" +
    "\012\175\231\176\227\177\234\202\u0137\001\002\000\006" +
    "\002\uffbf\011\uffbf\001\002\000\040\002\uff37\005\uff37\007" +
    "\uff37\011\uff37\012\uff37\013\uff37\014\uff37\015\uff37\016\uff37" +
    "\017\uff37\020\uff37\021\uff37\022\uff37\023\uff37\024\uff37\001" +
    "\002\000\040\002\uff43\005\uff43\007\uff43\011\uff43\012\uff43" +
    "\013\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020\uff43\021" +
    "\uff43\022\uff43\023\uff43\024\uff43\001\002\000\040\002\uff42" +
    "\005\uff42\007\uff42\011\uff42\012\uff42\013\uff42\014\uff42\015" +
    "\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022\uff42\023\uff42" +
    "\024\uff42\001\002\000\006\005\223\203\uff31\001\002\000" +
    "\004\203\221\001\002\000\014\005\223\175\uff31\176\uff31" +
    "\177\uff31\202\uff31\001\002\000\012\175\231\176\227\177" +
    "\234\202\u0137\001\002\000\006\002\uffbe\011\uffbe\001\002" +
    "\000\012\002\uff88\005\223\011\uff88\203\uff31\001\002\000" +
    "\004\203\221\001\002\000\014\005\223\175\uff31\176\uff31" +
    "\177\uff31\202\uff31\001\002\000\012\175\231\176\227\177" +
    "\234\202\u0137\001\002\000\006\002\uffb6\011\uffb6\001\002" +
    "\000\006\005\223\203\uff31\001\002\000\004\203\221\001" +
    "\002\000\014\005\223\175\uff31\176\uff31\177\uff31\202\uff31" +
    "\001\002\000\012\175\231\176\227\177\234\202\u0137\001" +
    "\002\000\006\002\uffbd\011\uffbd\001\002\000\006\005\223" +
    "\203\uff31\001\002\000\004\203\221\001\002\000\006\005" +
    "\223\203\uff31\001\002\000\004\203\221\001\002\000\006" +
    "\002\uffd5\011\uffd5\001\002\000\006\005\223\203\uff31\001" +
    "\002\000\004\203\221\001\002\000\006\005\223\203\uff31" +
    "\001\002\000\004\203\221\001\002\000\006\002\uffd6\011" +
    "\uffd6\001\002\000\006\005\223\203\uff31\001\002\000\004" +
    "\203\221\001\002\000\014\005\223\175\uff31\176\uff31\177" +
    "\uff31\202\uff31\001\002\000\012\175\231\176\227\177\234" +
    "\202\u0137\001\002\000\006\002\uffb9\011\uffb9\001\002\000" +
    "\006\005\223\203\uff31\001\002\000\004\203\221\001\002" +
    "\000\006\002\uff93\011\uff93\001\002\000\006\002\uff89\011" +
    "\uff89\001\002\000\006\005\223\203\uff31\001\002\000\004" +
    "\203\221\001\002\000\006\005\223\203\uff31\001\002\000" +
    "\004\203\221\001\002\000\006\002\uffd4\011\uffd4\001\002" +
    "\000\006\005\223\203\uff31\001\002\000\004\203\221\001" +
    "\002\000\006\005\223\203\uff31\001\002\000\004\203\221" +
    "\001\002\000\006\002\uffe3\011\uffe3\001\002\000\006\005" +
    "\223\204\uff31\001\002\000\004\204\275\001\002\000\006" +
    "\005\223\204\uff31\001\002\000\004\204\275\001\002\000" +
    "\006\002\uffc2\011\uffc2\001\002\000\006\005\223\204\uff31" +
    "\001\002\000\004\204\275\001\002\000\006\005\223\204" +
    "\uff31\001\002\000\004\204\275\001\002\000\006\002\uffd2" +
    "\011\uffd2\001\002\000\006\002\uff7c\011\uff7c\001\002\000" +
    "\006\005\223\205\uff31\001\002\000\004\205\233\001\002" +
    "\000\006\002\uffa1\011\uffa1\001\002\000\006\005\223\204" +
    "\uff31\001\002\000\004\204\275\001\002\000\006\005\223" +
    "\204\uff31\001\002\000\004\204\275\001\002\000\006\005" +
    "\223\204\uff31\001\002\000\004\204\275\001\002\000\006" +
    "\002\uffe8\011\uffe8\001\002\000\006\005\223\204\uff31\001" +
    "\002\000\004\204\275\001\002\000\006\002\uffcf\011\uffcf" +
    "\001\002\000\006\002\uff9e\011\uff9e\001\002\000\006\002" +
    "\uff36\011\uff36\001\002\000\006\002\uff78\011\uff78\001\002" +
    "\000\006\005\223\203\uff31\001\002\000\004\203\221\001" +
    "\002\000\006\005\223\203\uff31\001\002\000\004\203\221" +
    "\001\002\000\006\002\uffe4\011\uffe4\001\002\000\006\005" +
    "\223\203\uff31\001\002\000\004\203\221\001\002\000\006" +
    "\005\223\203\uff31\001\002\000\004\203\221\001\002\000" +
    "\006\002\uffe5\011\uffe5\001\002\000\006\005\223\205\uff31" +
    "\001\002\000\004\205\233\001\002\000\006\002\uff86\011" +
    "\uff86\001\002\000\006\005\223\204\uff31\001\002\000\004" +
    "\204\275\001\002\000\006\005\223\204\uff31\001\002\000" +
    "\004\204\275\001\002\000\006\005\223\204\uff31\001\002" +
    "\000\004\204\275\001\002\000\006\002\uffe7\011\uffe7\001" +
    "\002\000\006\005\223\204\uff31\001\002\000\004\204\275" +
    "\001\002\000\006\005\223\204\uff31\001\002\000\004\204" +
    "\275\001\002\000\006\002\uffca\011\uffca\001\002\000\006" +
    "\002\uff9d\011\uff9d\001\002\000\006\005\223\203\uff31\001" +
    "\002\000\004\203\221\001\002\000\006\005\223\203\uff31" +
    "\001\002\000\004\203\221\001\002\000\006\002\uffdd\011" +
    "\uffdd\001\002\000\006\005\223\203\uff31\001\002\000\004" +
    "\203\221\001\002\000\014\005\223\175\uff31\176\uff31\177" +
    "\uff31\202\uff31\001\002\000\012\175\231\176\227\177\234" +
    "\202\u0137\001\002\000\006\002\uffb8\011\uffb8\001\002\000" +
    "\014\005\223\175\uff31\176\uff31\177\uff31\205\uff31\001\002" +
    "\000\012\175\231\176\227\177\234\205\233\001\002\000" +
    "\006\005\223\203\uff31\001\002\000\004\006\u01a9\001\002" +
    "\000\004\203\221\001\002\000\004\007\u01ab\001\002\000" +
    "\006\002\uffae\011\uffae\001\002\000\004\203\221\001\002" +
    "\000\006\002\uff99\011\uff99\001\002\000\006\005\223\203" +
    "\uff31\001\002\000\004\203\221\001\002\000\006\005\223" +
    "\205\uff31\001\002\000\004\205\233\001\002\000\006\002" +
    "\uffa4\011\uffa4\001\002\000\006\005\223\203\uff31\001\002" +
    "\000\004\203\221\001\002\000\006\005\223\203\uff31\001" +
    "\002\000\004\203\221\001\002\000\006\002\uffd7\011\uffd7" +
    "\001\002\000\006\005\223\203\uff31\001\002\000\004\203" +
    "\221\001\002\000\006\005\223\203\uff31\001\002\000\004" +
    "\203\221\001\002\000\006\002\uffe2\011\uffe2\001\002\000" +
    "\006\005\223\203\uff31\001\002\000\004\203\221\001\002" +
    "\000\006\002\uff91\011\uff91\001\002\000\006\005\223\203" +
    "\uff31\001\002\000\004\203\221\001\002\000\014\005\223" +
    "\175\uff31\176\uff31\177\uff31\202\uff31\001\002\000\012\175" +
    "\231\176\227\177\234\202\u0137\001\002\000\006\002\uffbc" +
    "\011\uffbc\001\002\000\006\005\223\205\uff31\001\002\000" +
    "\004\205\233\001\002\000\006\002\uff83\011\uff83\001\002" +
    "\000\006\002\uff77\011\uff77\001\002\000\006\005\223\205" +
    "\uff31\001\002\000\004\205\233\001\002\000\006\002\uffa0" +
    "\011\uffa0\001\002\000\014\005\223\175\uff31\176\uff31\177" +
    "\uff31\205\uff31\001\002\000\012\175\231\176\227\177\234" +
    "\205\233\001\002\000\006\002\uff9c\011\uff9c\001\002\000" +
    "\004\006\u01d0\001\002\000\004\203\221\001\002\000\004" +
    "\007\u01d2\001\002\000\006\002\uffb5\011\uffb5\001\002\000" +
    "\022\006\u01d8\015\u01d6\016\u01d3\025\u01d7\175\231\176\227" +
    "\177\234\202\u0137\001\002\000\040\002\uff4d\005\uff4d\007" +
    "\uff4d\011\uff4d\012\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d" +
    "\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d\024\uff4d\001" +
    "\002\000\034\002\uff76\011\uff76\012\u01e4\013\u01dd\014\u01e0" +
    "\015\u01e1\016\u01db\017\u01df\020\u01de\021\u01e2\022\u01da\023" +
    "\u01e5\024\u01dc\001\002\000\022\006\u01d8\015\u01d6\016\u01d3" +
    "\025\u01d7\175\231\176\227\177\234\202\u0137\001\002\000" +
    "\022\006\u01d8\015\u01d6\016\u01d3\025\u01d7\175\231\176\227" +
    "\177\234\202\u0137\001\002\000\022\006\u01d8\015\u01d6\016" +
    "\u01d3\025\u01d7\175\231\176\227\177\234\202\u0137\001\002" +
    "\000\032\007\u01e3\012\u01e4\013\u01dd\014\u01e0\015\u01e1\016" +
    "\u01db\017\u01df\020\u01de\021\u01e2\022\u01da\023\u01e5\024\u01dc" +
    "\001\002\000\022\006\u01d8\015\u01d6\016\u01d3\025\u01d7\175" +
    "\231\176\227\177\234\202\u0137\001\002\000\022\006\u01d8" +
    "\015\u01d6\016\u01d3\025\u01d7\175\231\176\227\177\234\202" +
    "\u0137\001\002\000\022\006\u01d8\015\u01d6\016\u01d3\025\u01d7" +
    "\175\231\176\227\177\234\202\u0137\001\002\000\022\006" +
    "\u01d8\015\u01d6\016\u01d3\025\u01d7\175\231\176\227\177\234" +
    "\202\u0137\001\002\000\022\006\u01d8\015\u01d6\016\u01d3\025" +
    "\u01d7\175\231\176\227\177\234\202\u0137\001\002\000\022" +
    "\006\u01d8\015\u01d6\016\u01d3\025\u01d7\175\231\176\227\177" +
    "\234\202\u0137\001\002\000\022\006\u01d8\015\u01d6\016\u01d3" +
    "\025\u01d7\175\231\176\227\177\234\202\u0137\001\002\000" +
    "\022\006\u01d8\015\u01d6\016\u01d3\025\u01d7\175\231\176\227" +
    "\177\234\202\u0137\001\002\000\022\006\u01d8\015\u01d6\016" +
    "\u01d3\025\u01d7\175\231\176\227\177\234\202\u0137\001\002" +
    "\000\040\002\uff51\005\uff51\007\uff51\011\uff51\012\uff51\013" +
    "\uff51\014\uff51\015\uff51\016\uff51\017\uff51\020\uff51\021\uff51" +
    "\022\uff51\023\uff51\024\uff51\001\002\000\022\006\u01d8\015" +
    "\u01d6\016\u01d3\025\u01d7\175\231\176\227\177\234\202\u0137" +
    "\001\002\000\022\006\u01d8\015\u01d6\016\u01d3\025\u01d7\175" +
    "\231\176\227\177\234\202\u0137\001\002\000\040\002\uff53" +
    "\005\uff53\007\uff53\011\uff53\012\u01e4\013\u01dd\014\u01e0\015" +
    "\u01e1\016\u01db\017\u01df\020\u01de\021\u01e2\022\u01da\023\uff53" +
    "\024\u01dc\001\002\000\040\002\uff5a\005\uff5a\007\uff5a\011" +
    "\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a\016\uff5a\017\uff5a" +
    "\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\001\002\000" +
    "\040\002\uff55\005\uff55\007\uff55\011\uff55\012\u01e4\013\u01dd" +
    "\014\u01e0\015\u01e1\016\u01db\017\uff55\020\uff55\021\uff55\022" +
    "\uff55\023\uff55\024\uff55\001\002\000\040\002\uff5c\005\uff5c" +
    "\007\uff5c\011\uff5c\012\u01e4\013\u01dd\014\u01e0\015\uff5c\016" +
    "\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c" +
    "\001\002\000\040\002\uff58\005\uff58\007\uff58\011\uff58\012" +
    "\uff58\013\uff58\014\uff58\015\uff58\016\uff58\017\uff58\020\uff58" +
    "\021\uff58\022\uff58\023\uff58\024\uff58\001\002\000\040\002" +
    "\uff57\005\uff57\007\uff57\011\uff57\012\u01e4\013\u01dd\014\u01e0" +
    "\015\u01e1\016\u01db\017\uff57\020\uff57\021\uff57\022\uff57\023" +
    "\uff57\024\uff57\001\002\000\040\002\uff56\005\uff56\007\uff56" +
    "\011\uff56\012\u01e4\013\u01dd\014\u01e0\015\u01e1\016\u01db\017" +
    "\uff56\020\uff56\021\uff56\022\uff56\023\uff56\024\uff56\001\002" +
    "\000\040\002\uff59\005\uff59\007\uff59\011\uff59\012\uff59\013" +
    "\uff59\014\uff59\015\uff59\016\uff59\017\uff59\020\uff59\021\uff59" +
    "\022\uff59\023\uff59\024\uff59\001\002\000\040\002\uff52\005" +
    "\uff52\007\uff52\011\uff52\012\u01e4\013\u01dd\014\u01e0\015\u01e1" +
    "\016\u01db\017\u01df\020\u01de\021\u01e2\022\u01da\023\uff52\024" +
    "\uff52\001\002\000\040\002\uff5b\005\uff5b\007\uff5b\011\uff5b" +
    "\012\u01e4\013\u01dd\014\u01e0\015\uff5b\016\uff5b\017\uff5b\020" +
    "\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\001\002\000\040" +
    "\002\uff54\005\uff54\007\uff54\011\uff54\012\u01e4\013\u01dd\014" +
    "\u01e0\015\u01e1\016\u01db\017\u01df\020\u01de\021\u01e2\022\uff54" +
    "\023\uff54\024\uff54\001\002\000\040\002\uff4e\005\uff4e\007" +
    "\uff4e\011\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e" +
    "\017\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e\001" +
    "\002\000\040\002\uff4f\005\uff4f\007\uff4f\011\uff4f\012\uff4f" +
    "\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021" +
    "\uff4f\022\uff4f\023\uff4f\024\uff4f\001\002\000\040\002\uff50" +
    "\005\uff50\007\uff50\011\uff50\012\uff50\013\uff50\014\uff50\015" +
    "\uff50\016\uff50\017\uff50\020\uff50\021\uff50\022\uff50\023\uff50" +
    "\024\uff50\001\002\000\006\005\223\203\uff31\001\002\000" +
    "\004\203\221\001\002\000\014\005\223\175\uff31\176\uff31" +
    "\177\uff31\202\uff31\001\002\000\012\175\231\176\227\177" +
    "\234\202\u0137\001\002\000\006\002\uffbb\011\uffbb\001\002" +
    "\000\014\005\223\175\uff31\176\uff31\177\uff31\205\uff31\001" +
    "\002\000\012\175\231\176\227\177\234\205\233\001\002" +
    "\000\006\002\uff9b\011\uff9b\001\002\000\004\006\u01fd\001" +
    "\002\000\004\203\221\001\002\000\004\007\u01ff\001\002" +
    "\000\006\002\uffb3\011\uffb3\001\002\000\012\005\223\175" +
    "\uff31\176\uff31\177\uff31\001\002\000\010\175\231\176\227" +
    "\177\234\001\002\000\004\006\u0203\001\002\000\004\203" +
    "\221\001\002\000\004\007\u0205\001\002\000\006\002\uffb2" +
    "\011\uffb2\001\002\000\006\005\223\203\uff31\001\002\000" +
    "\004\203\221\001\002\000\014\005\223\175\uff31\176\uff31" +
    "\177\uff31\202\uff31\001\002\000\012\175\231\176\227\177" +
    "\234\202\u0137\001\002\000\006\002\uffba\011\uffba\001\002" +
    "\000\014\005\223\175\uff31\176\uff31\177\uff31\202\uff31\001" +
    "\002\000\012\175\231\176\227\177\234\202\u0137\001\002" +
    "\000\006\002\uff9f\011\uff9f\001\002\000\006\005\223\204" +
    "\uff31\001\002\000\004\204\275\001\002\000\006\005\223" +
    "\204\uff31\001\002\000\004\204\275\001\002\000\006\002" +
    "\uffd0\011\uffd0\001\002\000\006\005\223\204\uff31\001\002" +
    "\000\004\204\275\001\002\000\006\005\223\204\uff31\001" +
    "\002\000\004\204\275\001\002\000\006\002\uffcc\011\uffcc" +
    "\001\002\000\006\005\223\204\uff31\001\002\000\004\204" +
    "\275\001\002\000\006\005\223\204\uff31\001\002\000\004" +
    "\204\275\001\002\000\006\002\uffd3\011\uffd3\001\002\000" +
    "\006\002\uff5e\011\uff5e\001\002\000\006\002\uff67\011\uff67" +
    "\001\002\000\006\005\223\204\uff31\001\002\000\004\204" +
    "\275\001\002\000\006\005\223\204\uff31\001\002\000\004" +
    "\204\275\001\002\000\006\005\223\204\uff31\001\002\000" +
    "\004\204\275\001\002\000\006\002\uffe9\011\uffe9\001\002" +
    "\000\012\005\223\175\uff31\176\uff31\177\uff31\001\002\000" +
    "\010\175\231\176\227\177\234\001\002\000\004\006\u0229" +
    "\001\002\000\004\203\221\001\002\000\004\007\u022b\001" +
    "\002\000\006\002\uffb4\011\uffb4\001\002\000\006\002\ufffb" +
    "\011\ufffb\001\002\000\006\002\ufff9\011\ufff9\001\002\000" +
    "\006\002\ufffa\011\ufffa\001\002\000\006\005\223\204\uff31" +
    "\001\002\000\004\204\275\001\002\000\006\005\223\204" +
    "\uff31\001\002\000\004\204\275\001\002\000\006\002\uffc3" +
    "\011\uffc3\001\002\000\014\005\223\175\uff31\176\uff31\177" +
    "\uff31\205\uff31\001\002\000\012\175\231\176\227\177\234" +
    "\205\233\001\002\000\006\005\223\203\uff31\001\002\000" +
    "\004\006\u0238\001\002\000\004\203\221\001\002\000\004" +
    "\007\u023a\001\002\000\006\002\uffaa\011\uffaa\001\002\000" +
    "\004\203\221\001\002\000\006\002\uff95\011\uff95\001\002" +
    "\000\014\005\223\175\uff31\176\uff31\177\uff31\202\uff31\001" +
    "\002\000\012\175\231\176\227\177\234\202\u0137\001\002" +
    "\000\006\002\uffa2\011\uffa2\001\002\000\006\005\223\203" +
    "\uff31\001\002\000\004\203\221\001\002\000\006\005\223" +
    "\203\uff31\001\002\000\004\203\221\001\002\000\006\002" +
    "\uffdc\011\uffdc\001\002\000\014\005\223\175\uff31\176\uff31" +
    "\177\uff31\202\uff31\001\002\000\012\175\231\176\227\177" +
    "\234\202\u0137\001\002\000\006\002\uffa3\011\uffa3\001\002" +
    "\000\006\005\223\203\uff31\001\002\000\004\203\221\001" +
    "\002\000\006\005\223\205\uff31\001\002\000\004\205\233" +
    "\001\002\000\006\002\uff7d\011\uff7d\001\002\000\014\005" +
    "\223\175\uff31\176\uff31\177\uff31\205\uff31\001\002\000\012" +
    "\175\231\176\227\177\234\205\233\001\002\000\006\002" +
    "\uff9a\011\uff9a\001\002\000\004\006\u0251\001\002\000\004" +
    "\203\221\001\002\000\004\007\u0253\001\002\000\006\002" +
    "\uffb1\011\uffb1\001\002\000\006\005\223\203\uff31\001\002" +
    "\000\004\203\221\001\002\000\006\002\uff92\011\uff92\001" +
    "\002\000\006\005\223\203\uff31\001\002\000\004\203\221" +
    "\001\002\000\006\005\223\203\uff31\001\002\000\004\203" +
    "\221\001\002\000\006\002\uffdb\011\uffdb\001\002\000\006" +
    "\005\223\205\uff31\001\002\000\004\205\233\001\002\000" +
    "\006\002\uff84\011\uff84\001\002\000\006\005\223\203\uff31" +
    "\001\002\000\004\203\221\001\002\000\014\005\223\175" +
    "\uff31\176\uff31\177\uff31\202\uff31\001\002\000\012\175\231" +
    "\176\227\177\234\202\u0137\001\002\000\006\002\uffb7\011" +
    "\uffb7\001\002\000\006\005\223\204\uff31\001\002\000\004" +
    "\204\275\001\002\000\006\002\uff90\011\uff90\001\002\000" +
    "\014\005\223\175\uff31\176\uff31\177\uff31\205\uff31\001\002" +
    "\000\012\175\231\176\227\177\234\205\233\001\002\000" +
    "\006\005\223\203\uff31\001\002\000\004\006\u026b\001\002" +
    "\000\004\203\221\001\002\000\004\007\u026d\001\002\000" +
    "\006\002\uffad\011\uffad\001\002\000\004\203\221\001\002" +
    "\000\006\002\uff98\011\uff98\001\002\000\006\005\223\204" +
    "\uff31\001\002\000\004\204\275\001\002\000\006\002\uffc4" +
    "\011\uffc4\001\002\000\014\005\223\175\uff31\176\uff31\177" +
    "\uff31\205\uff31\001\002\000\012\175\231\176\227\177\234" +
    "\205\233\001\002\000\006\005\223\203\uff31\001\002\000" +
    "\004\006\u0277\001\002\000\004\203\221\001\002\000\004" +
    "\007\u0279\001\002\000\006\002\uffac\011\uffac\001\002\000" +
    "\004\203\221\001\002\000\006\002\uff97\011\uff97\001\002" +
    "\000\006\005\223\203\uff31\001\002\000\004\203\221\001" +
    "\002\000\006\005\223\203\uff31\001\002\000\004\203\221" +
    "\001\002\000\006\002\uffda\011\uffda\001\002\000\362\002" +
    "\ufffd\004\ufffd\010\ufffd\011\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd" +
    "\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd" +
    "\102\ufffd\103\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110" +
    "\ufffd\111\ufffd\112\ufffd\113\ufffd\114\ufffd\115\ufffd\116\ufffd" +
    "\117\ufffd\120\ufffd\121\ufffd\122\ufffd\123\ufffd\124\ufffd\125" +
    "\ufffd\126\ufffd\127\ufffd\130\ufffd\131\ufffd\132\ufffd\133\ufffd" +
    "\134\ufffd\135\ufffd\136\ufffd\137\ufffd\140\ufffd\141\ufffd\142" +
    "\ufffd\143\ufffd\144\ufffd\145\ufffd\146\ufffd\147\ufffd\150\ufffd" +
    "\151\ufffd\152\ufffd\153\ufffd\154\ufffd\155\ufffd\156\ufffd\157" +
    "\ufffd\160\ufffd\161\ufffd\162\ufffd\163\ufffd\164\ufffd\165\ufffd" +
    "\166\ufffd\167\ufffd\170\ufffd\171\ufffd\172\ufffd\173\ufffd\174" +
    "\ufffd\206\ufffd\207\ufffd\210\ufffd\211\ufffd\212\ufffd\213\ufffd" +
    "\214\ufffd\215\ufffd\216\ufffd\217\ufffd\220\ufffd\221\ufffd\222" +
    "\ufffd\223\ufffd\224\ufffd\001\002\000\006\005\223\205\uff31" +
    "\001\002\000\004\205\233\001\002\000\006\002\uff85\011" +
    "\uff85\001\002\000\036\002\uff71\005\uff71\011\uff71\012\u01e4" +
    "\013\u01dd\014\u01e0\015\u01e1\016\u01db\017\u01df\020\u01de\021" +
    "\u01e2\022\u01da\023\u01e5\024\u01dc\001\002\000\010\002\uff7a" +
    "\005\u0287\011\uff7a\001\002\000\022\006\u01d8\015\u01d6\016" +
    "\u01d3\025\u01d7\175\231\176\227\177\234\202\u0137\001\002" +
    "\000\036\002\uff70\005\uff70\011\uff70\012\u01e4\013\u01dd\014" +
    "\u01e0\015\u01e1\016\u01db\017\u01df\020\u01de\021\u01e2\022\u01da" +
    "\023\u01e5\024\u01dc\001\002\000\006\005\223\203\uff31\001" +
    "\002\000\004\203\221\001\002\000\006\005\223\205\uff31" +
    "\001\002\000\004\205\233\001\002\000\006\002\uffa9\011" +
    "\uffa9\001\002\000\006\005\223\204\uff31\001\002\000\004" +
    "\204\275\001\002\000\006\002\uffc5\011\uffc5\001\002\000" +
    "\006\005\223\204\uff31\001\002\000\004\204\275\001\002" +
    "\000\006\002\uff8e\011\uff8e\001\002\000\004\002\uffff\001" +
    "\002\000\006\005\223\203\uff31\001\002\000\004\203\221" +
    "\001\002\000\006\002\uff8b\011\uff8b\001\002\000\020\006" +
    "\u02a0\015\u029d\016\u0298\175\u029b\176\227\177\234\200\u02a1" +
    "\001\002\000\022\002\uff6d\005\uff6d\011\uff6d\012\u02a8\013" +
    "\u02a7\014\u02a3\015\u02a5\016\u02a6\001\002\000\024\002\uff44" +
    "\005\uff44\007\uff44\011\uff44\012\uff44\013\uff44\014\uff44\015" +
    "\uff44\016\uff44\001\002\000\024\002\uff38\005\uff38\007\uff38" +
    "\011\uff38\012\uff38\013\uff38\014\uff38\015\uff38\016\uff38\001" +
    "\002\000\024\002\uff39\005\uff39\007\uff39\011\uff39\012\uff39" +
    "\013\uff39\014\uff39\015\uff39\016\uff39\001\002\000\020\006" +
    "\u02a0\015\u029d\016\u0298\175\u029b\176\227\177\234\200\u02a1" +
    "\001\002\000\024\002\uff3a\005\uff3a\007\uff3a\011\uff3a\012" +
    "\uff3a\013\uff3a\014\uff3a\015\uff3a\016\uff3a\001\002\000\010" +
    "\002\uff75\005\u02ae\011\uff75\001\002\000\020\006\u02a0\015" +
    "\u029d\016\u0298\175\u029b\176\227\177\234\200\u02a1\001\002" +
    "\000\024\002\uff3b\005\uff3b\007\uff3b\011\uff3b\012\uff3b\013" +
    "\uff3b\014\uff3b\015\uff3b\016\uff3b\001\002\000\016\007\u02a4" +
    "\012\u02a8\013\u02a7\014\u02a3\015\u02a5\016\u02a6\001\002\000" +
    "\020\006\u02a0\015\u029d\016\u0298\175\u029b\176\227\177\234" +
    "\200\u02a1\001\002\000\024\002\uff47\005\uff47\007\uff47\011" +
    "\uff47\012\uff47\013\uff47\014\uff47\015\uff47\016\uff47\001\002" +
    "\000\020\006\u02a0\015\u029d\016\u0298\175\u029b\176\227\177" +
    "\234\200\u02a1\001\002\000\020\006\u02a0\015\u029d\016\u0298" +
    "\175\u029b\176\227\177\234\200\u02a1\001\002\000\020\006" +
    "\u02a0\015\u029d\016\u0298\175\u029b\176\227\177\234\200\u02a1" +
    "\001\002\000\020\006\u02a0\015\u029d\016\u0298\175\u029b\176" +
    "\227\177\234\200\u02a1\001\002\000\024\002\uff4a\005\uff4a" +
    "\007\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016" +
    "\uff4a\001\002\000\024\002\uff49\005\uff49\007\uff49\011\uff49" +
    "\012\uff49\013\uff49\014\uff49\015\uff49\016\uff49\001\002\000" +
    "\024\002\uff4b\005\uff4b\007\uff4b\011\uff4b\012\u02a8\013\u02a7" +
    "\014\u02a3\015\uff4b\016\uff4b\001\002\000\024\002\uff4c\005" +
    "\uff4c\007\uff4c\011\uff4c\012\u02a8\013\u02a7\014\u02a3\015\uff4c" +
    "\016\uff4c\001\002\000\024\002\uff48\005\uff48\007\uff48\011" +
    "\uff48\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48\001\002" +
    "\000\020\006\u02a0\015\u029d\016\u0298\175\u029b\176\227\177" +
    "\234\200\u02a1\001\002\000\022\002\uff6c\005\uff6c\011\uff6c" +
    "\012\u02a8\013\u02a7\014\u02a3\015\u02a5\016\u02a6\001\002\000" +
    "\024\002\uff45\005\uff45\007\uff45\011\uff45\012\uff45\013\uff45" +
    "\014\uff45\015\uff45\016\uff45\001\002\000\024\002\uff46\005" +
    "\uff46\007\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46" +
    "\016\uff46\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02af\000\056\002\170\003\005\004\122\005\031\006" +
    "\057\007\210\010\013\011\062\012\146\013\165\014\143" +
    "\015\015\016\042\017\106\020\114\021\176\022\205\027" +
    "\152\030\064\031\101\032\040\037\012\001\001\000\014" +
    "\024\u029e\041\u029d\042\u029b\046\u0299\047\u0298\001\001\000" +
    "\004\035\u0294\001\001\000\056\002\u0293\003\005\004\122" +
    "\005\031\006\057\007\210\010\013\011\062\012\146\013" +
    "\165\014\143\015\015\016\042\017\106\020\114\021\176" +
    "\022\205\027\152\030\064\031\101\032\040\037\012\001" +
    "\001\000\004\036\u0290\001\001\000\004\035\u028d\001\001" +
    "\000\004\035\u0288\001\001\000\002\001\001\000\020\023" +
    "\u0285\040\u0137\041\227\042\234\043\u0138\044\u0284\045\u01d3" +
    "\001\001\000\002\001\001\000\004\035\u0281\001\001\000" +
    "\002\001\001\000\004\035\u027b\001\001\000\004\035\u0272" +
    "\001\001\000\002\001\001\000\004\035\u026f\001\001\000" +
    "\002\001\001\000\004\035\u0266\001\001\000\004\036\u0263" +
    "\001\001\000\004\035\u025e\001\001\000\004\035\u025b\001" +
    "\001\000\004\035\u0256\001\001\000\004\035\u0253\001\001" +
    "\000\002\001\001\000\004\035\u024c\001\001\000\004\035" +
    "\u0247\001\001\000\004\035\u0244\001\001\000\004\035\u023f" +
    "\001\001\000\004\035\u023c\001\001\000\004\036\u0233\001" +
    "\001\000\002\001\001\000\004\035\u022e\001\001\000\034" +
    "\004\122\005\u022b\006\057\007\210\010\013\011\062\012" +
    "\146\013\165\014\143\017\u022c\021\u022d\022\205\037\012" +
    "\001\001\000\004\035\u0225\001\001\000\004\036\u021e\001" +
    "\001\000\004\020\u021d\001\001\000\010\040\u021c\041\227" +
    "\042\234\001\001\000\004\036\u0217\001\001\000\004\036" +
    "\u0212\001\001\000\004\036\u020d\001\001\000\004\035\u020a" +
    "\001\001\000\004\035\u0205\001\001\000\004\035\u01ff\001" +
    "\001\000\004\035\u01f8\001\001\000\004\035\u01f3\001\001" +
    "\000\002\001\001\000\016\040\u0137\041\227\042\234\043" +
    "\u0138\044\u01d4\045\u01d3\001\001\000\004\035\u01cb\001\001" +
    "\000\002\001\001\000\004\035\u01c8\001\001\000\002\001" +
    "\001\000\004\034\u01c7\001\001\000\004\035\u01c4\001\001" +
    "\000\004\035\u01bf\001\001\000\004\035\u01bc\001\001\000" +
    "\004\035\u01b7\001\001\000\004\035\u01b2\001\001\000\004" +
    "\035\u01ad\001\001\000\004\036\u01a4\001\001\000\004\035" +
    "\u019f\001\001\000\004\035\u019a\001\001\000\004\033\u0199" +
    "\001\001\000\004\036\u0194\001\001\000\002\001\001\000" +
    "\004\036\u018d\001\001\000\004\035\u018a\001\001\000\004" +
    "\035\u0185\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u0180\001\001\000\004\034\u017f\001\001\000\004" +
    "\033\u017d\001\001\000\004\036\u017a\001\001\000\004\036" +
    "\u0173\001\001\000\002\001\001\000\006\033\u016f\035\u0170" +
    "\001\001\000\004\036\u016a\001\001\000\004\035\u0165\001" +
    "\001\000\004\035\u0160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u015b\001\001\000\004\035\u015a\001" +
    "\001\000\004\035\u0157\001\001\000\004\035\u0152\001\001" +
    "\000\002\001\001\000\004\035\u014d\001\001\000\002\001" +
    "\001\000\004\035\u0148\001\001\000\004\035\u0143\001\001" +
    "\000\004\035\u013e\001\001\000\004\035\u0139\001\001\000" +
    "\004\035\u0131\001\001\000\010\040\u0130\041\227\042\234" +
    "\001\001\000\004\033\u012f\001\001\000\004\035\u012a\001" +
    "\001\000\004\036\u0123\001\001\000\002\001\001\000\004" +
    "\036\u0120\001\001\000\004\035\u011b\001\001\000\002\001" +
    "\001\000\004\035\u0116\001\001\000\004\035\u0113\001\001" +
    "\000\004\036\u010e\001\001\000\002\001\001\000\004\035" +
    "\u010b\001\001\000\002\001\001\000\004\035\u0106\001\001" +
    "\000\006\025\u0103\033\u0102\001\001\000\004\035\377\001" +
    "\001\000\002\001\001\000\004\035\372\001\001\000\002" +
    "\001\001\000\004\035\365\001\001\000\004\036\360\001" +
    "\001\000\002\001\001\000\004\035\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\345\001\001\000" +
    "\004\036\342\001\001\000\004\035\337\001\001\000\004" +
    "\035\334\001\001\000\004\036\331\001\001\000\002\001" +
    "\001\000\004\035\324\001\001\000\004\035\317\001\001" +
    "\000\004\036\314\001\001\000\004\033\313\001\001\000" +
    "\004\035\306\001\001\000\006\026\303\033\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\275\001" +
    "\001\000\002\001\001\000\004\035\271\001\001\000\004" +
    "\035\264\001\001\000\004\035\257\001\001\000\004\035" +
    "\252\001\001\000\004\035\247\001\001\000\004\035\242" +
    "\001\001\000\004\035\221\001\001\000\002\001\001\000" +
    "\006\050\223\051\224\001\001\000\002\001\001\000\012" +
    "\033\225\040\231\041\227\042\234\001\001\000\002\001" +
    "\001\000\006\050\240\051\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\241\001\001\000\002\001\001\000\006\050\243" +
    "\051\224\001\001\000\004\035\244\001\001\000\006\050" +
    "\245\051\224\001\001\000\004\035\246\001\001\000\002" +
    "\001\001\000\006\050\250\051\224\001\001\000\004\035" +
    "\251\001\001\000\002\001\001\000\006\050\253\051\224" +
    "\001\001\000\004\035\254\001\001\000\006\050\255\051" +
    "\224\001\001\000\004\035\256\001\001\000\002\001\001" +
    "\000\006\050\260\051\224\001\001\000\004\035\261\001" +
    "\001\000\006\050\262\051\224\001\001\000\004\033\263" +
    "\001\001\000\002\001\001\000\006\050\265\051\224\001" +
    "\001\000\004\035\266\001\001\000\006\050\267\051\224" +
    "\001\001\000\004\035\270\001\001\000\002\001\001\000" +
    "\006\050\272\051\224\001\001\000\004\036\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\276\051" +
    "\224\001\001\000\004\036\277\001\001\000\006\050\300" +
    "\051\224\001\001\000\004\036\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\305" +
    "\001\001\000\002\001\001\000\006\050\307\051\224\001" +
    "\001\000\004\036\310\001\001\000\006\050\311\051\224" +
    "\001\001\000\004\036\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\050\315\051\224\001\001\000\004" +
    "\035\316\001\001\000\002\001\001\000\006\050\320\051" +
    "\224\001\001\000\004\035\321\001\001\000\006\050\322" +
    "\051\224\001\001\000\004\033\323\001\001\000\002\001" +
    "\001\000\006\050\325\051\224\001\001\000\004\035\326" +
    "\001\001\000\006\050\327\051\224\001\001\000\004\033" +
    "\330\001\001\000\002\001\001\000\006\050\332\051\224" +
    "\001\001\000\004\035\333\001\001\000\002\001\001\000" +
    "\006\050\335\051\224\001\001\000\004\033\336\001\001" +
    "\000\002\001\001\000\006\050\340\051\224\001\001\000" +
    "\004\035\341\001\001\000\002\001\001\000\006\050\343" +
    "\051\224\001\001\000\004\036\344\001\001\000\002\001" +
    "\001\000\006\050\346\051\224\001\001\000\004\036\347" +
    "\001\001\000\006\050\350\051\224\001\001\000\004\036" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\354\051\224\001\001\000\004\035\355\001\001\000" +
    "\006\050\356\051\224\001\001\000\004\033\357\001\001" +
    "\000\002\001\001\000\006\050\361\051\224\001\001\000" +
    "\004\036\362\001\001\000\006\050\363\051\224\001\001" +
    "\000\004\036\364\001\001\000\002\001\001\000\006\050" +
    "\366\051\224\001\001\000\004\035\367\001\001\000\006" +
    "\050\370\051\224\001\001\000\004\035\371\001\001\000" +
    "\002\001\001\000\006\050\373\051\224\001\001\000\004" +
    "\035\374\001\001\000\006\050\375\051\224\001\001\000" +
    "\004\033\376\001\001\000\002\001\001\000\006\050\u0100" +
    "\051\224\001\001\000\004\035\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u0105" +
    "\001\001\000\002\001\001\000\006\050\u0107\051\224\001" +
    "\001\000\004\035\u0108\001\001\000\006\050\u0109\051\224" +
    "\001\001\000\004\033\u010a\001\001\000\002\001\001\000" +
    "\006\050\u010c\051\224\001\001\000\004\036\u010d\001\001" +
    "\000\002\001\001\000\006\050\u010f\051\224\001\001\000" +
    "\004\036\u0110\001\001\000\006\050\u0111\051\224\001\001" +
    "\000\004\036\u0112\001\001\000\002\001\001\000\006\050" +
    "\u0114\051\224\001\001\000\004\033\u0115\001\001\000\002" +
    "\001\001\000\006\050\u0117\051\224\001\001\000\004\035" +
    "\u0118\001\001\000\006\050\u0119\051\224\001\001\000\004" +
    "\035\u011a\001\001\000\002\001\001\000\006\050\u011c\051" +
    "\224\001\001\000\004\035\u011d\001\001\000\006\050\u011e" +
    "\051\224\001\001\000\004\035\u011f\001\001\000\002\001" +
    "\001\000\006\050\u0121\051\224\001\001\000\004\035\u0122" +
    "\001\001\000\002\001\001\000\006\050\u0124\051\224\001" +
    "\001\000\004\036\u0125\001\001\000\006\050\u0126\051\224" +
    "\001\001\000\004\036\u0127\001\001\000\006\050\u0128\051" +
    "\224\001\001\000\004\036\u0129\001\001\000\002\001\001" +
    "\000\006\050\u012b\051\224\001\001\000\004\035\u012c\001" +
    "\001\000\006\050\u012d\051\224\001\001\000\004\033\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\u0132\051\224\001\001\000\004\035\u0133" +
    "\001\001\000\006\050\u0134\051\224\001\001\000\014\040" +
    "\u0137\041\227\042\234\043\u0138\045\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\u013a\051\224\001\001\000\004\035\u013b" +
    "\001\001\000\006\050\u013c\051\224\001\001\000\014\040" +
    "\u0137\041\227\042\234\043\u0138\045\u013d\001\001\000\002" +
    "\001\001\000\006\050\u013f\051\224\001\001\000\004\035" +
    "\u0140\001\001\000\006\050\u0141\051\224\001\001\000\014" +
    "\040\u0137\041\227\042\234\043\u0138\045\u0142\001\001\000" +
    "\002\001\001\000\006\050\u0144\051\224\001\001\000\004" +
    "\035\u0145\001\001\000\006\050\u0146\051\224\001\001\000" +
    "\014\040\u0137\041\227\042\234\043\u0138\045\u0147\001\001" +
    "\000\002\001\001\000\006\050\u0149\051\224\001\001\000" +
    "\004\035\u014a\001\001\000\006\050\u014b\051\224\001\001" +
    "\000\004\035\u014c\001\001\000\002\001\001\000\006\050" +
    "\u014e\051\224\001\001\000\004\035\u014f\001\001\000\006" +
    "\050\u0150\051\224\001\001\000\004\035\u0151\001\001\000" +
    "\002\001\001\000\006\050\u0153\051\224\001\001\000\004" +
    "\035\u0154\001\001\000\006\050\u0155\051\224\001\001\000" +
    "\014\040\u0137\041\227\042\234\043\u0138\045\u0156\001\001" +
    "\000\002\001\001\000\006\050\u0158\051\224\001\001\000" +
    "\004\035\u0159\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\u015c\051\224\001\001\000\004\035\u015d\001" +
    "\001\000\006\050\u015e\051\224\001\001\000\004\035\u015f" +
    "\001\001\000\002\001\001\000\006\050\u0161\051\224\001" +
    "\001\000\004\035\u0162\001\001\000\006\050\u0163\051\224" +
    "\001\001\000\004\035\u0164\001\001\000\002\001\001\000" +
    "\006\050\u0166\051\224\001\001\000\004\036\u0167\001\001" +
    "\000\006\050\u0168\051\224\001\001\000\004\036\u0169\001" +
    "\001\000\002\001\001\000\006\050\u016b\051\224\001\001" +
    "\000\004\036\u016c\001\001\000\006\050\u016d\051\224\001" +
    "\001\000\004\036\u016e\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\u0171\051\224\001\001\000\004\033" +
    "\u0172\001\001\000\002\001\001\000\006\050\u0174\051\224" +
    "\001\001\000\004\036\u0175\001\001\000\006\050\u0176\051" +
    "\224\001\001\000\004\036\u0177\001\001\000\006\050\u0178" +
    "\051\224\001\001\000\004\036\u0179\001\001\000\002\001" +
    "\001\000\006\050\u017b\051\224\001\001\000\004\036\u017c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\u0181\051\224\001\001" +
    "\000\004\035\u0182\001\001\000\006\050\u0183\051\224\001" +
    "\001\000\004\035\u0184\001\001\000\002\001\001\000\006" +
    "\050\u0186\051\224\001\001\000\004\035\u0187\001\001\000" +
    "\006\050\u0188\051\224\001\001\000\004\035\u0189\001\001" +
    "\000\002\001\001\000\006\050\u018b\051\224\001\001\000" +
    "\004\033\u018c\001\001\000\002\001\001\000\006\050\u018e" +
    "\051\224\001\001\000\004\036\u018f\001\001\000\006\050" +
    "\u0190\051\224\001\001\000\004\036\u0191\001\001\000\006" +
    "\050\u0192\051\224\001\001\000\004\036\u0193\001\001\000" +
    "\002\001\001\000\006\050\u0195\051\224\001\001\000\004" +
    "\036\u0196\001\001\000\006\050\u0197\051\224\001\001\000" +
    "\004\036\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\u019b\051\224\001\001\000\004\035\u019c\001" +
    "\001\000\006\050\u019d\051\224\001\001\000\004\035\u019e" +
    "\001\001\000\002\001\001\000\006\050\u01a0\051\224\001" +
    "\001\000\004\035\u01a1\001\001\000\006\050\u01a2\051\224" +
    "\001\001\000\014\040\u0137\041\227\042\234\043\u0138\045" +
    "\u01a3\001\001\000\002\001\001\000\006\050\u01a5\051\224" +
    "\001\001\000\012\033\u01a6\040\u01a7\041\227\042\234\001" +
    "\001\000\006\050\u01ab\051\224\001\001\000\002\001\001" +
    "\000\004\035\u01a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\u01ac\001\001\000\002\001\001\000\006" +
    "\050\u01ae\051\224\001\001\000\004\035\u01af\001\001\000" +
    "\006\050\u01b0\051\224\001\001\000\004\033\u01b1\001\001" +
    "\000\002\001\001\000\006\050\u01b3\051\224\001\001\000" +
    "\004\035\u01b4\001\001\000\006\050\u01b5\051\224\001\001" +
    "\000\004\035\u01b6\001\001\000\002\001\001\000\006\050" +
    "\u01b8\051\224\001\001\000\004\035\u01b9\001\001\000\006" +
    "\050\u01ba\051\224\001\001\000\004\035\u01bb\001\001\000" +
    "\002\001\001\000\006\050\u01bd\051\224\001\001\000\004" +
    "\035\u01be\001\001\000\002\001\001\000\006\050\u01c0\051" +
    "\224\001\001\000\004\035\u01c1\001\001\000\006\050\u01c2" +
    "\051\224\001\001\000\014\040\u0137\041\227\042\234\043" +
    "\u0138\045\u01c3\001\001\000\002\001\001\000\006\050\u01c5" +
    "\051\224\001\001\000\004\033\u01c6\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\u01c9\051\224\001\001" +
    "\000\004\033\u01ca\001\001\000\002\001\001\000\006\050" +
    "\u01cc\051\224\001\001\000\012\033\u01cd\040\u01ce\041\227" +
    "\042\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u01d0\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\040\u0137\041\227\042\234\043\u0138\044\u01f2\045" +
    "\u01d3\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\040\u0137\041\227\042\234\043\u0138\044\u01f1\045\u01d3\001" +
    "\001\000\016\040\u0137\041\227\042\234\043\u0138\044\u01f0" +
    "\045\u01d3\001\001\000\016\040\u0137\041\227\042\234\043" +
    "\u0138\044\u01d8\045\u01d3\001\001\000\002\001\001\000\016" +
    "\040\u0137\041\227\042\234\043\u0138\044\u01ef\045\u01d3\001" +
    "\001\000\016\040\u0137\041\227\042\234\043\u0138\044\u01ee" +
    "\045\u01d3\001\001\000\016\040\u0137\041\227\042\234\043" +
    "\u0138\044\u01ed\045\u01d3\001\001\000\016\040\u0137\041\227" +
    "\042\234\043\u0138\044\u01ec\045\u01d3\001\001\000\016\040" +
    "\u0137\041\227\042\234\043\u0138\044\u01eb\045\u01d3\001\001" +
    "\000\016\040\u0137\041\227\042\234\043\u0138\044\u01ea\045" +
    "\u01d3\001\001\000\016\040\u0137\041\227\042\234\043\u0138" +
    "\044\u01e9\045\u01d3\001\001\000\016\040\u0137\041\227\042" +
    "\234\043\u0138\044\u01e8\045\u01d3\001\001\000\016\040\u0137" +
    "\041\227\042\234\043\u0138\044\u01e7\045\u01d3\001\001\000" +
    "\002\001\001\000\016\040\u0137\041\227\042\234\043\u0138" +
    "\044\u01e6\045\u01d3\001\001\000\016\040\u0137\041\227\042" +
    "\234\043\u0138\044\u01e5\045\u01d3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\u01f4\051\224\001\001\000\004\035\u01f5\001" +
    "\001\000\006\050\u01f6\051\224\001\001\000\014\040\u0137" +
    "\041\227\042\234\043\u0138\045\u01f7\001\001\000\002\001" +
    "\001\000\006\050\u01f9\051\224\001\001\000\012\033\u01fa" +
    "\040\u01fb\041\227\042\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u01fd\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\u0200\051\224\001\001\000" +
    "\010\040\u0201\041\227\042\234\001\001\000\002\001\001" +
    "\000\004\035\u0203\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\u0206\051\224\001\001\000\004\035\u0207" +
    "\001\001\000\006\050\u0208\051\224\001\001\000\014\040" +
    "\u0137\041\227\042\234\043\u0138\045\u0209\001\001\000\002" +
    "\001\001\000\006\050\u020b\051\224\001\001\000\014\040" +
    "\u0137\041\227\042\234\043\u0138\045\u020c\001\001\000\002" +
    "\001\001\000\006\050\u020e\051\224\001\001\000\004\036" +
    "\u020f\001\001\000\006\050\u0210\051\224\001\001\000\004" +
    "\036\u0211\001\001\000\002\001\001\000\006\050\u0213\051" +
    "\224\001\001\000\004\036\u0214\001\001\000\006\050\u0215" +
    "\051\224\001\001\000\004\036\u0216\001\001\000\002\001" +
    "\001\000\006\050\u0218\051\224\001\001\000\004\036\u0219" +
    "\001\001\000\006\050\u021a\051\224\001\001\000\004\036" +
    "\u021b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\u021f\051\224\001\001\000\004\036" +
    "\u0220\001\001\000\006\050\u0221\051\224\001\001\000\004" +
    "\036\u0222\001\001\000\006\050\u0223\051\224\001\001\000" +
    "\004\036\u0224\001\001\000\002\001\001\000\006\050\u0226" +
    "\051\224\001\001\000\010\040\u0227\041\227\042\234\001" +
    "\001\000\002\001\001\000\004\035\u0229\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\u022f\051\224\001\001" +
    "\000\004\036\u0230\001\001\000\006\050\u0231\051\224\001" +
    "\001\000\004\036\u0232\001\001\000\002\001\001\000\006" +
    "\050\u0234\051\224\001\001\000\012\033\u0235\040\u0236\041" +
    "\227\042\234\001\001\000\006\050\u023a\051\224\001\001" +
    "\000\002\001\001\000\004\035\u0238\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u023b\001\001\000\002" +
    "\001\001\000\006\050\u023d\051\224\001\001\000\014\040" +
    "\u0137\041\227\042\234\043\u0138\045\u023e\001\001\000\002" +
    "\001\001\000\006\050\u0240\051\224\001\001\000\004\035" +
    "\u0241\001\001\000\006\050\u0242\051\224\001\001\000\004" +
    "\035\u0243\001\001\000\002\001\001\000\006\050\u0245\051" +
    "\224\001\001\000\014\040\u0137\041\227\042\234\043\u0138" +
    "\045\u0246\001\001\000\002\001\001\000\006\050\u0248\051" +
    "\224\001\001\000\004\035\u0249\001\001\000\006\050\u024a" +
    "\051\224\001\001\000\004\033\u024b\001\001\000\002\001" +
    "\001\000\006\050\u024d\051\224\001\001\000\012\033\u024e" +
    "\040\u024f\041\227\042\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u0251\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\u0254\051\224\001\001\000" +
    "\004\035\u0255\001\001\000\002\001\001\000\006\050\u0257" +
    "\051\224\001\001\000\004\035\u0258\001\001\000\006\050" +
    "\u0259\051\224\001\001\000\004\035\u025a\001\001\000\002" +
    "\001\001\000\006\050\u025c\051\224\001\001\000\004\033" +
    "\u025d\001\001\000\002\001\001\000\006\050\u025f\051\224" +
    "\001\001\000\004\035\u0260\001\001\000\006\050\u0261\051" +
    "\224\001\001\000\014\040\u0137\041\227\042\234\043\u0138" +
    "\045\u0262\001\001\000\002\001\001\000\006\050\u0264\051" +
    "\224\001\001\000\004\036\u0265\001\001\000\002\001\001" +
    "\000\006\050\u0267\051\224\001\001\000\012\033\u0268\040" +
    "\u0269\041\227\042\234\001\001\000\006\050\u026d\051\224" +
    "\001\001\000\002\001\001\000\004\035\u026b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u026e\001\001" +
    "\000\002\001\001\000\006\050\u0270\051\224\001\001\000" +
    "\004\036\u0271\001\001\000\002\001\001\000\006\050\u0273" +
    "\051\224\001\001\000\012\033\u0274\040\u0275\041\227\042" +
    "\234\001\001\000\006\050\u0279\051\224\001\001\000\002" +
    "\001\001\000\004\035\u0277\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u027a\001\001\000\002\001\001" +
    "\000\006\050\u027c\051\224\001\001\000\004\035\u027d\001" +
    "\001\000\006\050\u027e\051\224\001\001\000\004\035\u027f" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\050" +
    "\u0282\051\224\001\001\000\004\033\u0283\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\040" +
    "\u0137\041\227\042\234\043\u0138\044\u0287\045\u01d3\001\001" +
    "\000\002\001\001\000\006\050\u0289\051\224\001\001\000" +
    "\004\035\u028a\001\001\000\006\050\u028b\051\224\001\001" +
    "\000\004\033\u028c\001\001\000\002\001\001\000\006\050" +
    "\u028e\051\224\001\001\000\004\036\u028f\001\001\000\002" +
    "\001\001\000\006\050\u0291\051\224\001\001\000\004\036" +
    "\u0292\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\u0295\051\224\001\001\000\004\035\u0296\001\001\000" +
    "\002\001\001\000\012\041\u029d\042\u029b\046\u0299\047\u02b0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\041\u029d\042\u029b\046\u0299" +
    "\047\u02af\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\u029d\042\u029b\046\u0299\047\u02a1\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\041\u029d\042\u029b\046" +
    "\u0299\047\u02ac\001\001\000\002\001\001\000\012\041\u029d" +
    "\042\u029b\046\u0299\047\u02ab\001\001\000\012\041\u029d\042" +
    "\u029b\046\u0299\047\u02aa\001\001\000\012\041\u029d\042\u029b" +
    "\046\u0299\047\u02a9\001\001\000\012\041\u029d\042\u029b\046" +
    "\u0299\047\u02a8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\u029d\042\u029b\046\u0299\047\u02ae\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static void parse(File file) {
    try {
      Parser parser = new Parser(new Lexer(new FileReader(file)));
      parser.parse();
    } catch (FileNotFoundException e) {
      Errors.add("assembler: file '" + file + "' not found");
    } catch (IOException e) {
      Errors.add("assembler: file '" + file + "' could not be read");
    } catch (Exception e) {
      /* DO NOTHING */
    }
  }

  public DebugInfo info(int lineno, String source, String filename) {
    return new DebugInfo(lineno, source, filename);
  }

  @Override
  public void syntax_error(java_cup.runtime.Symbol cur_token) {
    // show all escaped sequences
    if (cur_token.value instanceof String) {
      cur_token.value = ((String) cur_token.value).replaceAll("\n", "\\\\n");
      cur_token.value = ((String) cur_token.value).replaceAll("\r", "\\\\r");
      cur_token.value = ((String) cur_token.value).replaceAll("\b", "\\\\b");
      cur_token.value = ((String) cur_token.value).replaceAll("\f", "\\\\f");
      cur_token.value = ((String) cur_token.value).replaceAll("\0", "\\\\0");
      cur_token.value = ((String) cur_token.value).replaceAll("\t", "\\\\t");
      cur_token.value = ((String) cur_token.value).replaceAll("\u000b", "\\\\v");
    }
    // parser error
    if (cur_token.sym != Token.ERROR)
      Errors.add(
        cur_token.left,
        Assembler.filename,
        "assembler",
        "(syntax) invalid statement: unexpected '" + cur_token.value +
        "' (column " + cur_token.right + ")"
      );
    // lexer error
    else
      Errors.add(
        cur_token.left,
        Assembler.filename,
        "assembler",
        (String)cur_token.value
      );
  }

  @Override
  public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) {
    /* DO NOTHING */
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Init ::= NLStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Init EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Init ::= NLStatement Init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Init ::= Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NLStatement ::= Statement NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NLStatement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NLStatement ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NLStatement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= Label RISCVInst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (i != null)
                    Assembler.program.add(i);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= Label RISCVPSeudo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= Label Data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= Label 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= RISCVInst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (i != null)
                    Assembler.program.add(i);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= RISCVPSeudo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= Data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= Directive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Label ::= LABEL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  String rawLabel = (String) id;
                  String lbl = rawLabel.substring(0, rawLabel.length() - 1);
                  if (!Assembler.program.addSymbol(Assembler.segment, lbl))
                    Errors.add(info(idleft, rawLabel, Assembler.filename), "assembler", "label '" + lbl + "' is already defined");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Label",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RISCVInst ::= Instruction 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!(Assembler.segment == Segment.TEXT))
                    Errors.add(i.getDebugInfo(), "assembler", "instructions can appear only in text segment");
                  else
                    RESULT = i;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RISCVInst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruction ::= RType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instruction ::= IType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instruction ::= SType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruction ::= BType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruction ::= UType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruction ::= JType 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruction ::= R4Type 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RISCVPSeudo ::= PSeudos 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!(Assembler.segment == Segment.TEXT))
                    Errors.add(l.get(0).getDebugInfo(), "assembler", "instructions can appear only in text segment");
                  else {
                    if (Settings.BARE)
                      Errors.add(l.get(0).getDebugInfo(), "assembler", "invalid instruction: do not use -bare flag in order to use pseudos");
                    else {
                      for (Statement stmt: l)
                        Assembler.program.add(stmt);
                    }
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RISCVPSeudo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // R4Type ::= F_FMADDS FRegister Delimiter FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new R4Type("fmadd.s", info(ileft, String.format("fmadd.s %s, %s, %s, %s", rd, rs1, rs2, rs3), Assembler.filename), rd, rs1, rs2, rs3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R4Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // R4Type ::= F_FMSUBS FRegister Delimiter FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new R4Type("fmsub.s", info(ileft, String.format("fmsub.s %s, %s, %s, %s", rd, rs1, rs2, rs3), Assembler.filename), rd, rs1, rs2, rs3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R4Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // R4Type ::= F_FNMADDS FRegister Delimiter FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new R4Type("fnmadd.s", info(ileft, String.format("fnmadd.s %s, %s, %s, %s", rd, rs1, rs2, rs3), Assembler.filename), rd, rs1, rs2, rs3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R4Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // R4Type ::= F_FNMSUBS FRegister Delimiter FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new R4Type("fnmsub.s", info(ileft, String.format("fnmsub.s %s, %s, %s, %s", rd, rs1, rs2, rs3), Assembler.filename), rd, rs1, rs2, rs3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R4Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RType ::= I_SLL Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sll", info(ileft, String.format("sll %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RType ::= I_SRL Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("srl", info(ileft, String.format("srl %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RType ::= I_SRA Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sra", info(ileft, String.format("sra %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RType ::= I_ADD Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("add", info(ileft, String.format("add %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RType ::= I_SUB Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sub", info(ileft, String.format("sub %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RType ::= I_XOR Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("xor", info(ileft, String.format("xor %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RType ::= I_OR Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("or", info(ileft, String.format("or %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RType ::= I_AND Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("and", info(ileft, String.format("and %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RType ::= I_SLT Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("slt", info(ileft, String.format("slt %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RType ::= I_SLTU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sltu", info(ileft, String.format("sltu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RType ::= I_MUL Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("mul", info(ileft, String.format("mul %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RType ::= I_MULH Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("mulh", info(ileft, String.format("mulh %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RType ::= I_MULHSU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("mulhsu", info(ileft, String.format("mulhsu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RType ::= I_MULHU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("mulhu", info(ileft, String.format("mulhu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RType ::= I_DIV Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("div", info(ileft, String.format("div %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RType ::= I_DIVU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("divu", info(ileft, String.format("divu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RType ::= I_REM Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("rem", info(ileft, String.format("rem %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RType ::= I_REMU Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("remu", info(ileft, String.format("remu %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RType ::= F_FADDS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fadd.s", info(ileft, String.format("fadd.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RType ::= F_FSUBS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsub.s", info(ileft, String.format("fsub.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RType ::= F_FMULS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fmul.s", info(ileft, String.format("fmul.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RType ::= F_FDIVS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fdiv.s", info(ileft, String.format("fdiv.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RType ::= F_FSQRTS FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsqrt.s", info(ileft, String.format("fsqrt.s %s, %s", rd, rs1), Assembler.filename), rd, rs1, "f0"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RType ::= F_FSGNJS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsgnj.s", info(ileft, String.format("fsgnj.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RType ::= F_FSGNJNS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsgnjn.s", info(ileft, String.format("fsgnjn.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RType ::= F_FSGNJXS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fsgnjx.s", info(ileft, String.format("fsgnjx.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RType ::= F_FMINS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fmin.s", info(ileft, String.format("fmin.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RType ::= F_FMAXS FRegister Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FRType("fmax.s", info(ileft, String.format("fmax.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RType ::= F_FMVXW Register Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fmv.x.w", info(ileft, String.format("fmv.x.w %s, %s", rd, rs1), Assembler.filename), "f" + num, rs1, "f0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RType ::= F_FMVWX FRegister Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rs1);
                  RESULT = new FRType("fmv.w.x", info(ileft, String.format("fmv.w.x %s, %s", rd, rs1), Assembler.filename), rd, "f" + num, "f0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RType ::= F_FCVTSW FRegister Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rs1);
                  RESULT = new FRType("fcvt.s.w", info(ileft, String.format("fcvt.s.w %s, %s", rd, rs1), Assembler.filename), rd, "f" + num, "f0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RType ::= F_FCVTSWU FRegister Delimiter Register 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rs1);
                  RESULT = new FRType("fcvt.s.wu", info(ileft, String.format("fcvt.s.wu %s, %s", rd, rs1), Assembler.filename), rd, "f" + num, "f1");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RType ::= F_FCVTWS Register Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fcvt.w.s", info(ileft, String.format("fcvt.w.s %s, %s", rd, rs1), Assembler.filename), "f" + num, rs1, "f0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RType ::= F_FCVTWUS Register Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fcvt.wu.s", info(ileft, String.format("fcvt.wu.s %s, %s", rd, rs1), Assembler.filename), "f" + num, rs1, "f1");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RType ::= F_FEQS Register Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("feq.s", info(ileft, String.format("feq.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), "f" + num, rs1, rs2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RType ::= F_FLTS Register Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("flt.s", info(ileft, String.format("flt.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), "f" + num, rs1, rs2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RType ::= F_FLES Register Delimiter FRegister Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fle.s", info(ileft, String.format("fle.s %s, %s, %s", rd, rs1, rs2), Assembler.filename), "f" + num, rs1, rs2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RType ::= F_FCLASSS Register Delimiter FRegister 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // hack to re-use FRType Statement
                  int num = Globals.regfile.getRegisterNumber(rd);
                  RESULT = new FRType("fclass.s", info(ileft, String.format("fclass.s %s, %s", rd, rs1), Assembler.filename), "f" + num, rs1, "f1");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IType ::= I_ADDI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("addi", info(ileft, String.format("addi %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IType ::= I_XORI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("xori", info(ileft, String.format("xori %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IType ::= I_ORI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("ori", info(ileft, String.format("ori %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IType ::= I_ANDI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("andi", info(ileft, String.format("andi %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IType ::= I_SLTI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("slti", info(ileft, String.format("slti %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IType ::= I_SLTIU Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("sltiu", info(ileft, String.format("sltiu %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IType ::= I_SLLI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Shift("slli", info(ileft, String.format("slli %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IType ::= I_SRLI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Shift("srli", info(ileft, String.format("srli %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IType ::= I_SRAI Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Shift("srai", info(ileft, String.format("srai %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IType ::= I_JALR Register Delimiter Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("jalr", info(ileft, String.format("jalr %s, %s, %d", rd, rs1, imm), Assembler.filename), rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IType ::= I_LB Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lb", info(ileft, String.format("lb %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IType ::= I_LBU Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lbu", info(ileft, String.format("lbu %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IType ::= I_LH Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lh", info(ileft, String.format("lh %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IType ::= I_LHU Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lhu", info(ileft, String.format("lhu %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IType ::= I_LW Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lw", info(ileft, String.format("lw %s, %d(%s)", rd, offset, rs1), Assembler.filename), rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IType ::= I_ECALL 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("ecall", info(ileft, "ecall", Assembler.filename), "x0", "x0", 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IType ::= I_BREAK 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("ebreak", info(ileft, "ebreak", Assembler.filename), "x0", "x0", 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IType ::= F_FLW FRegister Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  // hack to re-use IType Statement
                  int num = Globals.fregfile.getRegisterNumber(rd);
                  RESULT = new IType("flw", info(ileft, String.format("flw %s, %d(%s)", rd, offset, rs1), Assembler.filename), "x" + num, rs1, offset);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SType ::= I_SB Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SType("sb", info(ileft, String.format("sb %s, %d(%s)", rs2, offset, rs1), Assembler.filename), rs1, rs2, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SType ::= I_SH Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SType("sh", info(ileft, String.format("sh %s, %d(%s)", rs2, offset, rs1), Assembler.filename), rs1, rs2, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SType ::= I_SW Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SType("sw", info(ileft, String.format("sw %s, %d(%s)", rs2, offset, rs1), Assembler.filename), rs1, rs2, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SType ::= F_FSW FRegister Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  // hack to re-use SType Statement
                  int num = Globals.fregfile.getRegisterNumber(rs2);
                  RESULT = new SType("fsw", info(ileft, String.format("fsw %s, %d(%s)", rs2, offset, rs1), Assembler.filename), rs1, "x" + num, offset);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BType ::= I_BEQ Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("beq", info(ileft, String.format("beq %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BType ::= I_BNE Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bne", info(ileft, String.format("bne %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BType ::= I_BLT Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("blt", info(ileft, String.format("blt %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BType ::= I_BGE Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bge", info(ileft, String.format("bge %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BType ::= I_BLTU Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bltu", info(ileft, String.format("bltu %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BType ::= I_BGEU Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bgeu", info(ileft, String.format("bgeu %s, %s, %s", rs1, rs2, id), Assembler.filename), rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // UType ::= I_AUIPC Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UType("auipc", info(ileft, String.format("auipc %s, %d", rd, imm), Assembler.filename), rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // UType ::= I_LUI Register Delimiter Const 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UType("lui", info(ileft, String.format("lui %s, %d", rd, imm), Assembler.filename), rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // JType ::= I_JAL Register Delimiter Id 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", info(ileft, String.format("jal %s, %s", rd, id), Assembler.filename), rd, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PSeudos ::= I_LA Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                  DebugInfo debug = info(ileft, String.format("la %s, %s", rd, id), Assembler.filename);
                  stmts.add(new UType("auipc", debug, rd, new Relocation(Relocation.PCRELHI, id, debug)));
                  stmts.add(new IType("addi", debug, rd, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                  RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PSeudos ::= I_LI Register Delimiter Const 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(ileft, String.format("li %s, %d", rd, imm), Assembler.filename);
                  if (imm > 2047 || imm < -2048) {
                    int imm_hi =  ((imm >>> 12) + ((imm >>> 11) & 0x1)) & 0x000fffff;
                    int imm_lo = Data.signExtend((imm & 0xfff), 12);
                    ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                    stmts.add(new UType("lui", debug, rd, imm_hi));
                    stmts.add(new IType("addi", debug, rd, rd, imm_lo));
                    RESULT = stmts;
                  } else {
                    ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                    stmts.add(new IType("addi", debug, rd, "x0", imm));
                    RESULT = stmts;
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PSeudos ::= I_CALL Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(ileft, "call " + id, Assembler.filename);
                  ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                  stmts.add(new UType("auipc", debug, "x6", new Relocation(Relocation.PCRELHI, id, debug)));
                  stmts.add(new IType("jalr", debug, "x1", "x6", new Relocation(Relocation.PCRELLO, id, debug)));
                  RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PSeudos ::= I_TAIL Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(ileft, "tail " + id, Assembler.filename);
                  ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                  stmts.add(new UType("auipc", debug, "x6", new Relocation(Relocation.PCRELHI, id, debug)));
                  stmts.add(new IType("jalr", debug, "x0", "x6", new Relocation(Relocation.PCRELLO, id, debug)));
                  RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PSeudos ::= I_LB Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("lb %s, %s", rd, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rd, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new IType("lb", debug, rd, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PSeudos ::= I_LH Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("lh %s, %s", rd, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rd, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new IType("lh", debug, rd, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PSeudos ::= I_LW Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("lw %s, %s", rd, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rd, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new IType("lw", debug, rd, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PSeudos ::= F_FLW FRegister Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("flw %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   // hack to re-use IType Statement
                   int num = Globals.fregfile.getRegisterNumber(rd);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new IType("flw", debug, "x" + num, rt, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PSeudos ::= I_SB Register Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("sb %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new SType("sb", debug, rt, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PSeudos ::= I_SH Register Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("sb %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new SType("sh", debug, rt, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PSeudos ::= I_SW Register Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("sb %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new SType("sw", debug, rt, rd, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PSeudos ::= F_FSW FRegister Delimiter Id Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("sb %s, %s, %s", rd, id, rt), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(2);
                   // hack to re-use SType Statement
                   int num = Globals.fregfile.getRegisterNumber(rd);
                   stmts.add(new UType("auipc", debug, rt, new Relocation(Relocation.PCRELHI, id, debug)));
                   stmts.add(new SType("fsw", debug, rt, "x" + num, new Relocation(Relocation.PCRELLO, id, debug)));
                   RESULT = stmts;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PSeudos ::= I_NEG Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("neg %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new RType("sub", debug, rd, "x0", rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PSeudos ::= I_SNEZ Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("snez %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new RType("sltu", debug, rd, "x0", rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PSeudos ::= I_SLTZ Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("sltz %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new RType("slt", debug, rd, rs, "x0"));
                   RESULT = stmts;

                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PSeudos ::= I_SGTZ Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("sgtz %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new RType("slt", debug, rd, "x0", rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PSeudos ::= F_FMVS FRegister Delimiter FRegister 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("fmv.s %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new FRType("fsgnj.s", debug, rd, rs, rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PSeudos ::= F_FABSS FRegister Delimiter FRegister 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("fabs.s %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new FRType("fsgnjx.s", debug, rd, rs, rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PSeudos ::= F_FNEGS FRegister Delimiter FRegister 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("fneg.s %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new FRType("fsgnjn.s", debug, rd, rs, rs));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PSeudos ::= I_NOP 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, "nop", Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("addi", debug, "x0", "x0", 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PSeudos ::= I_MV Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("mv %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("addi", debug, rd, rs, 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PSeudos ::= I_NOT Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("not %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("xori", debug, rd, rs, -1));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PSeudos ::= I_SEQZ Register Delimiter Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("seqz %s, %s", rd, rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("sltiu", debug, rd, rs, 1));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PSeudos ::= I_JR Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("jr %s", rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("jalr", debug, "x0", rs, 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PSeudos ::= I_JALR Register 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("jalr %s", rs), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("jalr", debug, "x1", rs, 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PSeudos ::= I_RET 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, "ret", Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new IType("jalr", debug, "x0", "x1", 0));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PSeudos ::= I_BEQZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("beqz %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("beq", debug, rs, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PSeudos ::= I_BNEZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("bnez %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bne", debug, rs, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PSeudos ::= I_BLEZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("blez %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bge", debug, "x0", rs, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PSeudos ::= I_BGEZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("bgez %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bge", debug, rs, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PSeudos ::= I_BLTZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("bltz %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("blt", debug, rs, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PSeudos ::= I_BGTZ Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("bgtz %s, %s", rs, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("blt", debug, "x0", rs, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PSeudos ::= I_BGT Register Delimiter Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("bgt %s, %s, %s", rs1, rs2, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("blt", debug, rs2, rs1, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PSeudos ::= I_BLE Register Delimiter Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("ble %s, %s, %s", rs1, rs2, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bge", debug, rs2, rs1, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PSeudos ::= I_BGTU Register Delimiter Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("bgtu %s, %s, %s", rs1, rs2, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bltu", debug, rs2, rs1, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PSeudos ::= I_BLEU Register Delimiter Register Delimiter Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("bleu %s, %s, %s", rs1, rs2, id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new BType("bgeu", debug, rs2, rs1, id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PSeudos ::= I_JAL Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("jal %s", id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new JType("jal", debug, "x1", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PSeudos ::= I_J Id 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   DebugInfo debug = info(ileft, String.format("j %s", id), Assembler.filename);
                   ArrayList<Statement> stmts = new ArrayList<Statement>(1);
                   stmts.add(new JType("jal", debug, "x0", id));
                   RESULT = stmts;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Data ::= DataMode DataList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String mode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    int length = Data.WORD_LENGTH;
                    if (mode.equals(".byte"))
                      length = Data.BYTE_LENGTH;
                    else if (mode.equals(".half"))
                      length = Data.HALF_LENGTH;
                    for (int i = 0; i < l.size(); i++) {
                      int value = l.get(i);
                      // lossy conversion ?
                      if (length == Data.BYTE_LENGTH && !Data.validByte(value) && !Settings.QUIET) {
                        String filename = Assembler.filename;
                        int lineno = -1;
                        Message.warning(filename + ":" + "assembler:" + lineno + ": " + "lossy conversion to byte: '" + value + "' -> " + (byte)(value & Data.BYTE_MASK));
                      }
                      if (length == Data.HALF_LENGTH && !Data.validHalf(value) && !Settings.QUIET) {
                        String filename = Assembler.program.getFilename();
                        int lineno = -1;
                        Message.warning(filename + ":" + "assembler:" + lineno + ": " + "lossy conversion to half: '" + value + "' -> " + (short)(value & Data.HALF_MASK));
                      }
                      // store byte by byte
                      for (int j = 0; j < length; j++) {
                        byte byteVal = (byte)((value >>> (j * Data.BYTE_LENGTH_BITS)) & Data.BYTE_MASK);
                        Assembler.program.addByte(Assembler.segment, byteVal);
                      }
                    }
                  } else
                    Errors.add(info(-1, mode + " " + l, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Data ::= D_WORD IdList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    for (String id: l)
                      Assembler.program.addRef(Assembler.segment, new Relocation(Relocation.DEFAULT, id, info(modeleft, ".word " + l, Assembler.filename)));
                  } else
                    Errors.add(info(modeleft, ".word " + l, Assembler.filename), "assembler", mode + " directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Data ::= D_ASCIIZ Str 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    // scan char by char
                    for (int i = 0; i < s.length(); i++)
                      Assembler.program.addByte(Assembler.segment, (byte) s.charAt(i));
                    // null terminate string
                    Assembler.program.addByte(Assembler.segment, (byte) 0);
                  } else
                    Errors.add(info(modeleft, mode + " " + s, Assembler.filename), "assembler", ".string directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Data ::= D_ASCII Str 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    // scan char by char
                    for (int i = 0; i < s.length(); i++)
                      Assembler.program.addByte(Assembler.segment, (byte) s.charAt(i));
                  } else
                    Errors.add(info(modeleft, mode + " " + s, Assembler.filename), "assembler", ".string directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Data ::= D_ZERO Expr 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (e > 0) {
                    if (!(Assembler.segment == Segment.TEXT || Assembler.segment == Segment.RODATA))
                      for (int i = 0; i < e; i++)
                        Assembler.program.addByte(Assembler.segment, (byte) 0);
                    else
                      Errors.add(info(modeleft, ".zero " + e, Assembler.filename), "assembler", ".zero directive can not appear in " + Assembler.segment.toString().toLowerCase() + " segment");
                  } else
                    Errors.add(info(modeleft, ".zero " + e, Assembler.filename), "assembler", "invalid .zero argument: '" + e + "', expected value > 0");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Data ::= D_FLOAT FloatList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Float> l = (ArrayList<Float>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if ((Assembler.segment == Segment.DATA) || (Assembler.segment == Segment.RODATA)) {
                    for (int i = 0; i < l.size(); i++) {
                      int value = Float.floatToIntBits(l.get(i));
                      // store byte by byte
                      for (int j = 0; j < Data.WORD_LENGTH; j++) {
                        byte byteVal = (byte)((value >>> (j * Data.BYTE_LENGTH_BITS)) & Data.BYTE_MASK);
                        Assembler.program.addByte(Assembler.segment, byteVal);
                      }
                    }
                  } else
                    Errors.add(info(modeleft, ".float " + l, Assembler.filename), "assembler", ".float directive can not appear in " + Assembler.segment + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DataMode ::= D_BYTE 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DataMode ::= D_HALF 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DataMode ::= D_WORD 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DataList ::= Expr 
            {
              ArrayList<Integer> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<Integer> l = new ArrayList<Integer>();
                  l.add(e);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DataList ::= DataList COMMA Expr 
            {
              ArrayList<Integer> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(e);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IdList ::= Id 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<String> l = new ArrayList<String>();
                  l.add(id);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IdList ::= IdList COMMA Id 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(id);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FloatList ::= FExpr 
            {
              ArrayList<Float> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<Float> l = new ArrayList<Float>();
                  l.add(f);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FloatList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FloatList ::= FloatList COMMA FExpr 
            {
              ArrayList<Float> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Float> l = (ArrayList<Float>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(f);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FloatList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Directive ::= SectionDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Directive ::= SymbolDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Directive ::= AlignDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Directive ::= DOT Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Errors.add(info(ileft, "." + id, Assembler.filename), "assembler", "invalid directive: '." + id + "'"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SectionDir ::= D_SECTION Section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionDir",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SectionDir ::= Section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionDir",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Section ::= D_TEXT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.segment = Segment.TEXT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Section ::= D_DATA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.segment = Segment.DATA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Section ::= D_RODATA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.segment = Segment.RODATA; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Section ::= D_BSS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.segment = Segment.BSS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SymbolDir ::= D_GLOBL SymList 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(dleft, ".globl " + l, Assembler.filename);
                  for (String id: l) {
                    if(!Assembler.program.addGlobal(id, debug))
                      Errors.add(debug, "assembler", "label '" + id + "' is already defined as global");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymbolDir",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SymList ::= Id 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<String> ids = new ArrayList<String>();
                  ids.add(id);
                  RESULT = ids;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SymList ::= SymList COMMA Id 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(id);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // AlignDir ::= D_ALIGN Number 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(dleft, ".align " + e, Assembler.filename);
                  if (!(Assembler.segment == Segment.TEXT)) {
                    if (Data.inRange(e, 0, 2))
                      Assembler.program.align(e);
                    else
                      Errors.add(debug, "assembler", "invalid align value: '" + e + "', expected 0 (byte), 1 (half) or 2 (word)");
                  } else
                    Errors.add(debug, "assembler", ".align directive currently can not appear in text segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AlignDir",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // AlignDir ::= D_BALIGN Number 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  DebugInfo debug = info(dleft, ".balign " + e, Assembler.filename);
                  if (!(Assembler.segment == Segment.TEXT)) {
                    if (e > 0)
                      Assembler.program.balign(e);
                    else
                      Errors.add(debug, "assembler", "invalid align value: '" + e + "', expected value > 0");
                  } else
                    Errors.add(debug, "assembler", ".balign directive can not appear in text segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AlignDir",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Expr ::= Expr PLUS Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Expr ::= Expr MINUS Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Expr ::= Expr TIMES Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Expr ::= Expr DIVIDE Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (e2 == 0)
                    Errors.add(info(eleft, String.format("%d / %d", e1, e2), Assembler.filename), "assembler", "division by zero");
                  RESULT = e1 / e2;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Expr ::= Expr MOD Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (e2 == 0)
                    Errors.add(info(eleft, String.format("%d / %d", e1, e2), Assembler.filename), "assembler", "division by zero");
                  RESULT = e1 % e2;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Expr ::= Expr SLL Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 << e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Expr ::= Expr SRL Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 >>> e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Expr ::= Expr SRA Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 >> e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Expr ::= Expr AND Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 & e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Expr ::= Expr OR Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 | e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Expr ::= Expr XOR Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 ^ e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Expr ::= LPAREN Expr RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Expr ::= MINUS Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Expr ::= PLUS Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Expr ::= NEG Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ~e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Expr ::= Const 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FExpr ::= FExpr PLUS FExpr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FExpr ::= FExpr MINUS FExpr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FExpr ::= FExpr TIMES FExpr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FExpr ::= FExpr DIVIDE FExpr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FExpr ::= FExpr MOD FExpr 
            {
              Float RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 % e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FExpr ::= LPAREN FExpr RPAREN 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FExpr ::= MINUS FExpr 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // FExpr ::= PLUS FExpr 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FExpr ::= Float 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FExpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Const ::= Number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Const ::= Character 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Id ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Number ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Number ::= Hexnum 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Number ::= Binary 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Hexnum ::= HEXNUM 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Hexnum",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Binary ::= BINARY 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binary",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Float ::= FLOAT 
            {
              Float RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (float)f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Float",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Float ::= Hexnum 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Float.intBitsToFloat(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Float",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Float ::= Binary 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Float.intBitsToFloat(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Float",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Float ::= NUMBER 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((Integer) n).floatValue(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Float",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Character ::= CHARACTER 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)((char) c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Character",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Str ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Str",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Register ::= REGISTER 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)reg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Register",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // FRegister ::= FREGISTER 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)reg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FRegister",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Delimiter ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Delimiter",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Delimiter ::= Epsilon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Delimiter",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Epsilon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Epsilon",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
