
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package vsim.assembler;

import java.io.Reader;
import java_cup.runtime.*;
import java.util.ArrayList;
import vsim.assembler.statements.*;
import vsim.assembler.SymbolTable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\010\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\011\000\002\006\011\000\002\006\011\000" +
    "\002\006\011\000\002\006\011\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\007\007\000\002\007" +
    "\011\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\010\010\000\002\010\010\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\010\000\002\010\010\000" +
    "\002\010\010\000\002\010\010\000\002\010\010\000\002" +
    "\010\010\000\002\010\010\000\002\010\010\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\011\006\000" +
    "\002\011\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\013\006\000\002\013\006\000\002\013\003" +
    "\000\002\013\004\000\002\013\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\003\000\002\022\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\004\000" +
    "\002\024\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\025\004\000\002\025" +
    "\004\000\002\026\004\000\002\027\004\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\003\000\002\035\003\000\002" +
    "\036\003\000\002\034\003\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\260\026\006\027\136\030\057\031\143\032" +
    "\130\033\115\034\031\035\026\036\073\037\017\040\014" +
    "\041\160\042\056\043\117\044\105\045\055\046\152\047" +
    "\157\050\015\051\021\052\120\053\100\054\107\055\027" +
    "\056\065\057\061\060\076\061\070\062\155\063\131\064" +
    "\113\065\053\066\135\067\111\070\046\071\034\072\043" +
    "\073\037\074\024\075\110\076\103\077\042\100\041\101" +
    "\020\102\060\103\112\104\050\105\007\106\040\107\156" +
    "\110\004\111\127\112\137\113\102\114\023\115\054\116" +
    "\066\117\012\120\022\121\052\122\121\123\141\124\125" +
    "\125\154\126\142\127\025\130\144\131\101\132\104\133" +
    "\071\134\062\141\005\142\134\143\072\144\045\145\132" +
    "\146\150\147\145\150\035\151\016\152\106\153\075\154" +
    "\124\155\036\156\126\157\064\160\114\001\002\000\004" +
    "\140\161\001\002\000\004\005\u014c\001\002\000\004\140" +
    "\uffa4\001\002\000\004\002\uffc9\001\002\000\016\006\344" +
    "\013\340\014\334\023\343\135\174\137\336\001\002\000" +
    "\004\002\ufff7\001\002\000\004\140\161\001\002\000\004" +
    "\002\u0143\001\002\000\004\140\uffbc\001\002\000\004\140" +
    "\uffe2\001\002\000\004\002\uff82\001\002\000\004\140\uffbd" +
    "\001\002\000\004\140\uffc6\001\002\000\004\140\uffe3\001" +
    "\002\000\004\140\161\001\002\000\004\140\161\001\002" +
    "\000\004\140\161\001\002\000\004\140\161\001\002\000" +
    "\004\140\161\001\002\000\004\140\uffe4\001\002\000\004" +
    "\140\161\001\002\000\004\140\161\001\002\000\004\002" +
    "\uff86\001\002\000\236\002\ufffe\026\006\027\136\030\057" +
    "\031\143\032\130\033\115\034\031\035\026\036\073\037" +
    "\017\040\014\041\160\042\056\043\117\044\105\045\055" +
    "\046\152\047\157\050\015\051\021\052\120\053\100\054" +
    "\107\055\027\056\065\057\061\060\076\061\070\062\155" +
    "\063\131\064\113\065\053\066\135\067\111\070\046\071" +
    "\034\072\043\073\037\074\024\075\110\076\103\077\042" +
    "\100\041\101\020\102\060\103\112\104\050\105\007\106" +
    "\040\107\156\110\004\111\127\112\137\113\102\114\023" +
    "\115\054\116\066\117\012\120\022\121\052\122\121\123" +
    "\141\124\125\125\154\126\142\127\025\130\144\131\101" +
    "\132\104\133\071\134\062\142\134\143\072\144\045\145" +
    "\132\146\150\147\145\001\002\000\004\140\161\001\002" +
    "\000\012\151\016\152\106\153\075\154\124\001\002\000" +
    "\016\006\344\013\340\014\334\023\343\135\174\137\336" +
    "\001\002\000\004\140\161\001\002\000\004\140\161\001" +
    "\002\000\004\140\uffc0\001\002\000\004\140\uffc1\001\002" +
    "\000\004\140\161\001\002\000\004\002\ufff9\001\002\000" +
    "\016\006\344\013\340\014\334\023\343\135\174\137\336" +
    "\001\002\000\004\140\161\001\002\000\004\002\ufff6\001" +
    "\002\000\004\140\161\001\002\000\004\002\uff88\001\002" +
    "\000\004\140\161\001\002\000\004\140\uffc2\001\002\000" +
    "\004\140\161\001\002\000\004\140\uffdf\001\002\000\004" +
    "\140\uffea\001\002\000\004\140\uff9f\001\002\000\004\140" +
    "\uffc7\001\002\000\004\140\uffe5\001\002\000\004\141\176" +
    "\001\002\000\004\002\uff87\001\002\000\004\141\176\001" +
    "\002\000\004\140\uffed\001\002\000\004\140\161\001\002" +
    "\000\004\002\ufffc\001\002\000\004\140\uffec\001\002\000" +
    "\004\141\176\001\002\000\004\136\234\001\002\000\010" +
    "\135\174\140\161\141\176\001\002\000\004\002\uff83\001" +
    "\002\000\004\002\uff80\001\002\000\004\140\uffeb\001\002" +
    "\000\004\002\ufffd\001\002\000\004\140\uffdc\001\002\000" +
    "\004\140\161\001\002\000\004\140\161\001\002\000\004" +
    "\140\uffc8\001\002\000\004\002\uff94\001\002\000\004\140" +
    "\uffde\001\002\000\004\002\uff81\001\002\000\004\140\uffdd" +
    "\001\002\000\004\140\uffc3\001\002\000\004\140\161\001" +
    "\002\000\004\140\uffc4\001\002\000\004\140\uffc5\001\002" +
    "\000\004\136\234\001\002\000\004\140\uffa3\001\002\000" +
    "\004\002\ufff5\001\002\000\004\140\uffe6\001\002\000\004" +
    "\140\uffe7\001\002\000\004\140\161\001\002\000\004\140" +
    "\161\001\002\000\004\002\ufffb\001\002\000\004\002\uff7f" +
    "\001\002\000\004\140\161\001\002\000\004\141\176\001" +
    "\002\000\004\140\161\001\002\000\004\140\uffa0\001\002" +
    "\000\004\140\uffe8\001\002\000\016\006\uff8d\013\uff8d\014" +
    "\uff8d\023\uff8d\135\uff8d\137\uff8d\001\002\000\004\002\ufff4" +
    "\001\002\000\004\136\234\001\002\000\004\002\uffca\001" +
    "\002\000\004\140\uffa1\001\002\000\004\140\161\001\002" +
    "\000\004\002\uff85\001\002\000\004\140\161\001\002\000" +
    "\004\140\161\001\002\000\004\140\uffa2\001\002\000\006" +
    "\135\174\141\176\001\002\000\016\006\uff8b\013\uff8b\014" +
    "\uff8b\023\uff8b\135\uff8b\137\uff8b\001\002\000\004\140\161" +
    "\001\002\000\004\002\ufff3\001\002\000\016\006\uff8c\013" +
    "\uff8c\014\uff8c\023\uff8c\135\uff8c\137\uff8c\001\002\000\004" +
    "\002\ufff8\001\002\000\004\140\uffe1\001\002\000\004\140" +
    "\161\001\002\000\004\140\161\001\002\000\004\140\uffe9" +
    "\001\002\000\004\140\161\001\002\000\004\140\uffe0\001" +
    "\002\000\004\140\uffbb\001\002\000\016\002\uff64\004\uff64" +
    "\007\uff64\135\uff64\140\uff64\141\uff64\001\002\000\006\004" +
    "\163\140\uff61\001\002\000\022\006\uff63\013\uff63\014\uff63" +
    "\023\uff63\135\uff63\137\uff63\140\uff63\141\uff63\001\002\000" +
    "\004\140\161\001\002\000\022\006\uff62\013\uff62\014\uff62" +
    "\023\uff62\135\uff62\137\uff62\140\uff62\141\uff62\001\002\000" +
    "\004\002\uffcf\001\002\000\006\004\163\140\uff61\001\002" +
    "\000\004\140\161\001\002\000\010\004\163\135\uff61\141" +
    "\uff61\001\002\000\006\135\174\141\176\001\002\000\004" +
    "\002\uffa7\001\002\000\046\002\uff67\004\uff67\006\uff67\007" +
    "\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67" +
    "\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\135" +
    "\uff67\137\uff67\001\002\000\004\002\uffab\001\002\000\004" +
    "\002\uff68\001\002\000\006\004\163\140\uff61\001\002\000" +
    "\004\140\161\001\002\000\010\004\163\135\uff61\141\uff61" +
    "\001\002\000\006\135\174\141\176\001\002\000\004\002" +
    "\uffb9\001\002\000\004\002\uffba\001\002\000\010\004\163" +
    "\135\uff61\140\uff61\001\002\000\006\135\174\140\161\001" +
    "\002\000\004\006\212\001\002\000\004\135\174\001\002" +
    "\000\004\002\uffbf\001\002\000\004\140\161\001\002\000" +
    "\004\007\214\001\002\000\004\002\uffbe\001\002\000\004" +
    "\002\uff97\001\002\000\004\002\uff98\001\002\000\006\004" +
    "\163\140\uff61\001\002\000\004\140\161\001\002\000\010" +
    "\004\163\135\uff61\141\uff61\001\002\000\006\135\174\141" +
    "\176\001\002\000\004\002\uffa6\001\002\000\004\002\uffaa" +
    "\001\002\000\010\004\163\135\uff61\141\uff61\001\002\000" +
    "\006\135\174\141\176\001\002\000\004\002\uffb3\001\002" +
    "\000\004\002\uffad\001\002\000\006\004\163\140\uff61\001" +
    "\002\000\004\140\161\001\002\000\004\002\uffcd\001\002" +
    "\000\004\002\uff65\001\002\000\004\002\uff90\001\002\000" +
    "\006\004\163\140\uff61\001\002\000\004\140\161\001\002" +
    "\000\004\002\ufff1\001\002\000\004\002\uff7e\001\002\000" +
    "\006\004\163\140\uff61\001\002\000\004\140\161\001\002" +
    "\000\010\004\163\135\uff61\141\uff61\001\002\000\006\135" +
    "\174\141\176\001\002\000\004\002\uffa8\001\002\000\004" +
    "\002\uffac\001\002\000\006\004\163\140\uff61\001\002\000" +
    "\004\140\161\001\002\000\006\004\163\135\uff61\001\002" +
    "\000\004\135\174\001\002\000\004\002\uffdb\001\002\000" +
    "\010\004\163\135\uff61\141\uff61\001\002\000\006\135\174" +
    "\141\176\001\002\000\004\002\uffb4\001\002\000\004\002" +
    "\uffae\001\002\000\004\002\uff7b\001\002\000\010\002\uffcb" +
    "\004\163\140\uff61\001\002\000\004\140\161\001\002\000" +
    "\006\004\163\135\uff61\001\002\000\004\135\174\001\002" +
    "\000\004\002\uffda\001\002\000\006\004\163\140\uff61\001" +
    "\002\000\004\140\161\001\002\000\004\002\ufff0\001\002" +
    "\000\004\002\uffcc\001\002\000\004\002\uff99\001\002\000" +
    "\004\002\uff9a\001\002\000\010\004\163\135\uff61\141\uff61" +
    "\001\002\000\006\135\174\141\176\001\002\000\004\002" +
    "\uff9b\001\002\000\004\002\uff9c\001\002\000\004\002\uff8f" +
    "\001\002\000\004\002\uff93\001\002\000\010\004\163\135" +
    "\uff61\141\uff61\001\002\000\006\135\174\141\176\001\002" +
    "\000\004\002\uffb8\001\002\000\004\002\uffb2\001\002\000" +
    "\004\002\uff7d\001\002\000\004\002\uff92\001\002\000\006" +
    "\004\163\140\uff61\001\002\000\004\140\161\001\002\000" +
    "\004\002\uffee\001\002\000\010\004\163\135\uff61\141\uff61" +
    "\001\002\000\006\135\174\141\176\001\002\000\004\002" +
    "\uffb5\001\002\000\004\002\uffaf\001\002\000\006\004\163" +
    "\141\uff61\001\002\000\004\141\176\001\002\000\004\002" +
    "\uff96\001\002\000\010\004\163\135\uff61\140\uff61\001\002" +
    "\000\006\135\174\140\161\001\002\000\004\006\331\001" +
    "\002\000\006\004\163\135\uff61\001\002\000\004\135\174" +
    "\001\002\000\004\002\uffd9\001\002\000\004\140\161\001" +
    "\002\000\004\007\333\001\002\000\004\002\uffd4\001\002" +
    "\000\016\006\344\013\340\014\334\023\343\135\174\137" +
    "\336\001\002\000\046\002\uff6b\004\uff6b\006\uff6b\007\uff6b" +
    "\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\016" +
    "\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\023\uff6b\135\uff6b" +
    "\137\uff6b\001\002\000\046\002\uff66\004\uff66\006\uff66\007" +
    "\uff66\010\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66" +
    "\016\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\135" +
    "\uff66\137\uff66\001\002\000\032\002\uff8e\010\360\011\351" +
    "\012\354\013\355\014\346\015\353\016\352\017\356\020" +
    "\347\021\361\022\350\001\002\000\016\006\344\013\340" +
    "\014\334\023\343\135\174\137\336\001\002\000\046\002" +
    "\uff6a\004\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\135\uff6a\137\uff6a\001\002\000\046" +
    "\002\uff69\004\uff69\006\uff69\007\uff69\010\uff69\011\uff69\012" +
    "\uff69\013\uff69\014\uff69\015\uff69\016\uff69\017\uff69\020\uff69" +
    "\021\uff69\022\uff69\023\uff69\135\uff69\137\uff69\001\002\000" +
    "\016\006\344\013\340\014\334\023\343\135\174\137\336" +
    "\001\002\000\016\006\344\013\340\014\334\023\343\135" +
    "\174\137\336\001\002\000\032\007\357\010\360\011\351" +
    "\012\354\013\355\014\346\015\353\016\352\017\356\020" +
    "\347\021\361\022\350\001\002\000\016\006\344\013\340" +
    "\014\334\023\343\135\174\137\336\001\002\000\016\006" +
    "\344\013\340\014\334\023\343\135\174\137\336\001\002" +
    "\000\016\006\344\013\340\014\334\023\343\135\174\137" +
    "\336\001\002\000\016\006\344\013\340\014\334\023\343" +
    "\135\174\137\336\001\002\000\016\006\344\013\340\014" +
    "\334\023\343\135\174\137\336\001\002\000\016\006\344" +
    "\013\340\014\334\023\343\135\174\137\336\001\002\000" +
    "\016\006\344\013\340\014\334\023\343\135\174\137\336" +
    "\001\002\000\016\006\344\013\340\014\334\023\343\135" +
    "\174\137\336\001\002\000\016\006\344\013\340\014\334" +
    "\023\343\135\174\137\336\001\002\000\046\002\uff6f\004" +
    "\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f" +
    "\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022" +
    "\uff6f\023\uff6f\135\uff6f\137\uff6f\001\002\000\016\006\344" +
    "\013\340\014\334\023\343\135\174\137\336\001\002\000" +
    "\016\006\344\013\340\014\334\023\343\135\174\137\336" +
    "\001\002\000\046\002\uff71\004\uff71\006\uff71\007\uff71\010" +
    "\360\011\351\012\354\013\355\014\346\015\353\016\352" +
    "\017\356\020\347\021\uff71\022\350\023\uff71\135\uff71\137" +
    "\uff71\001\002\000\046\002\uff78\004\uff78\006\uff78\007\uff78" +
    "\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016" +
    "\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\135\uff78" +
    "\137\uff78\001\002\000\046\002\uff73\004\uff73\006\uff73\007" +
    "\uff73\010\360\011\351\012\354\013\355\014\346\015\uff73" +
    "\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\135" +
    "\uff73\137\uff73\001\002\000\046\002\uff7a\004\uff7a\006\uff7a" +
    "\007\uff7a\010\360\011\351\012\354\013\uff7a\014\uff7a\015" +
    "\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a" +
    "\135\uff7a\137\uff7a\001\002\000\046\002\uff76\004\uff76\006" +
    "\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76" +
    "\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023" +
    "\uff76\135\uff76\137\uff76\001\002\000\046\002\uff75\004\uff75" +
    "\006\uff75\007\uff75\010\360\011\351\012\354\013\355\014" +
    "\346\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75" +
    "\023\uff75\135\uff75\137\uff75\001\002\000\046\002\uff74\004" +
    "\uff74\006\uff74\007\uff74\010\360\011\351\012\354\013\355" +
    "\014\346\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022" +
    "\uff74\023\uff74\135\uff74\137\uff74\001\002\000\046\002\uff77" +
    "\004\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013" +
    "\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77" +
    "\022\uff77\023\uff77\135\uff77\137\uff77\001\002\000\046\002" +
    "\uff70\004\uff70\006\uff70\007\uff70\010\360\011\351\012\354" +
    "\013\355\014\346\015\353\016\352\017\356\020\347\021" +
    "\uff70\022\uff70\023\uff70\135\uff70\137\uff70\001\002\000\046" +
    "\002\uff72\004\uff72\006\uff72\007\uff72\010\360\011\351\012" +
    "\354\013\355\014\346\015\353\016\352\017\356\020\uff72" +
    "\021\uff72\022\uff72\023\uff72\135\uff72\137\uff72\001\002\000" +
    "\046\002\uff79\004\uff79\006\uff79\007\uff79\010\360\011\351" +
    "\012\354\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020" +
    "\uff79\021\uff79\022\uff79\023\uff79\135\uff79\137\uff79\001\002" +
    "\000\046\002\uff6c\004\uff6c\006\uff6c\007\uff6c\010\uff6c\011" +
    "\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c" +
    "\020\uff6c\021\uff6c\022\uff6c\023\uff6c\135\uff6c\137\uff6c\001" +
    "\002\000\046\002\uff6d\004\uff6d\006\uff6d\007\uff6d\010\uff6d" +
    "\011\uff6d\012\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\017" +
    "\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\135\uff6d\137\uff6d" +
    "\001\002\000\046\002\uff6e\004\uff6e\006\uff6e\007\uff6e\010" +
    "\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e" +
    "\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\135\uff6e\137" +
    "\uff6e\001\002\000\010\004\163\135\uff61\140\uff61\001\002" +
    "\000\006\135\174\140\161\001\002\000\004\006\u0106\001" +
    "\002\000\006\004\163\135\uff61\001\002\000\004\135\174" +
    "\001\002\000\004\002\uffd7\001\002\000\004\140\161\001" +
    "\002\000\004\007\u0108\001\002\000\004\002\uffd2\001\002" +
    "\000\006\004\163\135\uff61\001\002\000\004\135\174\001" +
    "\002\000\004\002\uff95\001\002\000\010\004\163\135\uff61" +
    "\140\uff61\001\002\000\006\135\174\140\161\001\002\000" +
    "\004\006\u0112\001\002\000\006\004\163\135\uff61\001\002" +
    "\000\004\135\174\001\002\000\004\002\uffd6\001\002\000" +
    "\004\140\161\001\002\000\004\007\u0114\001\002\000\004" +
    "\002\uffd1\001\002\000\032\002\uff7c\010\360\011\351\012" +
    "\354\013\355\014\346\015\353\016\352\017\356\020\347" +
    "\021\361\022\350\001\002\000\004\002\uff84\001\002\000" +
    "\010\004\163\135\uff61\140\uff61\001\002\000\006\135\174" +
    "\140\161\001\002\000\004\006\u011d\001\002\000\006\004" +
    "\163\135\uff61\001\002\000\004\135\174\001\002\000\004" +
    "\002\uffd8\001\002\000\004\140\161\001\002\000\004\007" +
    "\u011f\001\002\000\004\002\uffd3\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\006\004\163\135" +
    "\uff61\001\002\000\004\135\174\001\002\000\004\002\uff9d" +
    "\001\002\000\006\004\163\140\uff61\001\002\000\004\140" +
    "\161\001\002\000\006\004\163\140\uff61\001\002\000\004" +
    "\140\161\001\002\000\004\002\ufff2\001\002\000\006\004" +
    "\163\135\uff61\001\002\000\004\135\174\001\002\000\004" +
    "\002\uff9e\001\002\000\006\004\163\140\uff61\001\002\000" +
    "\004\140\161\001\002\000\010\004\163\135\uff61\141\uff61" +
    "\001\002\000\006\135\174\141\176\001\002\000\004\002" +
    "\uffa5\001\002\000\004\002\uffa9\001\002\000\010\004\163" +
    "\135\uff61\140\uff61\001\002\000\006\135\174\140\161\001" +
    "\002\000\004\006\u0139\001\002\000\006\004\163\135\uff61" +
    "\001\002\000\004\135\174\001\002\000\004\002\uffd5\001" +
    "\002\000\004\140\161\001\002\000\004\007\u013b\001\002" +
    "\000\004\002\uffd0\001\002\000\006\004\163\140\uff61\001" +
    "\002\000\004\140\161\001\002\000\004\002\uffef\001\002" +
    "\000\010\004\163\135\uff61\141\uff61\001\002\000\006\135" +
    "\174\141\176\001\002\000\004\002\uffb6\001\002\000\004" +
    "\002\uffb0\001\002\000\004\002\000\001\002\000\010\004" +
    "\163\135\uff61\141\uff61\001\002\000\006\135\174\141\176" +
    "\001\002\000\004\002\uffb7\001\002\000\004\002\uffb1\001" +
    "\002\000\044\002\uff8a\004\uff8a\006\uff8a\010\360\011\351" +
    "\012\354\013\355\014\346\015\353\016\352\017\356\020" +
    "\347\021\361\022\350\023\uff8a\135\uff8a\137\uff8a\001\002" +
    "\000\022\002\uff91\004\163\006\uff61\013\uff61\014\uff61\023" +
    "\uff61\135\uff61\137\uff61\001\002\000\016\006\344\013\340" +
    "\014\334\023\343\135\174\137\336\001\002\000\044\002" +
    "\uff89\004\uff89\006\uff89\010\360\011\351\012\354\013\355" +
    "\014\346\015\353\016\352\017\356\020\347\021\361\022" +
    "\350\023\uff89\135\uff89\137\uff89\001\002\000\236\002\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103" +
    "\ufffa\104\ufffa\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa" +
    "\112\ufffa\113\ufffa\114\ufffa\115\ufffa\116\ufffa\117\ufffa\120" +
    "\ufffa\121\ufffa\122\ufffa\123\ufffa\124\ufffa\125\ufffa\126\ufffa" +
    "\127\ufffa\130\ufffa\131\ufffa\132\ufffa\133\ufffa\134\ufffa\142" +
    "\ufffa\143\ufffa\144\ufffa\145\ufffa\146\ufffa\147\ufffa\001\002" +
    "\000\006\004\163\140\uff61\001\002\000\004\140\161\001" +
    "\002\000\004\002\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\056\002\012\003\032\004\076\005\043\006" +
    "\150\007\010\010\046\011\115\012\132\013\146\014\027" +
    "\015\121\016\145\017\152\020\066\021\007\023\122\024" +
    "\050\025\062\026\031\027\137\030\073\001\001\000\004" +
    "\037\u014c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\u0148\031\u0147\032\334\035\340" +
    "\036\341\001\001\000\002\001\001\000\004\037\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u013e\001\001\000\004\037\u013b" +
    "\001\001\000\004\037\u0132\001\001\000\004\037\u012c\001" +
    "\001\000\004\037\u0129\001\001\000\002\001\001\000\004" +
    "\037\u0124\001\001\000\004\037\u0121\001\001\000\002\001" +
    "\001\000\036\004\u0120\005\043\006\150\007\010\010\046" +
    "\011\115\012\132\013\146\014\027\015\121\016\145\017" +
    "\152\020\u011f\021\007\001\001\000\004\037\u0116\001\001" +
    "\000\004\030\u0115\001\001\000\012\031\u0114\032\334\035" +
    "\340\036\341\001\001\000\004\037\u010b\001\001\000\004" +
    "\037\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\377\001\001\000\002\001\001\000\012\031\336" +
    "\032\334\035\340\036\341\001\001\000\004\037\322\001" +
    "\001\000\002\001\001\000\004\037\317\001\001\000\002" +
    "\001\001\000\004\037\313\001\001\000\002\001\001\000" +
    "\004\037\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\307\001\001\000\002\001\001\000\004\033\306" +
    "\001\001\000\002\001\001\000\004\037\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\301\001\001" +
    "\000\004\034\300\001\001\000\010\033\272\035\273\037" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\271\001\001\000\004\037\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\254\001\001\000\004\037" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\241\001\001\000\004\033\240\001\001\000\004\037" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\230\001\001" +
    "\000\002\001\001\000\004\037\224\001\001\000\004\037" +
    "\216\001\001\000\002\001\001\000\006\033\214\035\215" +
    "\001\001\000\002\001\001\000\004\037\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\176\001\001\000\004\037\166\001" +
    "\001\000\002\001\001\000\004\037\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\163\041\164\001\001\000\002\001\001\000\004\037\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\167\041\164\001\001\000\004\037\170\001\001\000\006" +
    "\040\171\041\164\001\001\000\006\033\172\035\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\177\041\164\001\001\000" +
    "\004\037\200\001\001\000\006\040\201\041\164\001\001" +
    "\000\006\033\202\035\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\205\041\164\001\001\000\006" +
    "\035\206\037\207\001\001\000\002\001\001\000\004\035" +
    "\210\001\001\000\002\001\001\000\004\037\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\217\041\164\001\001\000\004" +
    "\037\220\001\001\000\006\040\221\041\164\001\001\000" +
    "\006\033\222\035\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\225\041\164\001\001\000\006\033" +
    "\226\035\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\231\041\164\001\001\000\004\037\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\236\041\164\001\001\000\004\037\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\242" +
    "\041\164\001\001\000\004\037\243\001\001\000\006\040" +
    "\244\041\164\001\001\000\006\033\245\035\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\250\041" +
    "\164\001\001\000\004\037\251\001\001\000\006\040\252" +
    "\041\164\001\001\000\004\035\253\001\001\000\002\001" +
    "\001\000\006\040\255\041\164\001\001\000\006\033\256" +
    "\035\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\262\041\164\001\001\000\004" +
    "\037\263\001\001\000\006\040\264\041\164\001\001\000" +
    "\004\035\265\001\001\000\002\001\001\000\006\040\267" +
    "\041\164\001\001\000\004\037\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\275\041\164\001\001\000\006\033\276\035" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\303\041\164\001" +
    "\001\000\006\033\304\035\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\311\041\164\001\001\000\004\037\312\001\001" +
    "\000\002\001\001\000\006\040\314\041\164\001\001\000" +
    "\006\033\315\035\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\320\041\164\001\001\000\004\033" +
    "\321\001\001\000\002\001\001\000\006\040\323\041\164" +
    "\001\001\000\006\035\324\037\325\001\001\000\002\001" +
    "\001\000\006\040\326\041\164\001\001\000\004\035\327" +
    "\001\001\000\002\001\001\000\004\037\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\376\032\334" +
    "\035\340\036\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\375\032\334\035\340" +
    "\036\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\374\032\334\035\340\036\341\001\001\000\012" +
    "\031\344\032\334\035\340\036\341\001\001\000\002\001" +
    "\001\000\012\031\373\032\334\035\340\036\341\001\001" +
    "\000\012\031\372\032\334\035\340\036\341\001\001\000" +
    "\012\031\371\032\334\035\340\036\341\001\001\000\012" +
    "\031\370\032\334\035\340\036\341\001\001\000\012\031" +
    "\367\032\334\035\340\036\341\001\001\000\012\031\366" +
    "\032\334\035\340\036\341\001\001\000\012\031\365\032" +
    "\334\035\340\036\341\001\001\000\012\031\364\032\334" +
    "\035\340\036\341\001\001\000\012\031\363\032\334\035" +
    "\340\036\341\001\001\000\002\001\001\000\012\031\362" +
    "\032\334\035\340\036\341\001\001\000\012\031\361\032" +
    "\334\035\340\036\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\u0100\041\164\001\001\000\006\035\u0101\037\u0102\001" +
    "\001\000\002\001\001\000\006\040\u0103\041\164\001\001" +
    "\000\004\035\u0104\001\001\000\002\001\001\000\004\037" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\u0109\041\164\001\001\000\004\035\u010a\001\001\000" +
    "\002\001\001\000\006\040\u010c\041\164\001\001\000\006" +
    "\035\u010d\037\u010e\001\001\000\002\001\001\000\006\040" +
    "\u010f\041\164\001\001\000\004\035\u0110\001\001\000\002" +
    "\001\001\000\004\037\u0112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\u0117\041\164\001\001\000\006\035\u0118\037\u0119\001" +
    "\001\000\002\001\001\000\006\040\u011a\041\164\001\001" +
    "\000\004\035\u011b\001\001\000\002\001\001\000\004\037" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\u0122\041\164\001" +
    "\001\000\004\035\u0123\001\001\000\002\001\001\000\006" +
    "\040\u0125\041\164\001\001\000\004\037\u0126\001\001\000" +
    "\006\040\u0127\041\164\001\001\000\004\037\u0128\001\001" +
    "\000\002\001\001\000\006\040\u012a\041\164\001\001\000" +
    "\004\035\u012b\001\001\000\002\001\001\000\006\040\u012d" +
    "\041\164\001\001\000\004\037\u012e\001\001\000\006\040" +
    "\u012f\041\164\001\001\000\006\033\u0130\035\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\u0133\041" +
    "\164\001\001\000\006\035\u0134\037\u0135\001\001\000\002" +
    "\001\001\000\006\040\u0136\041\164\001\001\000\004\035" +
    "\u0137\001\001\000\002\001\001\000\004\037\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\u013c\041" +
    "\164\001\001\000\004\037\u013d\001\001\000\002\001\001" +
    "\000\006\040\u013f\041\164\001\001\000\006\033\u0140\035" +
    "\u0141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\u0144\041\164\001\001\000\006\033" +
    "\u0145\035\u0146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\u0149\041\164\001\001\000" +
    "\012\031\u014a\032\334\035\340\036\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\u014d\041\164\001" +
    "\001\000\004\037\u014e\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public Parser(Reader input) {
    super(new Lexer(input));
  }

  public void syntax_error(Symbol cur_token) {
    System.out.println(Token.terminalNames[cur_token.sym] + " " + cur_token.value);
  }

  public void unrecovered_syntax_error(Symbol cur_token) {
    // NOTHING
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Statement ::= Label Instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= Label Data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= Label 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= Instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= Data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= Directive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Label ::= IDENTIFIER COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Label",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= RType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= IType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruction ::= SType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruction ::= BType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= UType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= JType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruction ::= PSeudos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RType ::= ROpCode Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType(opcode, rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RType ::= I_NEG Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sub", rd, "x0", rs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RType ::= I_SNEZ Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("sltu", rd, "x0", rs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RType ::= I_SLTZ Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("slt", rd, rs, "x0"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RType ::= I_SGTZ Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType("slt", rd, "x0", rs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ROpCode ::= I_SLL 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ROpCode ::= I_SRL 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ROpCode ::= I_SRA 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ROpCode ::= I_ADD 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ROpCode ::= I_SUB 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ROpCode ::= I_XOR 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ROpCode ::= I_OR 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ROpCode ::= I_AND 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ROpCode ::= I_SLT 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ROpCode ::= I_SLTU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ROpCode ::= I_MUL 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ROpCode ::= I_MULH 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ROpCode ::= I_MULHSU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ROpCode ::= I_MULHU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ROpCode ::= I_DIV 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ROpCode ::= I_DIVU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ROpCode ::= I_REM 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ROpCode ::= I_REMU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IType ::= IOpCode Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType(opcode, rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IType ::= I_JALR Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("jalr", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IType ::= I_LB Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lb", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IType ::= I_LBU Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lbu", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IType ::= I_LH Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lh", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IType ::= I_LHU Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lhu", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IType ::= I_LW Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lw", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IType ::= I_LB Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lb", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IType ::= I_LBU Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lbu", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IType ::= I_LH Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lh", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IType ::= I_LHU Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lhu", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IType ::= I_LW Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lw", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IType ::= I_MV Register Delimiter Register 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("addi", rd, rs, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IType ::= I_NOT Register Delimiter Register 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("xori", rd, rs, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IType ::= I_SEQZ Register Delimiter Register 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("sltiu", rd, rs, 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IType ::= I_JR Register 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("jalr", "x0", rs, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IType ::= I_JALR Register 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("jalr", "x1", rs, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IType ::= I_ECALL 
            {
              Statement RESULT =null;
		 RESULT = new IType("ecall", "x0", "x0", 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IType ::= I_NOP 
            {
              Statement RESULT =null;
		 RESULT = new IType("addi", "x0", "x0", 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IOpCode ::= I_SLLI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IOpCode ::= I_SRLI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IOpCode ::= I_SRAI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IOpCode ::= I_ADDI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IOpCode ::= I_XORI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IOpCode ::= I_ORI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IOpCode ::= I_ANDI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOpCode ::= I_SLTI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOpCode ::= I_SLTIU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SType ::= SOpCode Register Delimiter Register Number 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SType(opcode, rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SType ::= SOpCode Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SType(opcode, rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SOpCode ::= I_SB 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SOpCode ::= I_SH 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SOpCode ::= I_SW 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BType ::= BOpCode Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType(opcode, rs1, rs2, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BType ::= BOpCode Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType(opcode, rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BType ::= I_BEQZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("beq", rs, "x0", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BType ::= I_BNEZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bne", rs, "x0", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BType ::= I_BLEZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bge", "x0", rs, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BType ::= I_BGEZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bge", rs, "x0", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BType ::= I_BLTZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("blt", rs, "x0", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BType ::= I_BGTZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("blt", "x0", rs, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BType ::= I_BEQZ Register Delimiter Number 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("beq", rs, "x0", imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BType ::= I_BNEZ Register Delimiter Number 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bne", rs, "x0", imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BType ::= I_BLEZ Register Delimiter Number 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bge", "x0", rs, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BType ::= I_BGEZ Register Delimiter Number 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bge", rs, "x0", imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BType ::= I_BLTZ Register Delimiter Number 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("blt", rs, "x0", imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BType ::= I_BGTZ Register Delimiter Number 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("blt", "x0", rs, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BType ::= I_BGT Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("blt", rs2, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BType ::= I_BLE Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bge", rs2, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BType ::= I_BGTU Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bltu", rs2, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BType ::= I_BLEU Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bgeu", rs2, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BType ::= I_BGT Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("blt", rs2, rs1, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BType ::= I_BLE Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bge", rs2, rs1, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BType ::= I_BGTU Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bltu", rs2, rs1, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BType ::= I_BLEU Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType("bgeu", rs2, rs1, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BOpCode ::= I_BEQ 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BOpCode ::= I_BNE 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BOpCode ::= I_BLT 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BOpCode ::= I_BGE 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BOpCode ::= I_BLTU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BOpCode ::= I_BGEU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // UType ::= I_AUIPC Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UType("auipc", rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // UType ::= I_LUI Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UType("lui", rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // JType ::= I_JAL Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // JType ::= I_JAL Register Delimiter Id 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", rd, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // JType ::= I_JAL Number 
            {
              Statement RESULT =null;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", "x1", imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // JType ::= I_JAL Id 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", "x1", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // JType ::= I_J Number 
            {
              Statement RESULT =null;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", "x0", imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // JType ::= I_J Id 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", "x0", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PSeudos ::= I_LA Register Delimiter Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PSeudos ::= I_LI Register Delimiter Number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PSeudos ::= I_RET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PSeudos ::= I_CALL Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PSeudos ::= I_TAIL Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Data ::= DataMode DataList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String mode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(mode + ": " + l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Data ::= D_STRING Str 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(mode + ": " + s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Data ::= D_ASCIIZ Str 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(mode + ": " + s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Data ::= D_ZERO Expr 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(mode + ": " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DataMode ::= D_BYTE 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DataMode ::= D_HALF 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DataMode ::= D_WORD 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DataList ::= Expr 
            {
              ArrayList<Integer> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<Integer> l = new ArrayList<Integer>();
                  l.add(e);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DataList ::= DataList Delimiter Expr 
            {
              ArrayList<Integer> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(e);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Directive ::= SectionDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Directive ::= SymbolDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Directive ::= AlignDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Directive ::= CompilerDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SectionDir ::= D_SECTION Section 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(".section " + s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionDir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SectionDir ::= Section 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionDir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Section ::= D_TEXT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String) s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Section ::= D_DATA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String) s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Section ::= D_RODATA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String) s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Section ::= D_BSS 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String) s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SymbolDir ::= D_GLOBL Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(".globl " + id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymbolDir",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SymbolDir ::= D_LOCAL Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(".local " + id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymbolDir",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // AlignDir ::= D_ALIGN Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(".align " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AlignDir",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CompilerDir ::= D_FILE Str 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(".file " + s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompilerDir",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr ::= Expr PLUS Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expr ::= Expr MINUS Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr ::= Expr TIMES Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr ::= Expr DIVIDE Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr ::= Expr MOD Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 % e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Expr ::= Expr SLL Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 << e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr ::= Expr SRL Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 >>> e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr ::= Expr SRA Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 >> e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr ::= Expr AND Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 & e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr ::= Expr OR Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 | e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Expr ::= Expr XOR Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 ^ e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr ::= LPAREN Expr RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr ::= MINUS Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr ::= PLUS Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr ::= NEG Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ~e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr ::= Const 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Const ::= Number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Const ::= Character 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Id ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Number ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Character ::= CHARACTER 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Character",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Str ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Str",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Register ::= REGISTER 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)reg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Register",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Delimiter ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Delimiter",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Delimiter ::= Epsilon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Delimiter",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Epsilon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Epsilon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
