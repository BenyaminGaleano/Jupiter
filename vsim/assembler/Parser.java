
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package vsim.assembler;

import vsim.Settings;
import vsim.utils.Data;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.StringReader;
import vsim.assembler.pseudos.*;
import vsim.assembler.statements.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\004\000\002\005\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\006\010\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\006\006\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\007\010\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\011\000\002\007\011\000" +
    "\002\007\011\000\002\007\011\000\002\007\011\000\002" +
    "\007\003\000\002\007\003\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\004\000\002\007\004" +
    "\000\002\007\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\010\007\000\002\010\011\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\011\010\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\010" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\012\006\000\002\012\006\000\002\013\006\000\002\013" +
    "\004\000\002\013\004\000\002\014\006\000\002\014\006" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\010\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\003" +
    "\000\002\023\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\004\000\002\025\004\000\002" +
    "\025\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\026\004\000\002\027\004" +
    "\000\002\027\004\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\035\003\000\002\036\003\000\002\034" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\262\004\116\027\006\030\141\031\061\032" +
    "\145\033\133\034\120\035\033\036\027\037\074\040\020" +
    "\041\015\042\162\043\057\044\122\045\106\046\060\047" +
    "\154\050\161\051\014\052\022\053\123\054\101\055\110" +
    "\056\031\057\066\060\063\061\100\062\071\063\157\064" +
    "\134\065\114\066\055\067\140\070\112\071\050\072\036" +
    "\073\045\074\042\075\025\076\111\077\104\100\044\101" +
    "\041\102\017\103\062\104\113\105\051\106\007\107\043" +
    "\110\160\111\004\112\132\113\142\114\103\115\023\116" +
    "\056\117\067\120\012\121\021\122\054\123\124\124\143" +
    "\125\130\126\156\127\144\130\026\131\146\132\102\133" +
    "\105\134\073\135\064\142\005\143\136\144\072\145\047" +
    "\146\135\147\152\150\147\151\037\152\016\153\107\154" +
    "\077\155\127\156\040\157\115\160\131\161\030\001\002" +
    "\000\004\141\163\001\002\000\024\002\uff73\005\uff73\006" +
    "\uff73\007\uff73\014\uff73\015\uff73\024\uff73\136\uff73\140\uff73" +
    "\001\002\000\004\141\uffad\001\002\000\004\002\uffcd\001" +
    "\002\000\016\007\335\014\331\015\325\024\334\136\205" +
    "\140\327\001\002\000\004\002\ufff6\001\002\000\004\141" +
    "\163\001\002\000\004\002\u013f\001\002\000\004\141\uffe1" +
    "\001\002\000\004\141\uffba\001\002\000\004\002\uff8c\001" +
    "\002\000\004\141\uffc4\001\002\000\004\141\uffbb\001\002" +
    "\000\004\141\163\001\002\000\004\141\uffe2\001\002\000" +
    "\004\141\163\001\002\000\004\002\ufffd\001\002\000\004" +
    "\141\163\001\002\000\004\141\163\001\002\000\004\141" +
    "\163\001\002\000\004\142\005\001\002\000\004\141\uffe3" +
    "\001\002\000\004\141\163\001\002\000\004\141\163\001" +
    "\002\000\004\002\uff90\001\002\000\240\002\ufffe\027\006" +
    "\030\141\031\061\032\145\033\133\034\120\035\033\036" +
    "\027\037\074\040\020\041\015\042\162\043\057\044\122" +
    "\045\106\046\060\047\154\050\161\051\014\052\022\053" +
    "\123\054\101\055\110\056\031\057\066\060\063\061\100" +
    "\062\071\063\157\064\134\065\114\066\055\067\140\070" +
    "\112\071\050\072\036\073\045\074\042\075\025\076\111" +
    "\077\104\100\044\101\041\102\017\103\062\104\113\105" +
    "\051\106\007\107\043\110\160\111\004\112\132\113\142" +
    "\114\103\115\023\116\056\117\067\120\012\121\021\122" +
    "\054\123\124\124\143\125\130\126\156\127\144\130\026" +
    "\131\146\132\102\133\105\134\073\135\064\143\136\144" +
    "\072\145\047\146\135\147\152\150\147\161\030\001\002" +
    "\000\004\141\163\001\002\000\012\152\016\153\107\154" +
    "\077\155\127\001\002\000\004\136\205\001\002\000\004" +
    "\141\uffbe\001\002\000\004\141\163\001\002\000\004\141" +
    "\163\001\002\000\004\141\uffbf\001\002\000\004\141\163" +
    "\001\002\000\004\002\ufff8\001\002\000\016\007\335\014" +
    "\331\015\325\024\334\136\205\140\327\001\002\000\004" +
    "\141\163\001\002\000\004\141\163\001\002\000\004\002" +
    "\ufff5\001\002\000\004\002\uff92\001\002\000\004\141\163" +
    "\001\002\000\004\141\uffc0\001\002\000\004\141\163\001" +
    "\002\000\004\141\uffe9\001\002\000\004\141\uffde\001\002" +
    "\000\004\141\uffa8\001\002\000\004\141\uffc5\001\002\000" +
    "\004\141\uffe4\001\002\000\006\136\205\142\005\001\002" +
    "\000\004\002\uff91\001\002\000\004\141\uffec\001\002\000" +
    "\004\141\163\001\002\000\004\002\ufffc\001\002\000\004" +
    "\141\uffeb\001\002\000\004\137\230\001\002\000\006\136" +
    "\205\142\005\001\002\000\006\141\163\142\005\001\002" +
    "\000\004\002\uff8d\001\002\000\004\002\ufff9\001\002\000" +
    "\004\002\uff8a\001\002\000\004\141\uffea\001\002\000\004" +
    "\141\uffdb\001\002\000\004\141\163\001\002\000\004\141" +
    "\163\001\002\000\004\141\uffc6\001\002\000\004\002\uffc7" +
    "\001\002\000\004\141\uffdd\001\002\000\004\002\uff8b\001" +
    "\002\000\004\141\uffdc\001\002\000\004\141\uffc1\001\002" +
    "\000\004\141\163\001\002\000\004\141\uffc2\001\002\000" +
    "\004\141\uffc3\001\002\000\004\136\205\001\002\000\004" +
    "\142\005\001\002\000\004\006\253\001\002\000\004\141" +
    "\uffac\001\002\000\004\002\ufff4\001\002\000\004\141\uffe5" +
    "\001\002\000\004\141\uffe6\001\002\000\004\141\163\001" +
    "\002\000\004\141\163\001\002\000\004\002\ufffb\001\002" +
    "\000\004\002\uff89\001\002\000\004\141\163\001\002\000" +
    "\004\142\005\001\002\000\004\141\163\001\002\000\004" +
    "\141\uffa9\001\002\000\004\141\uffe7\001\002\000\016\007" +
    "\uff97\014\uff97\015\uff97\024\uff97\136\uff97\140\uff97\001\002" +
    "\000\004\137\230\001\002\000\004\002\ufff3\001\002\000" +
    "\004\002\uffce\001\002\000\004\141\uffaa\001\002\000\004" +
    "\141\163\001\002\000\004\141\163\001\002\000\004\141" +
    "\163\001\002\000\004\141\uffab\001\002\000\004\142\005" +
    "\001\002\000\016\007\uff95\014\uff95\015\uff95\024\uff95\136" +
    "\uff95\140\uff95\001\002\000\004\141\163\001\002\000\004" +
    "\002\ufff2\001\002\000\016\007\uff96\014\uff96\015\uff96\024" +
    "\uff96\136\uff96\140\uff96\001\002\000\004\002\ufff7\001\002" +
    "\000\004\141\uffe0\001\002\000\004\141\163\001\002\000" +
    "\004\141\163\001\002\000\004\141\uffe8\001\002\000\004" +
    "\141\163\001\002\000\004\141\uffdf\001\002\000\004\141" +
    "\uffb9\001\002\000\016\002\uff6f\005\uff6f\010\uff6f\136\uff6f" +
    "\141\uff6f\142\uff6f\001\002\000\006\005\165\141\uff6c\001" +
    "\002\000\022\007\uff6e\014\uff6e\015\uff6e\024\uff6e\136\uff6e" +
    "\140\uff6e\141\uff6e\142\uff6e\001\002\000\004\141\163\001" +
    "\002\000\022\007\uff6d\014\uff6d\015\uff6d\024\uff6d\136\uff6d" +
    "\140\uff6d\141\uff6d\142\uff6d\001\002\000\004\002\uffcc\001" +
    "\002\000\006\005\165\141\uff6c\001\002\000\004\141\163" +
    "\001\002\000\006\005\165\142\uff6c\001\002\000\004\142" +
    "\005\001\002\000\004\002\uffb0\001\002\000\006\005\165" +
    "\141\uff6c\001\002\000\004\141\163\001\002\000\006\005" +
    "\165\142\uff6c\001\002\000\004\142\005\001\002\000\004" +
    "\002\uffb8\001\002\000\010\005\165\136\uff6c\141\uff6c\001" +
    "\002\000\006\136\205\141\163\001\002\000\046\002\uff72" +
    "\005\uff72\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014" +
    "\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72" +
    "\023\uff72\024\uff72\136\uff72\140\uff72\001\002\000\004\007" +
    "\211\001\002\000\004\136\205\001\002\000\004\002\uffbd" +
    "\001\002\000\004\141\163\001\002\000\004\010\213\001" +
    "\002\000\004\002\uffbc\001\002\000\004\002\uffa3\001\002" +
    "\000\006\005\165\141\uff6c\001\002\000\004\141\163\001" +
    "\002\000\006\005\165\142\uff6c\001\002\000\004\142\005" +
    "\001\002\000\004\002\uffaf\001\002\000\006\005\165\142" +
    "\uff6c\001\002\000\004\142\005\001\002\000\004\002\uffb2" +
    "\001\002\000\006\005\165\141\uff6c\001\002\000\004\141" +
    "\163\001\002\000\004\002\uffca\001\002\000\004\002\uff70" +
    "\001\002\000\004\002\uff9b\001\002\000\006\005\165\141" +
    "\uff6c\001\002\000\004\141\163\001\002\000\004\002\ufff0" +
    "\001\002\000\004\002\uff88\001\002\000\006\005\165\141" +
    "\uff6c\001\002\000\004\141\163\001\002\000\006\005\165" +
    "\142\uff6c\001\002\000\004\142\005\001\002\000\004\002" +
    "\uffb1\001\002\000\006\005\165\141\uff6c\001\002\000\004" +
    "\141\163\001\002\000\006\005\165\136\uff6c\001\002\000" +
    "\004\136\205\001\002\000\004\002\uffda\001\002\000\006" +
    "\005\165\142\uff6c\001\002\000\004\142\005\001\002\000" +
    "\004\002\uffb3\001\002\000\240\002\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa" +
    "\100\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\105\ufffa\106" +
    "\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\114\ufffa" +
    "\115\ufffa\116\ufffa\117\ufffa\120\ufffa\121\ufffa\122\ufffa\123" +
    "\ufffa\124\ufffa\125\ufffa\126\ufffa\127\ufffa\130\ufffa\131\ufffa" +
    "\132\ufffa\133\ufffa\134\ufffa\135\ufffa\143\ufffa\144\ufffa\145" +
    "\ufffa\146\ufffa\147\ufffa\150\ufffa\161\ufffa\001\002\000\004" +
    "\002\uff8f\001\002\000\004\002\uff86\001\002\000\010\002" +
    "\uffc8\005\165\141\uff6c\001\002\000\004\141\163\001\002" +
    "\000\006\005\165\136\uff6c\001\002\000\004\136\205\001" +
    "\002\000\004\002\uffd9\001\002\000\006\005\165\141\uff6c" +
    "\001\002\000\004\141\163\001\002\000\004\002\uffef\001" +
    "\002\000\004\002\uffc9\001\002\000\004\002\uffa4\001\002" +
    "\000\006\005\165\142\uff6c\001\002\000\004\142\005\001" +
    "\002\000\004\002\uffa5\001\002\000\004\002\uffa0\001\002" +
    "\000\004\002\uff9f\001\002\000\004\002\uff9a\001\002\000" +
    "\006\005\165\142\uff6c\001\002\000\004\142\005\001\002" +
    "\000\004\002\uffb7\001\002\000\004\002\uff9e\001\002\000" +
    "\004\002\uff9d\001\002\000\006\005\165\141\uff6c\001\002" +
    "\000\004\141\163\001\002\000\004\002\uffed\001\002\000" +
    "\006\005\165\142\uff6c\001\002\000\004\142\005\001\002" +
    "\000\004\002\uffb4\001\002\000\006\005\165\142\uff6c\001" +
    "\002\000\004\142\005\001\002\000\004\002\uffa2\001\002" +
    "\000\010\005\165\136\uff6c\141\uff6c\001\002\000\006\136" +
    "\205\141\163\001\002\000\004\007\322\001\002\000\006" +
    "\005\165\136\uff6c\001\002\000\004\136\205\001\002\000" +
    "\004\002\uffd8\001\002\000\004\141\163\001\002\000\004" +
    "\010\324\001\002\000\004\002\uffd3\001\002\000\016\007" +
    "\335\014\331\015\325\024\334\136\205\140\327\001\002" +
    "\000\046\002\uff76\005\uff76\007\uff76\010\uff76\011\uff76\012" +
    "\uff76\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76" +
    "\021\uff76\022\uff76\023\uff76\024\uff76\136\uff76\140\uff76\001" +
    "\002\000\046\002\uff71\005\uff71\007\uff71\010\uff71\011\uff71" +
    "\012\uff71\013\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\136\uff71\140\uff71" +
    "\001\002\000\032\002\uff99\011\351\012\342\013\345\014" +
    "\346\015\337\016\344\017\343\020\347\021\340\022\352" +
    "\023\341\001\002\000\016\007\335\014\331\015\325\024" +
    "\334\136\205\140\327\001\002\000\046\002\uff75\005\uff75" +
    "\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015" +
    "\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75" +
    "\024\uff75\136\uff75\140\uff75\001\002\000\046\002\uff74\005" +
    "\uff74\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74" +
    "\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023" +
    "\uff74\024\uff74\136\uff74\140\uff74\001\002\000\016\007\335" +
    "\014\331\015\325\024\334\136\205\140\327\001\002\000" +
    "\016\007\335\014\331\015\325\024\334\136\205\140\327" +
    "\001\002\000\032\010\350\011\351\012\342\013\345\014" +
    "\346\015\337\016\344\017\343\020\347\021\340\022\352" +
    "\023\341\001\002\000\016\007\335\014\331\015\325\024" +
    "\334\136\205\140\327\001\002\000\016\007\335\014\331" +
    "\015\325\024\334\136\205\140\327\001\002\000\016\007" +
    "\335\014\331\015\325\024\334\136\205\140\327\001\002" +
    "\000\016\007\335\014\331\015\325\024\334\136\205\140" +
    "\327\001\002\000\016\007\335\014\331\015\325\024\334" +
    "\136\205\140\327\001\002\000\016\007\335\014\331\015" +
    "\325\024\334\136\205\140\327\001\002\000\016\007\335" +
    "\014\331\015\325\024\334\136\205\140\327\001\002\000" +
    "\016\007\335\014\331\015\325\024\334\136\205\140\327" +
    "\001\002\000\016\007\335\014\331\015\325\024\334\136" +
    "\205\140\327\001\002\000\046\002\uff7a\005\uff7a\007\uff7a" +
    "\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016" +
    "\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a" +
    "\136\uff7a\140\uff7a\001\002\000\016\007\335\014\331\015" +
    "\325\024\334\136\205\140\327\001\002\000\016\007\335" +
    "\014\331\015\325\024\334\136\205\140\327\001\002\000" +
    "\046\002\uff7c\005\uff7c\007\uff7c\010\uff7c\011\351\012\342" +
    "\013\345\014\346\015\337\016\344\017\343\020\347\021" +
    "\340\022\uff7c\023\341\024\uff7c\136\uff7c\140\uff7c\001\002" +
    "\000\046\002\uff83\005\uff83\007\uff83\010\uff83\011\uff83\012" +
    "\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83" +
    "\021\uff83\022\uff83\023\uff83\024\uff83\136\uff83\140\uff83\001" +
    "\002\000\046\002\uff7e\005\uff7e\007\uff7e\010\uff7e\011\351" +
    "\012\342\013\345\014\346\015\337\016\uff7e\017\uff7e\020" +
    "\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\136\uff7e\140\uff7e" +
    "\001\002\000\046\002\uff85\005\uff85\007\uff85\010\uff85\011" +
    "\351\012\342\013\345\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\136\uff85\140" +
    "\uff85\001\002\000\046\002\uff81\005\uff81\007\uff81\010\uff81" +
    "\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017" +
    "\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\136\uff81" +
    "\140\uff81\001\002\000\046\002\uff80\005\uff80\007\uff80\010" +
    "\uff80\011\351\012\342\013\345\014\346\015\337\016\uff80" +
    "\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\136" +
    "\uff80\140\uff80\001\002\000\046\002\uff7f\005\uff7f\007\uff7f" +
    "\010\uff7f\011\351\012\342\013\345\014\346\015\337\016" +
    "\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f" +
    "\136\uff7f\140\uff7f\001\002\000\046\002\uff82\005\uff82\007" +
    "\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82" +
    "\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024" +
    "\uff82\136\uff82\140\uff82\001\002\000\046\002\uff7b\005\uff7b" +
    "\007\uff7b\010\uff7b\011\351\012\342\013\345\014\346\015" +
    "\337\016\344\017\343\020\347\021\340\022\uff7b\023\uff7b" +
    "\024\uff7b\136\uff7b\140\uff7b\001\002\000\046\002\uff7d\005" +
    "\uff7d\007\uff7d\010\uff7d\011\351\012\342\013\345\014\346" +
    "\015\337\016\344\017\343\020\347\021\uff7d\022\uff7d\023" +
    "\uff7d\024\uff7d\136\uff7d\140\uff7d\001\002\000\046\002\uff84" +
    "\005\uff84\007\uff84\010\uff84\011\351\012\342\013\345\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\136\uff84\140\uff84\001\002\000\046\002" +
    "\uff77\005\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77" +
    "\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022" +
    "\uff77\023\uff77\024\uff77\136\uff77\140\uff77\001\002\000\046" +
    "\002\uff78\005\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013" +
    "\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\023\uff78\024\uff78\136\uff78\140\uff78\001\002\000" +
    "\046\002\uff79\005\uff79\007\uff79\010\uff79\011\uff79\012\uff79" +
    "\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021" +
    "\uff79\022\uff79\023\uff79\024\uff79\136\uff79\140\uff79\001\002" +
    "\000\010\005\165\136\uff6c\141\uff6c\001\002\000\006\136" +
    "\205\141\163\001\002\000\004\007\377\001\002\000\006" +
    "\005\165\136\uff6c\001\002\000\004\136\205\001\002\000" +
    "\004\002\uffd6\001\002\000\004\141\163\001\002\000\004" +
    "\010\u0101\001\002\000\004\002\uffd1\001\002\000\006\005" +
    "\165\136\uff6c\001\002\000\004\136\205\001\002\000\004" +
    "\002\uffa1\001\002\000\010\005\165\136\uff6c\141\uff6c\001" +
    "\002\000\006\136\205\141\163\001\002\000\004\007\u010b" +
    "\001\002\000\006\005\165\136\uff6c\001\002\000\004\136" +
    "\205\001\002\000\004\002\uffd5\001\002\000\004\141\163" +
    "\001\002\000\004\010\u010d\001\002\000\004\002\uffd0\001" +
    "\002\000\004\002\uff87\001\002\000\004\002\uff8e\001\002" +
    "\000\010\005\165\136\uff6c\141\uff6c\001\002\000\006\136" +
    "\205\141\163\001\002\000\004\007\u0116\001\002\000\006" +
    "\005\165\136\uff6c\001\002\000\004\136\205\001\002\000" +
    "\004\002\uffd7\001\002\000\004\141\163\001\002\000\004" +
    "\010\u0118\001\002\000\004\002\uffd2\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\006\005\165" +
    "\136\uff6c\001\002\000\004\136\205\001\002\000\004\002" +
    "\uffa6\001\002\000\006\005\165\141\uff6c\001\002\000\004" +
    "\141\163\001\002\000\006\005\165\141\uff6c\001\002\000" +
    "\004\141\163\001\002\000\004\002\ufff1\001\002\000\020" +
    "\005\165\007\uff6c\014\uff6c\015\uff6c\024\uff6c\136\uff6c\140" +
    "\uff6c\001\002\000\016\007\335\014\331\015\325\024\334" +
    "\136\205\140\327\001\002\000\042\005\165\007\uff6c\011" +
    "\351\012\342\013\345\014\346\015\337\016\344\017\343" +
    "\020\347\021\340\022\352\023\341\024\uff6c\136\uff6c\140" +
    "\uff6c\001\002\000\016\007\335\014\331\015\325\024\334" +
    "\136\205\140\327\001\002\000\032\002\uff98\011\351\012" +
    "\342\013\345\014\346\015\337\016\344\017\343\020\347" +
    "\021\340\022\352\023\341\001\002\000\006\005\165\136" +
    "\uff6c\001\002\000\004\136\205\001\002\000\004\002\uffa7" +
    "\001\002\000\006\005\165\141\uff6c\001\002\000\004\141" +
    "\163\001\002\000\006\005\165\142\uff6c\001\002\000\004" +
    "\142\005\001\002\000\004\002\uffae\001\002\000\010\005" +
    "\165\136\uff6c\141\uff6c\001\002\000\006\136\205\141\163" +
    "\001\002\000\004\007\u0136\001\002\000\006\005\165\136" +
    "\uff6c\001\002\000\004\136\205\001\002\000\004\002\uffd4" +
    "\001\002\000\004\141\163\001\002\000\004\010\u0138\001" +
    "\002\000\004\002\uffcf\001\002\000\006\005\165\141\uff6c" +
    "\001\002\000\004\141\163\001\002\000\004\002\uffee\001" +
    "\002\000\006\005\165\142\uff6c\001\002\000\004\142\005" +
    "\001\002\000\004\002\uffb5\001\002\000\004\002\000\001" +
    "\002\000\006\005\165\142\uff6c\001\002\000\004\142\005" +
    "\001\002\000\004\002\uffb6\001\002\000\044\002\uff94\005" +
    "\uff94\007\uff94\011\351\012\342\013\345\014\346\015\337" +
    "\016\344\017\343\020\347\021\340\022\352\023\341\024" +
    "\uff94\136\uff94\140\uff94\001\002\000\022\002\uff9c\005\165" +
    "\007\uff6c\014\uff6c\015\uff6c\024\uff6c\136\uff6c\140\uff6c\001" +
    "\002\000\016\007\335\014\331\015\325\024\334\136\205" +
    "\140\327\001\002\000\044\002\uff93\005\uff93\007\uff93\011" +
    "\351\012\342\013\345\014\346\015\337\016\344\017\343" +
    "\020\347\021\340\022\352\023\341\024\uff93\136\uff93\140" +
    "\uff93\001\002\000\006\005\165\141\uff6c\001\002\000\004" +
    "\141\163\001\002\000\004\002\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\060\002\012\003\034\004\075\005\023\006" +
    "\045\007\152\010\010\011\051\012\120\013\136\014\150" +
    "\015\031\016\124\017\147\020\154\021\067\022\007\024" +
    "\125\025\052\026\064\027\033\030\074\033\116\001\001" +
    "\000\004\037\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\u0143\031\u0142\032\325" +
    "\035\331\036\332\001\001\000\002\001\001\000\004\037" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u013b\001\001\000\002\001\001\000\004" +
    "\037\u0138\001\001\000\002\001\001\000\004\037\u012f\001" +
    "\001\000\004\037\u012a\001\001\000\004\037\u0127\001\001" +
    "\000\004\033\u0122\001\001\000\002\001\001\000\004\037" +
    "\u011d\001\001\000\004\037\u011a\001\001\000\002\001\001" +
    "\000\040\004\075\005\u0118\006\045\007\152\010\010\011" +
    "\051\012\120\013\136\014\150\015\031\016\124\017\147" +
    "\020\154\021\u0119\022\007\001\001\000\004\037\u010f\001" +
    "\001\000\004\030\u010e\001\001\000\004\035\u010d\001\001" +
    "\000\002\001\001\000\004\037\u0104\001\001\000\004\037" +
    "\u0101\001\001\000\002\001\001\000\004\037\370\001\001" +
    "\000\002\001\001\000\012\031\327\032\325\035\331\036" +
    "\332\001\001\000\004\037\313\001\001\000\004\037\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\305\001\001\000\002\001\001\000\004\037\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\300\035\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\274\001\001\000\006\033\272\035\273\001\001\000" +
    "\006\033\266\037\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\265\001\001\000\004\037\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\254\001\001\000\004\033\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\247\001\001\000\004" +
    "\037\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\235\001\001\000\004\033\234\001\001\000\004" +
    "\037\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\224\001" +
    "\001\000\004\037\221\001\001\000\004\037\214\001\001" +
    "\000\002\001\001\000\004\033\213\001\001\000\002\001" +
    "\001\000\004\037\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\175\001\001\000\004\037\170\001\001\000\002\001\001" +
    "\000\004\037\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\165\041\166\001\001" +
    "\000\002\001\001\000\004\037\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\171\041\166\001\001" +
    "\000\004\037\172\001\001\000\006\040\173\041\166\001" +
    "\001\000\004\033\174\001\001\000\002\001\001\000\006" +
    "\040\176\041\166\001\001\000\004\037\177\001\001\000" +
    "\006\040\200\041\166\001\001\000\004\033\201\001\001" +
    "\000\002\001\001\000\006\040\203\041\166\001\001\000" +
    "\006\035\205\037\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\207\001\001\000\002\001\001\000" +
    "\004\037\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\215\041\166\001\001\000" +
    "\004\037\216\001\001\000\006\040\217\041\166\001\001" +
    "\000\004\033\220\001\001\000\002\001\001\000\006\040" +
    "\222\041\166\001\001\000\004\033\223\001\001\000\002" +
    "\001\001\000\006\040\225\041\166\001\001\000\004\037" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\232\041\166\001\001\000\004\037" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\236\041\166\001\001\000\004\037\237\001\001\000" +
    "\006\040\240\041\166\001\001\000\004\033\241\001\001" +
    "\000\002\001\001\000\006\040\243\041\166\001\001\000" +
    "\004\037\244\001\001\000\006\040\245\041\166\001\001" +
    "\000\004\035\246\001\001\000\002\001\001\000\006\040" +
    "\250\041\166\001\001\000\004\033\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\256\041\166\001\001\000\004\037\257" +
    "\001\001\000\006\040\260\041\166\001\001\000\004\035" +
    "\261\001\001\000\002\001\001\000\006\040\263\041\166" +
    "\001\001\000\004\037\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\270\041\166" +
    "\001\001\000\004\033\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\276\041\166\001\001\000\004\033\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\303\041\166\001\001\000\004\037\304\001\001\000" +
    "\002\001\001\000\006\040\306\041\166\001\001\000\004" +
    "\033\307\001\001\000\002\001\001\000\006\040\311\041" +
    "\166\001\001\000\004\033\312\001\001\000\002\001\001" +
    "\000\006\040\314\041\166\001\001\000\006\035\315\037" +
    "\316\001\001\000\002\001\001\000\006\040\317\041\166" +
    "\001\001\000\004\035\320\001\001\000\002\001\001\000" +
    "\004\037\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\031\367\032\325\035\331\036\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\031\366\032\325\035\331\036\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\365\032\325\035\331" +
    "\036\332\001\001\000\012\031\335\032\325\035\331\036" +
    "\332\001\001\000\002\001\001\000\012\031\364\032\325" +
    "\035\331\036\332\001\001\000\012\031\363\032\325\035" +
    "\331\036\332\001\001\000\012\031\362\032\325\035\331" +
    "\036\332\001\001\000\012\031\361\032\325\035\331\036" +
    "\332\001\001\000\012\031\360\032\325\035\331\036\332" +
    "\001\001\000\012\031\357\032\325\035\331\036\332\001" +
    "\001\000\012\031\356\032\325\035\331\036\332\001\001" +
    "\000\012\031\355\032\325\035\331\036\332\001\001\000" +
    "\012\031\354\032\325\035\331\036\332\001\001\000\002" +
    "\001\001\000\012\031\353\032\325\035\331\036\332\001" +
    "\001\000\012\031\352\032\325\035\331\036\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\371\041\166\001\001\000" +
    "\006\035\372\037\373\001\001\000\002\001\001\000\006" +
    "\040\374\041\166\001\001\000\004\035\375\001\001\000" +
    "\002\001\001\000\004\037\377\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\u0102\041\166\001\001\000" +
    "\004\035\u0103\001\001\000\002\001\001\000\006\040\u0105" +
    "\041\166\001\001\000\006\035\u0106\037\u0107\001\001\000" +
    "\002\001\001\000\006\040\u0108\041\166\001\001\000\004" +
    "\035\u0109\001\001\000\002\001\001\000\004\037\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\u0110\041\166\001\001\000" +
    "\006\035\u0111\037\u0112\001\001\000\002\001\001\000\006" +
    "\040\u0113\041\166\001\001\000\004\035\u0114\001\001\000" +
    "\002\001\001\000\004\037\u0116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\u011b\041\166\001\001\000\004\035\u011c\001\001" +
    "\000\002\001\001\000\006\040\u011e\041\166\001\001\000" +
    "\004\037\u011f\001\001\000\006\040\u0120\041\166\001\001" +
    "\000\004\037\u0121\001\001\000\002\001\001\000\006\040" +
    "\u0123\041\166\001\001\000\012\031\u0124\032\325\035\331" +
    "\036\332\001\001\000\006\040\u0125\041\166\001\001\000" +
    "\012\031\u0126\032\325\035\331\036\332\001\001\000\002" +
    "\001\001\000\006\040\u0128\041\166\001\001\000\004\035" +
    "\u0129\001\001\000\002\001\001\000\006\040\u012b\041\166" +
    "\001\001\000\004\037\u012c\001\001\000\006\040\u012d\041" +
    "\166\001\001\000\004\033\u012e\001\001\000\002\001\001" +
    "\000\006\040\u0130\041\166\001\001\000\006\035\u0131\037" +
    "\u0132\001\001\000\002\001\001\000\006\040\u0133\041\166" +
    "\001\001\000\004\035\u0134\001\001\000\002\001\001\000" +
    "\004\037\u0136\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\u0139\041\166\001\001\000\004\037\u013a\001" +
    "\001\000\002\001\001\000\006\040\u013c\041\166\001\001" +
    "\000\004\033\u013d\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\u0140\041\166\001\001\000\004\033\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\u0144\041\166\001\001\000\012\031\u0145\032\325\035\331" +
    "\036\332\001\001\000\002\001\001\000\006\040\u0147\041" +
    "\166\001\001\000\004\037\u0148\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Parser.lexer.next_token(); 
    }



  private static Lexer lexer;
  private static final Parser parser = new Parser();

  public static Object parse(String line) {
    Parser.lexer = new Lexer(new StringReader(line));
    try {
      return Parser.parser.parse();
    } catch (Exception e) {
      /* DO NOTHING */
    }
    return null;
  }

  public static void invalidInst(String opcode) {
    Assembler.error("invalid instruction: '" + opcode + "', change assembler mode with -asm flag");
  }

  public void syntax_error(Symbol cur_token) {
    /* DO NOTHING */
  }

  public void unrecovered_syntax_error(Symbol cur_token) {
    if (cur_token.sym != Token.ERROR)
      Assembler.error(
        "(syntax) unexpected " +
        Token.terminalNames[cur_token.sym] + ": " + cur_token.value +
        " (column " + cur_token.right + ")"
      );
    else
      Assembler.error(
        cur_token.value +
        " (column " + cur_token.right + ")"
      );
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Statement ::= Label RISCVInst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= Label Data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= Label 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= RISCVInst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= Data 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= Directive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Label ::= Id COLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  if (!Assembler.program.addSymbol(id))
                    Assembler.error("label '" + id + "' is already defined");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Label",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RISCVInst ::= Instruction 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Assembler.program.inTextSegment())
                    Assembler.error("instructions can appear only in text segment");
                  RESULT = i;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RISCVInst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= RType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruction ::= IType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruction ::= SType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= BType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= UType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruction ::= JType 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruction ::= PSeudos 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PSeudo p = (PSeudo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    //TODO
                    ;
                  else
                    Parser.invalidInst(p.getName());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RType ::= ROpCode Register Delimiter Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RType(opcode, rd, rs1, rs2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RType ::= I_NEG Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new RType("sub", rd, "x0", rs);
                  else
                    Parser.invalidInst("neg");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RType ::= I_SNEZ Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new RType("sltu", rd, "x0", rs);
                  else
                    Parser.invalidInst("snez");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RType ::= I_SLTZ Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new RType("slt", rd, rs, "x0");
                  else
                    Parser.invalidInst("sltz");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RType ::= I_SGTZ Register Delimiter Register 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new RType("slt", rd, "x0", rs);
                  else
                    Parser.invalidInst("sgtz");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ROpCode ::= I_SLL 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ROpCode ::= I_SRL 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ROpCode ::= I_SRA 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ROpCode ::= I_ADD 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ROpCode ::= I_SUB 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ROpCode ::= I_XOR 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ROpCode ::= I_OR 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ROpCode ::= I_AND 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ROpCode ::= I_SLT 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ROpCode ::= I_SLTU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ROpCode ::= I_MUL 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ROpCode ::= I_MULH 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ROpCode ::= I_MULHSU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ROpCode ::= I_MULHU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ROpCode ::= I_DIV 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ROpCode ::= I_DIVU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ROpCode ::= I_REM 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ROpCode ::= I_REMU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROpCode",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IType ::= IOpCode Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType(opcode, rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IType ::= I_JALR Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("jalr", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IType ::= I_LB Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lb", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IType ::= I_LBU Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lbu", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IType ::= I_LH Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lh", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IType ::= I_LHU Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lhu", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IType ::= I_LW Register Delimiter Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IType("lw", rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IType ::= I_LB Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lb", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IType ::= I_LBU Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lbu", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IType ::= I_LH Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lh", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IType ::= I_LHU Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lhu", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IType ::= I_LW Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IType("lw", rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IType ::= I_ECALL 
            {
              Statement RESULT =null;
		 RESULT = new IType("ecall", "x0", "x0", 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IType ::= I_NOP 
            {
              Statement RESULT =null;
		
                  if (!Settings.BARE)
                    RESULT = new IType("addi", "x0", "x0", 0);
                  else
                    Parser.invalidInst("nop");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IType ::= I_MV Register Delimiter Register 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new IType("addi", rd, rs, 0);
                  else
                    Parser.invalidInst("mv");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IType ::= I_NOT Register Delimiter Register 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new IType("xori", rd, rs, -1);
                  else
                    Parser.invalidInst("not");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IType ::= I_SEQZ Register Delimiter Register 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new IType("sltiu", rd, rs, 1);
                  else
                    Parser.invalidInst("seqz");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IType ::= I_JR Register 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new IType("jalr", "x0", rs, 0);
                  else
                    Parser.invalidInst("jr");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IType ::= I_JALR Register 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new IType("jalr", "x1", rs, 0);
                  else
                    Parser.invalidInst("jalr, rs");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IType ::= I_RET 
            {
              Statement RESULT =null;
		
                  if (!Settings.BARE)
                    RESULT = new IType("jalr", "x0", "x1", 0);
                  else
                    Parser.invalidInst("ret");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IOpCode ::= I_SLLI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IOpCode ::= I_SRLI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IOpCode ::= I_SRAI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IOpCode ::= I_ADDI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IOpCode ::= I_XORI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOpCode ::= I_ORI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOpCode ::= I_ANDI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IOpCode ::= I_SLTI 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IOpCode ::= I_SLTIU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOpCode",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SType ::= SOpCode Register Delimiter Register Number 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SType(opcode, rd, rs1, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SType ::= SOpCode Register Delimiter Number LPAREN Register RPAREN 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer offset = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SType(opcode, rd, rs1, offset); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SOpCode ::= I_SB 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SOpCode ::= I_SH 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SOpCode ::= I_SW 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SOpCode",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BType ::= BOpCode Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String opcode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BType(opcode, rs1, rs2, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BType ::= I_BEQZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("beq", rs, "x0", id);
                  else
                    Parser.invalidInst("beqz");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BType ::= I_BNEZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("bne", rs, "x0", id);
                  else
                    Parser.invalidInst("bnez");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BType ::= I_BLEZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("bge", "x0", rs, id);
                  else
                    Parser.invalidInst("blez");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BType ::= I_BGEZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("bge", rs, "x0", id);
                  else
                    Parser.invalidInst("bgez");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BType ::= I_BLTZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("blt", rs, "x0", id);
                  else
                    Parser.invalidInst("bltz");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BType ::= I_BGTZ Register Delimiter Id 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("blt", "x0", rs, id);
                  else
                    Parser.invalidInst("bgtz");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BType ::= I_BGT Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("blt", rs2, rs1, id);
                  else
                    Parser.invalidInst("bgt");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BType ::= I_BLE Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("bge", rs2, rs1, id);
                  else
                    Parser.invalidInst("ble");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BType ::= I_BGTU Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("bltu", rs2, rs1, id);
                  else
                    Parser.invalidInst("bgtu");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BType ::= I_BLEU Register Delimiter Register Delimiter Id 
            {
              Statement RESULT =null;
		int rs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String rs1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rs2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new BType("bgeu", rs2, rs1, id);
                  else
                    Parser.invalidInst("bleu");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BOpCode ::= I_BEQ 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BOpCode ::= I_BNE 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BOpCode ::= I_BLT 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BOpCode ::= I_BGE 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BOpCode ::= I_BLTU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BOpCode ::= I_BGEU 
            {
              String RESULT =null;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)opcode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOpCode",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // UType ::= I_AUIPC Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UType("auipc", rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // UType ::= I_LUI Register Delimiter Number 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UType("lui", rd, imm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UType",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // JType ::= I_JAL Register Delimiter Id 
            {
              Statement RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new JType("jal", rd, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // JType ::= I_JAL Id 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new JType("jal", "x1", id);
                  else
                    Parser.invalidInst("jal, target");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // JType ::= I_J Id 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Settings.BARE)
                    RESULT = new JType("jal", "x0", id);
                  else
                    Parser.invalidInst("j");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JType",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PSeudos ::= I_LA Register Delimiter Id 
            {
              PSeudo RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new La(rd, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PSeudos ::= I_LI Register Delimiter Number 
            {
              PSeudo RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String rd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Li(rd, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PSeudos ::= I_CALL Id 
            {
              PSeudo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Call(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PSeudos ::= I_CALL Number 
            {
              PSeudo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Call(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PSeudos ::= I_TAIL Id 
            {
              PSeudo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Tail(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PSeudos ::= I_TAIL Number 
            {
              PSeudo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Tail(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PSeudos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Data ::= DataMode DataList 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String mode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (Assembler.program.inDataSegment() || Assembler.program.inRodataSegment()) {
                    int mask = -1;
                    int length = Data.WORD_LENGTH;
                    if (mode.equals(".byte")) {
                      mask = Data.BYTE_MASK;
                      length = Data.BYTE_LENGTH;
                    }
                    else if (mode.equals(".half") || mode.equals(".short") || mode.equals(".2byte")) {
                      mask = Data.HALF_MASK;
                      length = Data.HALF_LENGTH;
                    }
                    for (int i = 0; i < l.size(); i++) {
                      int value = l.get(i);
                      if (mask == Data.BYTE_MASK && Data.validByte(value))
                        Assembler.warning("lossy conversion to byte: '" + value + "' -> " + (value & mask));
                      if (mask == Data.HALF_MASK && Data.validHalf(value))
                        Assembler.warning("lossy conversion to half: '" + value + "' -> " + (value & mask));
                      for (int j = length - 1; j >= 0; j--)
                        Assembler.program.addByte((byte)((value >>> j * Data.BYTE_LENGTH_BITS) & mask));
                    }
                  }
                  else
                    Assembler.error(mode + " directive can not appear in " + Assembler.program.getSegment() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Data ::= D_STRING Str 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (Assembler.program.inDataSegment() || Assembler.program.inRodataSegment())
                    for (int i = 0; i < s.length(); i++)
                      Assembler.program.addByte((byte) s.charAt(i));
                  else
                    Assembler.error(".string directive can not appear in " + Assembler.program.getSegment() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Data ::= D_ASCIIZ Str 
            {
              Object RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (Assembler.program.inDataSegment() || Assembler.program.inRodataSegment())
                    for (int i = 0; i < s.length(); i++)
                      Assembler.program.addByte((byte) s.charAt(i));
                  else
                    Assembler.error(".asciiz directive can not appear in " + Assembler.program.getSegment() + " segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Data ::= D_ZERO Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Assembler.program.inTextSegment())
                    for (int i = 0; i < e; i++)
                      Assembler.program.addByte((byte) 0);
                  else
                    Assembler.error(".zero directive can not appear in text segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Data ::= D_COMM Id Delimiter Expr Delimiter Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer align = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (Assembler.program.inBssSegment()) {
                    if (align >= 0 && align <= 2) {
                      Assembler.program.alignVal(align);
                      if (!Assembler.program.addSymbol(id))
                        Assembler.error("label '" + id + "' is already defined");
                      else {
                        for (int i = 0; i < size; i++)
                          Assembler.program.addByte((byte) 0);
                      }
                    } else
                      Assembler.error(
                        "invalid align value: '" + align + "', expected 0, 1 or 2"
                      );
                  } else
                    Assembler.error(".comm/.common directive can only appear in bss segment");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Data",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DataMode ::= D_BYTE 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DataMode ::= D_HALF 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DataMode ::= D_WORD 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataMode",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DataList ::= Expr 
            {
              ArrayList<Integer> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  ArrayList<Integer> l = new ArrayList<Integer>();
                  l.add(e);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DataList ::= DataList Delimiter Expr 
            {
              ArrayList<Integer> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  l.add(e);
                  RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Directive ::= SectionDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Directive ::= SymbolDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Directive ::= AlignDir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Directive ::= DOT Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.error("invalid directive: '." + id + "'"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Directive",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SectionDir ::= D_SECTION Section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionDir",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SectionDir ::= Section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SectionDir",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Section ::= D_TEXT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.program.setSegment(Segment.TEXT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Section ::= D_DATA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.program.setSegment(Segment.DATA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Section ::= D_RODATA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.program.setSegment(Segment.RODATA); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Section ::= D_BSS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Assembler.program.setSegment(Segment.BSS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Section",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SymbolDir ::= D_GLOBL Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if(!Assembler.program.addGlobal(id))
                    Assembler.error("label '" + id + "' is already defined as global");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SymbolDir",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // AlignDir ::= D_ALIGN Number 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Assembler.program.inTextSegment()) {
                    if (e >= 0 && e <= 2)
                      Assembler.program.alignVal(e);
                    else
                      Assembler.error(
                        "invalid align value: '" + e + "', expected 0, 1 or 2"
                      );
                  } else
                    Assembler.error(
                      ".align/.p2align directives can not appear in text segment"
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AlignDir",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // AlignDir ::= D_BALIGN Number 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (!Assembler.program.inTextSegment()) {
                    if (e > 0)
                      Assembler.program.balignVal(e);
                    else
                      Assembler.error(
                        "invalid align value: '" + e + "', expected value > 0"
                      );
                  } else
                    Assembler.error(
                      ".balign directive can not appear in text segment"
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AlignDir",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr ::= Expr PLUS Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr ::= Expr MINUS Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expr ::= Expr TIMES Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr ::= Expr DIVIDE Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr ::= Expr MOD Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 % e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr ::= Expr SLL Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 << e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr ::= Expr SRL Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 >>> e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr ::= Expr SRA Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 >> e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr ::= Expr AND Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 & e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr ::= Expr OR Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 | e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Expr ::= Expr XOR Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 ^ e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr ::= LPAREN Expr RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expr ::= MINUS Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr ::= PLUS Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr ::= NEG Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ~e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr ::= Const 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Const ::= Number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Const ::= Character 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Id ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Number ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Number",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Character ::= CHARACTER 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)(((char) c) & 0xff); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Character",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Str ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Str",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Register ::= REGISTER 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)reg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Register",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Delimiter ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Delimiter",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Delimiter ::= Epsilon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Delimiter",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Epsilon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Epsilon",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
