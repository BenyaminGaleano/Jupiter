/* The following code was generated by JFlex 1.6.1 */

package vsim.assembler.syntax;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>syntax/lexer.flex</tt>
 */
public final class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SBACKSLASH = 4;
  public static final int CHARACTER = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\112\1\23\1\24\1\24\1\24\22\0\1\112\1\0\1\21"+
    "\2\0\1\10\1\15\1\25\1\3\1\4\1\6\1\11\1\1\1\12"+
    "\1\5\1\7\1\103\1\104\1\101\1\102\3\106\1\107\2\100\1\2"+
    "\1\0\1\13\1\0\1\14\2\0\1\61\1\51\1\64\1\66\1\52"+
    "\1\111\1\54\1\71\1\62\1\65\1\110\1\56\1\70\1\60\1\73"+
    "\1\63\1\53\1\74\1\72\1\57\1\55\1\67\1\76\1\75\1\110"+
    "\1\77\1\0\1\22\1\0\1\17\1\110\1\0\1\32\1\41\1\34"+
    "\1\47\1\27\1\45\1\40\1\43\1\35\1\65\1\110\1\44\1\70"+
    "\1\37\1\31\1\105\1\53\1\30\1\33\1\36\1\55\1\113\1\46"+
    "\1\50\1\42\1\26\1\0\1\16\1\0\1\20\6\0\1\24\u1fa2\0"+
    "\1\24\1\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\21\22\1\23\3\22\2\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\14\0\1\46\1\47\3\22\1\50\1\51\7\22\1\52"+
    "\1\53\1\22\1\54\1\22\1\50\10\22\1\55\1\56"+
    "\1\57\1\60\1\61\3\22\1\50\1\62\2\22\1\63"+
    "\21\0\2\22\1\64\1\65\1\66\1\67\1\70\2\22"+
    "\1\71\1\72\2\22\1\73\1\74\1\75\2\22\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\10\0\1\120\6\0\1\121\1\122\1\123\1\124"+
    "\1\22\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
    "\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
    "\1\154\1\155\1\156\5\0\1\157\1\0\1\160\1\161"+
    "\1\0\1\162\1\163\1\164\1\165\1\166\1\22\1\167"+
    "\2\0\1\170\2\0\1\171\1\172\1\173\1\174\1\175"+
    "\1\0\1\176\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u0130\0\u0130\0\u0130"+
    "\0\u0130\0\u017c\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u01c8"+
    "\0\u0214\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0260"+
    "\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474\0\u04c0"+
    "\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4\0\u0720"+
    "\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0130\0\u0130"+
    "\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130"+
    "\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0934"+
    "\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94"+
    "\0\u0be0\0\u0c2c\0\u0c78\0\u0130\0\u0130\0\u0cc4\0\u0d10\0\u0d5c"+
    "\0\u0474\0\u0da8\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70"+
    "\0\u0fbc\0\u0474\0\u0474\0\u1008\0\u0474\0\u1054\0\u10a0\0\u10ec"+
    "\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u0474"+
    "\0\u0474\0\u134c\0\u1398\0\u0474\0\u13e4\0\u1430\0\u147c\0\u14c8"+
    "\0\u0474\0\u1514\0\u1560\0\u0474\0\u15ac\0\u15f8\0\u1644\0\u1690"+
    "\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0"+
    "\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u0474"+
    "\0\u1b50\0\u0474\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18"+
    "\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u0474\0\u1e94\0\u1ee0\0\u0474"+
    "\0\u0474\0\u0474\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8"+
    "\0\u0474\0\u0474\0\u0474\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u15ac"+
    "\0\u15f8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec"+
    "\0\u2438\0\u0130\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600"+
    "\0\u0474\0\u0474\0\u0474\0\u0474\0\u264c\0\u0474\0\u0474\0\u0474"+
    "\0\u0474\0\u0474\0\u0474\0\u2698\0\u0474\0\u0474\0\u0474\0\u0474"+
    "\0\u0474\0\u0474\0\u0474\0\u0474\0\u0474\0\u0474\0\u0474\0\u0474"+
    "\0\u0474\0\u0474\0\u0474\0\u0474\0\u0474\0\u26e4\0\u0130\0\u2730"+
    "\0\u277c\0\u27c8\0\u2814\0\u2860\0\u0130\0\u28ac\0\u0130\0\u0130"+
    "\0\u28f8\0\u0130\0\u0130\0\u0130\0\u0474\0\u0474\0\u2944\0\u0474"+
    "\0\u2990\0\u29dc\0\u0130\0\u2a28\0\u2a74\0\u0130\0\u0130\0\u0474"+
    "\0\u0130\0\u0130\0\u2ac0\0\u0130\0\u0130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\5\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\2\37\1\44\1\42\1\37\1\45\1\46\1\43"+
    "\1\31\3\37\1\44\1\47\1\41\1\50\2\37\1\36"+
    "\1\51\1\45\1\37\1\52\1\37\1\53\1\33\1\54"+
    "\1\46\2\37\3\55\1\56\1\55\1\37\2\55\2\37"+
    "\1\57\1\37\21\60\1\61\1\62\2\0\67\60\21\63"+
    "\1\64\1\65\1\66\1\0\1\67\10\63\1\70\1\71"+
    "\1\63\1\72\3\63\1\73\35\63\1\74\7\63\1\75"+
    "\22\60\1\76\2\0\1\77\66\60\142\0\1\100\1\0"+
    "\1\101\1\0\1\102\1\103\2\0\1\104\1\0\1\105"+
    "\1\106\1\0\1\107\1\110\1\111\1\112\1\113\57\0"+
    "\1\114\114\0\1\115\125\0\1\37\1\116\62\37\1\0"+
    "\1\37\26\0\6\37\1\117\27\37\1\117\25\37\1\0"+
    "\1\37\26\0\1\37\1\120\2\37\1\121\17\37\1\120"+
    "\37\37\1\0\1\37\26\0\2\37\1\122\43\37\1\122"+
    "\15\37\1\0\1\37\26\0\11\37\1\123\7\37\1\124"+
    "\5\37\1\125\2\37\1\123\5\37\1\124\12\37\4\121"+
    "\1\37\2\121\2\37\1\0\1\37\26\0\1\37\1\126"+
    "\1\127\6\37\1\130\1\131\1\132\1\37\1\133\1\134"+
    "\1\37\1\135\2\37\1\132\1\126\1\37\1\131\1\136"+
    "\1\134\1\37\1\130\10\37\1\133\2\37\1\127\1\37"+
    "\1\135\1\37\4\121\1\137\3\121\2\37\1\0\1\37"+
    "\26\0\4\37\1\140\26\37\1\140\30\37\1\0\1\37"+
    "\26\0\64\37\1\0\1\37\26\0\4\37\1\141\26\37"+
    "\1\141\17\37\6\121\3\37\1\0\1\37\26\0\1\37"+
    "\1\142\1\37\1\143\20\37\1\142\20\37\1\143\16\37"+
    "\1\0\1\37\26\0\57\37\1\121\4\37\1\0\1\37"+
    "\26\0\1\37\1\144\7\37\1\145\1\146\3\37\1\147"+
    "\5\37\1\144\1\37\1\146\1\37\1\147\1\37\1\145"+
    "\31\37\1\0\1\37\26\0\4\37\1\150\2\37\1\151"+
    "\3\37\1\152\1\37\1\153\2\37\1\154\2\37\1\152"+
    "\3\37\1\155\3\37\1\150\1\151\6\37\1\153\4\37"+
    "\1\154\13\37\1\0\1\37\26\0\7\37\1\156\24\37"+
    "\1\156\27\37\1\0\1\37\26\0\3\37\1\157\41\37"+
    "\1\157\4\37\1\121\1\160\1\137\1\121\1\160\1\37"+
    "\2\121\2\37\1\0\1\37\26\0\4\37\1\141\26\37"+
    "\1\141\30\37\1\0\1\37\26\0\11\37\1\123\7\37"+
    "\1\124\5\37\1\125\2\37\1\123\5\37\1\124\23\37"+
    "\1\0\1\37\26\0\2\37\1\161\1\37\1\162\26\37"+
    "\1\162\12\37\1\161\15\37\1\0\1\37\26\0\27\37"+
    "\1\163\11\37\1\164\22\37\1\0\1\164\26\0\1\37"+
    "\1\126\1\127\6\37\1\130\1\131\1\132\1\37\1\133"+
    "\1\134\1\37\1\135\2\37\1\132\1\126\1\37\1\131"+
    "\1\136\1\134\1\37\1\130\10\37\1\133\2\37\1\127"+
    "\1\37\1\135\13\37\1\0\1\37\26\0\1\37\1\120"+
    "\22\37\1\120\37\37\1\0\1\37\100\0\5\55\1\0"+
    "\2\55\45\0\1\165\6\0\1\166\1\165\23\0\1\166"+
    "\2\0\5\55\1\0\2\55\33\0\1\167\115\0\1\170"+
    "\115\0\1\171\10\0\1\172\76\0\1\173\6\0\1\174"+
    "\104\0\1\175\130\0\1\176\102\0\1\177\6\0\1\200"+
    "\103\0\1\201\112\0\1\202\117\0\1\203\107\0\1\204"+
    "\114\0\1\205\107\0\2\37\1\206\61\37\1\0\1\37"+
    "\26\0\4\37\1\207\26\37\1\207\30\37\1\0\1\37"+
    "\26\0\10\37\1\210\20\37\1\210\10\37\1\211\21\37"+
    "\1\0\1\37\26\0\7\37\1\212\24\37\1\212\27\37"+
    "\1\0\1\37\26\0\21\37\1\213\16\37\1\213\23\37"+
    "\1\0\1\37\26\0\21\37\1\214\16\37\1\214\23\37"+
    "\1\0\1\37\26\0\7\37\1\215\24\37\1\215\27\37"+
    "\1\0\1\37\26\0\25\37\1\216\36\37\1\0\1\37"+
    "\26\0\4\37\1\217\11\37\1\220\11\37\1\220\2\37"+
    "\1\217\30\37\1\0\1\37\26\0\1\37\1\221\22\37"+
    "\1\221\37\37\1\0\1\37\26\0\10\37\1\222\20\37"+
    "\1\222\32\37\1\0\1\37\26\0\10\37\1\223\5\37"+
    "\1\224\11\37\1\224\1\223\32\37\1\0\1\37\26\0"+
    "\13\37\1\225\7\37\1\225\40\37\1\0\1\37\26\0"+
    "\55\37\2\121\5\37\1\0\1\37\26\0\16\37\1\226"+
    "\11\37\1\226\33\37\1\0\1\37\26\0\7\37\1\227"+
    "\24\37\1\227\27\37\1\0\1\37\26\0\12\37\1\230"+
    "\13\37\1\230\35\37\1\0\1\37\26\0\10\37\1\231"+
    "\20\37\1\231\3\37\1\232\21\37\1\232\4\37\1\0"+
    "\1\37\26\0\25\37\1\233\36\37\1\0\1\37\26\0"+
    "\1\37\1\234\22\37\1\234\37\37\1\0\1\37\26\0"+
    "\1\37\1\235\6\37\1\236\13\37\1\235\4\37\1\236"+
    "\32\37\1\0\1\37\26\0\1\37\1\237\6\37\1\240"+
    "\13\37\1\237\4\37\1\240\32\37\1\0\1\37\26\0"+
    "\27\37\1\241\34\37\1\0\1\37\26\0\27\37\1\242"+
    "\34\37\1\0\1\37\26\0\7\37\1\243\24\37\1\243"+
    "\27\37\1\0\1\37\26\0\41\37\1\244\22\37\1\0"+
    "\1\244\26\0\2\37\1\245\43\37\1\245\15\37\1\0"+
    "\1\37\26\0\52\37\5\121\1\37\2\121\2\37\1\0"+
    "\1\37\26\0\16\37\1\246\11\37\1\246\33\37\1\0"+
    "\1\37\26\0\16\37\1\247\11\37\1\247\33\37\1\0"+
    "\1\37\103\0\2\250\36\0\1\251\2\0\1\251\1\0"+
    "\1\251\4\0\1\251\3\0\1\251\1\0\1\251\1\0"+
    "\2\251\6\0\1\251\2\0\1\251\1\0\1\251\11\0"+
    "\5\251\1\0\2\251\1\0\1\251\32\0\1\252\132\0"+
    "\1\253\100\0\1\254\114\0\1\255\112\0\1\256\107\0"+
    "\1\257\133\0\1\260\74\0\1\261\115\0\1\262\116\0"+
    "\1\263\121\0\1\264\103\0\1\265\123\0\1\266\77\0"+
    "\1\267\121\0\1\270\103\0\3\37\1\121\60\37\1\0"+
    "\1\37\26\0\16\37\1\271\11\37\1\271\33\37\1\0"+
    "\1\37\26\0\27\37\1\272\34\37\1\0\1\37\26\0"+
    "\7\37\1\273\24\37\1\273\27\37\1\0\1\37\26\0"+
    "\7\37\1\274\24\37\1\274\27\37\1\0\1\37\26\0"+
    "\35\37\1\275\21\37\1\275\4\37\1\0\1\37\26\0"+
    "\1\276\50\37\1\276\12\37\1\0\1\37\26\0\7\37"+
    "\1\277\24\37\1\277\27\37\1\0\1\37\26\0\7\37"+
    "\1\300\24\37\1\300\27\37\1\0\1\37\26\0\1\301"+
    "\50\37\1\301\12\37\1\0\1\37\26\0\1\302\50\37"+
    "\1\302\12\37\1\0\1\37\26\0\1\303\6\37\1\304"+
    "\17\37\1\305\4\37\1\304\14\37\1\303\12\37\1\0"+
    "\1\37\26\0\7\37\1\306\24\37\1\306\27\37\1\0"+
    "\1\37\26\0\16\37\1\307\11\37\1\307\33\37\1\0"+
    "\1\37\26\0\16\37\1\310\11\37\1\310\33\37\1\0"+
    "\1\37\26\0\1\311\50\37\1\311\12\37\1\0\1\37"+
    "\26\0\1\312\50\37\1\312\12\37\1\0\1\37\26\0"+
    "\1\313\26\37\1\314\21\37\1\313\12\37\1\0\1\37"+
    "\26\0\1\315\26\37\1\316\21\37\1\315\12\37\1\0"+
    "\1\37\26\0\1\317\26\37\1\320\21\37\1\317\12\37"+
    "\1\0\1\37\26\0\1\321\26\37\1\322\21\37\1\321"+
    "\12\37\1\0\1\37\26\0\27\37\1\323\34\37\1\0"+
    "\1\37\26\0\7\37\1\324\24\37\1\324\27\37\1\0"+
    "\1\37\26\0\2\37\1\325\43\37\1\325\15\37\1\0"+
    "\1\37\26\0\15\37\1\326\25\37\1\326\20\37\1\0"+
    "\1\37\31\0\1\327\114\0\1\330\116\0\1\331\116\0"+
    "\1\332\111\0\1\333\112\0\1\334\114\0\1\335\116\0"+
    "\1\336\101\0\1\337\131\0\1\340\100\0\1\341\110\0"+
    "\1\342\133\0\1\343\76\0\1\344\107\0\6\37\1\345"+
    "\27\37\1\345\25\37\1\0\1\37\26\0\27\37\1\346"+
    "\34\37\1\0\1\37\26\0\5\37\1\347\21\37\1\350"+
    "\14\37\1\347\17\37\1\0\1\37\36\0\1\351\112\0"+
    "\1\352\115\0\1\353\111\0\1\354\115\0\1\355\120\0"+
    "\1\356\113\0\1\357\75\0\27\37\1\360\34\37\1\0"+
    "\1\37\32\0\1\361\107\0\1\362\116\0\1\363\122\0"+
    "\1\364\112\0\1\365\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\5\11\1\1\5\11\2\1\6\11\27\1\21\11"+
    "\14\0\2\11\47\1\21\0\44\1\10\0\1\11\6\0"+
    "\36\1\1\11\5\0\1\11\1\0\2\11\1\0\3\11"+
    "\4\1\2\0\1\11\2\0\2\11\1\1\2\11\1\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  private int prevState;
  private StringBuffer text;

  private java_cup.runtime.Symbol symbol(int type) {
    return this.symbol(type, null);
  }

  private java_cup.runtime.Symbol symbol(int type, Object value) {
    return new java_cup.runtime.Symbol(type, yyline, yycolumn, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.prevState = YYINITIAL;
  this.text = new StringBuffer(0);
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   int state = yystate();
  if (state == STRING || state == SBACKSLASH && this.prevState == STRING) {
    yybegin(YYINITIAL);
    return symbol(Token.ERROR, "unterminated string constant");
  } else if (state == CHARACTER || state == SBACKSLASH && this.prevState == CHARACTER) {
    yybegin(YYINITIAL);
    return symbol(Token.ERROR, "unterminated char constant");
  }
  return symbol(Token.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(Token.ERROR, "unexpected character: " + yytext());
            }
          case 128: break;
          case 2: 
            { return symbol(Token.COMMA);
            }
          case 129: break;
          case 3: 
            { return symbol(Token.COLON);
            }
          case 130: break;
          case 4: 
            { return symbol(Token.LPAREN);
            }
          case 131: break;
          case 5: 
            { return symbol(Token.RPAREN);
            }
          case 132: break;
          case 6: 
            { return symbol(Token.DOT);
            }
          case 133: break;
          case 7: 
            { return symbol(Token.TIMES);
            }
          case 134: break;
          case 8: 
            { return symbol(Token.DIVIDE);
            }
          case 135: break;
          case 9: 
            { return symbol(Token.MOD);
            }
          case 136: break;
          case 10: 
            { return symbol(Token.PLUS);
            }
          case 137: break;
          case 11: 
            { return symbol(Token.MINUS);
            }
          case 138: break;
          case 12: 
            { return symbol(Token.AND);
            }
          case 139: break;
          case 13: 
            { return symbol(Token.OR);
            }
          case 140: break;
          case 14: 
            { return symbol(Token.XOR);
            }
          case 141: break;
          case 15: 
            { return symbol(Token.NEG);
            }
          case 142: break;
          case 16: 
            { this.text.setLength(0);
    yybegin(STRING);
            }
          case 143: break;
          case 17: 
            { this.text.setLength(0);
    yybegin(CHARACTER);
            }
          case 144: break;
          case 18: 
            { return symbol(Token.IDENTIFIER, yytext());
            }
          case 145: break;
          case 19: 
            { return symbol(Token.I_J);
            }
          case 146: break;
          case 20: 
            { try {
      return symbol(Token.NUMBER, Integer.parseUnsignedInt(yytext()));
    } catch (Exception e) {
      return symbol(Token.ERROR, "invalid number constant: " + yytext());
    }
            }
          case 147: break;
          case 21: 
            { /* do nothing */
            }
          case 148: break;
          case 22: 
            { this.text.append(yytext());
            }
          case 149: break;
          case 23: 
            { yybegin(YYINITIAL);
    return symbol(Token.STRING, this.text.toString());
            }
          case 150: break;
          case 24: 
            { this.prevState = STRING;
    yybegin(SBACKSLASH);
            }
          case 151: break;
          case 25: 
            { this.text.append(yytext());
    yybegin(this.prevState);
            }
          case 152: break;
          case 26: 
            { this.text.append("\"");
    yybegin(this.prevState);
            }
          case 153: break;
          case 27: 
            { this.text.append("\\");
    yybegin(this.prevState);
            }
          case 154: break;
          case 28: 
            { this.text.append("\n");
    yybegin(this.prevState);
            }
          case 155: break;
          case 29: 
            { this.text.append("\'");
    yybegin(this.prevState);
            }
          case 156: break;
          case 30: 
            { this.text.append('\t');
    yybegin(this.prevState);
            }
          case 157: break;
          case 31: 
            { this.text.append('\n');
    yybegin(this.prevState);
            }
          case 158: break;
          case 32: 
            { this.text.append('\b');
    yybegin(this.prevState);
            }
          case 159: break;
          case 33: 
            { this.text.append('\f');
    yybegin(this.prevState);
            }
          case 160: break;
          case 34: 
            { this.text.append('\0');
    yybegin(this.prevState);
            }
          case 161: break;
          case 35: 
            { this.text.append((char)11);
    yybegin(this.prevState);
            }
          case 162: break;
          case 36: 
            { this.prevState = CHARACTER;
    yybegin(SBACKSLASH);
            }
          case 163: break;
          case 37: 
            { yybegin(YYINITIAL);
    String ch = this.text.toString();
    if (ch.length() == 1)
      return symbol(Token.CHARACTER, this.text.toString().charAt(0));
    else
      return symbol(Token.ERROR, "invalid char: " + ch);
            }
          case 164: break;
          case 38: 
            { return symbol(Token.SLL);
            }
          case 165: break;
          case 39: 
            { return symbol(Token.SRL);
            }
          case 166: break;
          case 40: 
            { return symbol(Token.REGISTER, yytext());
            }
          case 167: break;
          case 41: 
            { return symbol(Token.I_OR);
            }
          case 168: break;
          case 42: 
            { return symbol(Token.I_SB);
            }
          case 169: break;
          case 43: 
            { return symbol(Token.I_SH);
            }
          case 170: break;
          case 44: 
            { return symbol(Token.I_SW);
            }
          case 171: break;
          case 45: 
            { return symbol(Token.I_LA);
            }
          case 172: break;
          case 46: 
            { return symbol(Token.I_LI);
            }
          case 173: break;
          case 47: 
            { return symbol(Token.I_LB);
            }
          case 174: break;
          case 48: 
            { return symbol(Token.I_LH);
            }
          case 175: break;
          case 49: 
            { return symbol(Token.I_LW);
            }
          case 176: break;
          case 50: 
            { return symbol(Token.I_JR);
            }
          case 177: break;
          case 51: 
            { return symbol(Token.I_MV);
            }
          case 178: break;
          case 52: 
            { return symbol(Token.I_RET);
            }
          case 179: break;
          case 53: 
            { return symbol(Token.I_REM);
            }
          case 180: break;
          case 54: 
            { return symbol(Token.I_ORI);
            }
          case 181: break;
          case 55: 
            { return symbol(Token.I_AND);
            }
          case 182: break;
          case 56: 
            { return symbol(Token.I_ADD);
            }
          case 183: break;
          case 57: 
            { return symbol(Token.I_SRA);
            }
          case 184: break;
          case 58: 
            { return symbol(Token.I_SRL);
            }
          case 185: break;
          case 59: 
            { return symbol(Token.I_SLT);
            }
          case 186: break;
          case 60: 
            { return symbol(Token.I_SLL);
            }
          case 187: break;
          case 61: 
            { return symbol(Token.I_SUB);
            }
          case 188: break;
          case 62: 
            { return symbol(Token.I_NEG);
            }
          case 189: break;
          case 63: 
            { return symbol(Token.I_NOT);
            }
          case 190: break;
          case 64: 
            { return symbol(Token.I_NOP);
            }
          case 191: break;
          case 65: 
            { return symbol(Token.I_BEQ);
            }
          case 192: break;
          case 66: 
            { return symbol(Token.I_BNE);
            }
          case 193: break;
          case 67: 
            { return symbol(Token.I_BGE);
            }
          case 194: break;
          case 68: 
            { return symbol(Token.I_BGT);
            }
          case 195: break;
          case 69: 
            { return symbol(Token.I_BLE);
            }
          case 196: break;
          case 70: 
            { return symbol(Token.I_BLT);
            }
          case 197: break;
          case 71: 
            { return symbol(Token.I_LBU);
            }
          case 198: break;
          case 72: 
            { return symbol(Token.I_LHU);
            }
          case 199: break;
          case 73: 
            { return symbol(Token.I_LUI);
            }
          case 200: break;
          case 74: 
            { return symbol(Token.I_DIV);
            }
          case 201: break;
          case 75: 
            { return symbol(Token.I_XOR);
            }
          case 202: break;
          case 76: 
            { return symbol(Token.I_JAL);
            }
          case 203: break;
          case 77: 
            { return symbol(Token.I_MUL);
            }
          case 204: break;
          case 78: 
            { try {
      return symbol(Token.NUMBER, Integer.parseUnsignedInt(yytext().substring(2), 2));
    } catch (Exception e) {
      return symbol(Token.ERROR, "invalid binary constant: " + yytext());
    }
            }
          case 205: break;
          case 79: 
            { try {
      return symbol(Token.NUMBER,   Integer.parseUnsignedInt(yytext().substring(2), 16));
    } catch (Exception e) {
      return symbol(Token.ERROR, "invalid hexadecimal constant: " + yytext());
    }
            }
          case 206: break;
          case 80: 
            { return symbol(Token.D_BSS);
            }
          case 207: break;
          case 81: 
            { return symbol(Token.I_ECALL);
            }
          case 208: break;
          case 82: 
            { return symbol(Token.I_REMU);
            }
          case 209: break;
          case 83: 
            { return symbol(Token.I_ANDI);
            }
          case 210: break;
          case 84: 
            { return symbol(Token.I_ADDI);
            }
          case 211: break;
          case 85: 
            { return symbol(Token.I_SEQZ);
            }
          case 212: break;
          case 86: 
            { return symbol(Token.I_SRAI);
            }
          case 213: break;
          case 87: 
            { return symbol(Token.I_SRLI);
            }
          case 214: break;
          case 88: 
            { return symbol(Token.I_SNEZ);
            }
          case 215: break;
          case 89: 
            { return symbol(Token.I_SGTZ);
            }
          case 216: break;
          case 90: 
            { return symbol(Token.I_SLTZ);
            }
          case 217: break;
          case 91: 
            { return symbol(Token.I_SLTI);
            }
          case 218: break;
          case 92: 
            { return symbol(Token.I_SLTU);
            }
          case 219: break;
          case 93: 
            { return symbol(Token.I_SLLI);
            }
          case 220: break;
          case 94: 
            { return symbol(Token.I_CALL);
            }
          case 221: break;
          case 95: 
            { return symbol(Token.I_TAIL);
            }
          case 222: break;
          case 96: 
            { return symbol(Token.I_BEQZ);
            }
          case 223: break;
          case 97: 
            { return symbol(Token.I_BNEZ);
            }
          case 224: break;
          case 98: 
            { return symbol(Token.I_BGEZ);
            }
          case 225: break;
          case 99: 
            { return symbol(Token.I_BGEU);
            }
          case 226: break;
          case 100: 
            { return symbol(Token.I_BGTZ);
            }
          case 227: break;
          case 101: 
            { return symbol(Token.I_BGTU);
            }
          case 228: break;
          case 102: 
            { return symbol(Token.I_BLEZ);
            }
          case 229: break;
          case 103: 
            { return symbol(Token.I_BLEU);
            }
          case 230: break;
          case 104: 
            { return symbol(Token.I_BLTZ);
            }
          case 231: break;
          case 105: 
            { return symbol(Token.I_BLTU);
            }
          case 232: break;
          case 106: 
            { return symbol(Token.I_DIVU);
            }
          case 233: break;
          case 107: 
            { return symbol(Token.I_XORI);
            }
          case 234: break;
          case 108: 
            { return symbol(Token.I_JALR);
            }
          case 235: break;
          case 109: 
            { return symbol(Token.I_MULH);
            }
          case 236: break;
          case 110: 
            { return symbol(Token.D_ZERO);
            }
          case 237: break;
          case 111: 
            { return symbol(Token.D_TEXT);
            }
          case 238: break;
          case 112: 
            { return symbol(Token.D_BYTE);
            }
          case 239: break;
          case 113: 
            { return symbol(Token.D_HALF);
            }
          case 240: break;
          case 114: 
            { return symbol(Token.D_FILE);
            }
          case 241: break;
          case 115: 
            { return symbol(Token.D_WORD);
            }
          case 242: break;
          case 116: 
            { return symbol(Token.D_DATA);
            }
          case 243: break;
          case 117: 
            { return symbol(Token.I_AUIPC);
            }
          case 244: break;
          case 118: 
            { return symbol(Token.I_SLTIU);
            }
          case 245: break;
          case 119: 
            { return symbol(Token.I_MULHU);
            }
          case 246: break;
          case 120: 
            { return symbol(Token.D_ALIGN);
            }
          case 247: break;
          case 121: 
            { return symbol(Token.D_GLOBAL);
            }
          case 248: break;
          case 122: 
            { return symbol(Token.D_LOCAL);
            }
          case 249: break;
          case 123: 
            { return symbol(Token.I_MULHSU);
            }
          case 250: break;
          case 124: 
            { return symbol(Token.D_RODATA);
            }
          case 251: break;
          case 125: 
            { return symbol(Token.D_ASCIIZ);
            }
          case 252: break;
          case 126: 
            { return symbol(Token.D_STRING);
            }
          case 253: break;
          case 127: 
            { return symbol(Token.D_SECTION);
            }
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
