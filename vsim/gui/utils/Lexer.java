/* The following code was generated by JFlex 1.7.0 */

package vsim.gui.utils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>syntax/guilexer.flex</tt>
 */
public final class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SBACKSLASH = 4;
  public static final int CHARACTER = 6;
  public static final int COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\102\1\5\1\7\1\7\1\6\22\0\1\102\1\0\1\3"+
    "\1\103\3\0\1\10\1\2\1\2\1\0\1\101\1\2\1\101\1\1"+
    "\1\0\1\73\1\71\1\32\1\72\1\35\2\74\1\75\1\76\1\70"+
    "\1\100\1\103\5\0\1\50\1\37\1\53\1\55\1\40\1\65\1\42"+
    "\1\60\1\51\1\54\1\67\1\44\1\57\1\46\1\62\1\52\1\41"+
    "\1\63\1\61\1\45\1\43\1\56\1\66\1\64\1\77\1\47\1\0"+
    "\1\4\2\0\1\77\1\0\1\17\1\25\1\20\1\34\1\12\1\31"+
    "\1\24\1\27\1\21\1\54\1\67\1\30\1\57\1\23\1\14\1\16"+
    "\1\41\1\13\1\15\1\22\1\43\1\56\1\33\1\36\1\26\1\11"+
    "\12\0\1\7\u1fa2\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\16\6\1\7"+
    "\4\6\1\10\4\6\1\7\1\1\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\14\0\1\7"+
    "\2\0\1\7\1\0\1\6\1\21\2\6\1\22\1\10"+
    "\4\6\1\10\2\6\1\22\11\6\1\10\10\6\1\22"+
    "\4\6\2\0\3\6\26\0\4\6\1\10\2\6\2\10"+
    "\20\6\1\7\1\0\2\10\2\7\11\0\1\23\6\0"+
    "\2\6\1\0\5\6\1\0\1\10\4\0\1\6\1\10"+
    "\1\6\1\0\1\10\3\6\1\0\1\23\1\0\2\6"+
    "\4\0\1\6\2\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec"+
    "\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c"+
    "\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u0154\0\u0154\0\u0154"+
    "\0\u0154\0\u08c4\0\u0154\0\u0154\0\u0154\0\u0154\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0154\0\u0dd0\0\u0e14\0\u0330\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0330\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u0e58"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1e48\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u23dc\0\u2420\0\u2464\0\u17a4\0\u17e8\0\u24a8\0\u24ec"+
    "\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u0154"+
    "\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8"+
    "\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u1d7c\0\u2ca0\0\u2ce4"+
    "\0\u2d28\0\u2d28\0\u2d6c\0\u12dc\0\u2db0\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u0154\0\u3058";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\6\2\12\1\0\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\21\1\24\1\25\1\26\1\27\2\21\1\30\1\31"+
    "\1\32\1\21\1\33\1\32\1\34\1\27\1\15\3\21"+
    "\1\30\1\35\1\25\1\21\1\36\2\21\1\23\1\37"+
    "\1\33\1\21\1\40\1\21\1\41\1\17\1\42\1\34"+
    "\1\43\2\21\3\32\1\44\3\32\1\21\1\6\1\45"+
    "\1\12\1\46\3\47\1\50\1\51\1\47\1\52\1\0"+
    "\74\47\6\53\2\0\74\53\4\47\1\54\1\47\1\52"+
    "\1\0\1\50\73\47\5\55\1\56\1\57\1\0\74\55"+
    "\115\0\1\60\1\0\1\61\1\0\1\62\1\63\1\64"+
    "\2\0\1\65\1\0\1\66\1\67\1\0\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\73\32\0\7\76\6\0"+
    "\1\77\7\0\1\21\1\100\65\21\1\101\4\0\1\77"+
    "\7\0\7\21\1\23\4\21\1\102\11\21\1\102\13\21"+
    "\1\23\24\21\1\101\4\0\1\77\7\0\1\21\1\103"+
    "\4\21\1\104\20\21\1\103\37\21\1\101\4\0\1\77"+
    "\7\0\2\21\1\105\47\21\1\105\14\21\1\101\4\0"+
    "\1\77\7\0\1\21\1\106\1\107\2\21\1\104\4\21"+
    "\1\110\1\111\1\112\1\21\1\112\1\113\1\21\1\104"+
    "\1\112\1\21\1\104\1\21\1\112\1\106\1\21\1\111"+
    "\1\114\1\113\1\21\1\110\11\21\1\112\2\21\1\107"+
    "\2\21\1\112\1\21\1\104\1\115\5\104\1\21\1\101"+
    "\4\0\1\77\7\0\67\21\1\101\4\0\1\77\7\0"+
    "\12\21\1\116\6\21\1\104\1\21\1\116\1\104\5\21"+
    "\1\117\2\21\1\116\6\21\1\116\13\21\5\104\2\21"+
    "\1\101\4\0\1\77\7\0\6\21\1\120\30\21\1\120"+
    "\27\21\1\101\4\0\1\77\7\0\5\21\1\104\1\121"+
    "\12\21\1\104\2\21\1\104\12\21\1\121\20\21\4\104"+
    "\3\21\1\101\4\0\1\77\7\0\1\21\1\122\1\21"+
    "\1\123\23\21\1\122\21\21\1\123\15\21\1\101\4\0"+
    "\1\77\7\0\5\21\1\104\61\21\1\101\4\0\1\77"+
    "\7\0\1\21\1\124\10\21\1\125\1\126\3\21\1\126"+
    "\7\21\1\124\1\21\1\126\1\21\1\126\1\21\1\125"+
    "\31\21\1\101\4\0\1\77\7\0\6\21\1\112\1\21"+
    "\1\112\3\21\1\127\1\21\1\127\3\21\1\112\3\21"+
    "\1\127\3\21\1\130\4\21\2\112\6\21\1\127\5\21"+
    "\1\112\11\21\1\101\4\0\1\77\7\0\1\21\1\131"+
    "\2\21\1\132\1\104\1\133\1\134\1\21\1\135\1\136"+
    "\4\21\1\137\1\21\1\140\1\21\1\141\1\104\2\21"+
    "\1\131\3\21\1\137\1\21\1\136\1\21\1\142\2\21"+
    "\1\134\1\21\1\141\1\21\1\143\1\21\1\144\6\21"+
    "\1\104\1\140\1\115\4\104\1\21\1\101\4\0\1\145"+
    "\10\0\1\146\17\0\1\32\2\0\1\32\2\0\1\146"+
    "\27\0\7\32\6\0\1\77\7\0\10\21\1\147\27\21"+
    "\1\147\26\21\1\101\4\0\1\77\7\0\3\21\1\17"+
    "\15\21\1\140\2\21\1\104\24\21\1\17\5\21\1\104"+
    "\1\140\1\115\4\104\1\21\1\101\4\0\1\77\7\0"+
    "\6\21\1\121\30\21\1\121\27\21\1\101\4\0\1\77"+
    "\7\0\12\21\1\116\10\21\1\116\6\21\1\117\2\21"+
    "\1\116\6\21\1\116\22\21\1\101\4\0\1\77\7\0"+
    "\2\21\1\112\3\21\1\150\30\21\1\150\12\21\1\112"+
    "\14\21\1\101\4\0\1\77\7\0\32\21\1\151\12\21"+
    "\1\112\21\21\1\101\4\0\1\77\7\0\1\21\1\106"+
    "\1\107\7\21\1\110\1\111\1\112\1\21\1\112\1\113"+
    "\2\21\1\112\3\21\1\112\1\106\1\21\1\111\1\114"+
    "\1\113\1\21\1\110\11\21\1\112\2\21\1\107\2\21"+
    "\1\112\11\21\1\101\4\0\1\77\7\0\1\21\1\103"+
    "\25\21\1\103\37\21\1\101\4\0\1\77\7\0\1\21"+
    "\1\131\2\21\1\144\1\21\1\142\1\134\2\21\1\136"+
    "\4\21\1\137\1\21\1\140\1\21\1\141\1\104\2\21"+
    "\1\131\3\21\1\137\1\21\1\136\1\21\1\142\2\21"+
    "\1\134\1\21\1\141\1\21\1\143\1\21\1\144\6\21"+
    "\1\104\1\140\1\115\4\104\1\21\1\101\4\0\1\145"+
    "\10\0\1\146\12\0\1\152\4\0\1\32\2\0\1\32"+
    "\1\153\1\152\1\146\23\0\1\153\3\0\7\32\6\0"+
    "\1\145\30\0\1\32\2\0\1\32\32\0\7\32\12\0"+
    "\1\47\103\0\1\56\110\0\1\154\105\0\1\155\101\0"+
    "\1\156\3\0\1\157\3\0\1\160\4\0\1\161\106\0"+
    "\1\162\66\0\1\163\12\0\1\164\65\0\1\165\121\0"+
    "\1\166\70\0\1\167\1\0\1\170\6\0\1\171\74\0"+
    "\1\172\100\0\1\173\117\0\1\174\65\0\1\146\12\0"+
    "\1\175\4\0\1\76\2\0\1\76\2\0\1\146\27\0"+
    "\7\76\21\0\1\176\106\0\1\177\76\0\1\146\17\0"+
    "\1\76\2\0\1\76\2\0\1\146\27\0\7\76\16\0"+
    "\67\200\5\0\1\77\7\0\2\21\1\201\64\21\1\101"+
    "\4\0\1\77\7\0\2\21\1\202\47\21\1\202\14\21"+
    "\1\101\4\0\1\77\7\0\11\21\1\112\22\21\1\112"+
    "\11\21\1\127\20\21\1\101\4\0\1\77\7\0\10\21"+
    "\1\112\27\21\1\112\26\21\1\101\4\0\1\77\7\0"+
    "\30\21\1\203\36\21\1\101\4\0\1\77\7\0\6\21"+
    "\1\105\10\21\1\105\13\21\1\105\3\21\1\105\27\21"+
    "\1\101\4\0\1\77\7\0\1\21\1\203\25\21\1\203"+
    "\37\21\1\101\4\0\1\77\7\0\11\21\1\203\22\21"+
    "\1\203\32\21\1\101\4\0\1\77\7\0\11\21\1\204"+
    "\5\21\1\105\13\21\1\105\1\204\32\21\1\101\4\0"+
    "\1\77\7\0\14\21\1\112\11\21\1\112\40\21\1\101"+
    "\4\0\1\77\7\0\60\21\1\104\1\21\1\104\4\21"+
    "\1\101\4\0\1\77\7\0\23\21\1\105\20\21\1\105"+
    "\22\21\1\101\4\0\1\77\7\0\10\21\1\205\27\21"+
    "\1\205\26\21\1\101\4\0\1\77\7\0\17\21\1\206"+
    "\13\21\1\206\33\21\1\101\4\0\1\77\7\0\10\21"+
    "\1\206\27\21\1\206\26\21\1\101\4\0\1\77\7\0"+
    "\13\21\1\112\15\21\1\112\35\21\1\101\4\0\1\77"+
    "\7\0\5\21\1\112\3\21\1\112\22\21\1\112\4\21"+
    "\1\112\25\21\1\101\4\0\1\77\7\0\30\21\1\207"+
    "\36\21\1\101\4\0\1\77\7\0\1\21\1\207\25\21"+
    "\1\207\37\21\1\101\4\0\1\77\7\0\1\21\1\210"+
    "\7\21\1\210\15\21\1\210\4\21\1\210\32\21\1\101"+
    "\4\0\1\77\7\0\32\21\1\112\34\21\1\101\4\0"+
    "\1\77\7\0\30\21\1\211\36\21\1\101\4\0\1\77"+
    "\7\0\13\21\1\212\5\21\1\104\1\112\1\21\1\104"+
    "\3\21\1\213\1\212\1\214\22\21\1\112\1\21\1\104"+
    "\1\115\5\104\1\21\1\101\4\0\1\77\7\0\14\21"+
    "\1\215\4\21\1\104\1\21\1\216\1\104\1\21\1\215"+
    "\15\21\1\216\13\21\6\104\1\21\1\101\4\0\1\77"+
    "\7\0\17\21\1\217\13\21\1\217\11\21\1\220\21\21"+
    "\1\101\4\0\1\77\7\0\21\21\1\104\2\21\1\104"+
    "\32\21\1\104\1\115\5\104\1\21\1\101\4\0\1\77"+
    "\7\0\1\21\1\221\25\21\1\221\16\21\1\222\20\21"+
    "\1\101\4\0\1\77\7\0\1\21\1\211\7\21\1\211"+
    "\10\21\1\112\4\21\1\211\4\21\1\211\20\21\1\112"+
    "\11\21\1\101\4\0\1\77\7\0\21\21\1\104\2\21"+
    "\1\104\32\21\7\104\1\21\1\101\4\0\1\77\7\0"+
    "\10\21\1\223\27\21\1\223\26\21\1\101\4\0\1\77"+
    "\7\0\14\21\1\215\6\21\1\216\2\21\1\215\15\21"+
    "\1\216\22\21\1\101\4\0\1\77\7\0\4\21\1\224"+
    "\1\21\1\225\1\21\1\226\21\21\1\227\4\21\1\225"+
    "\1\226\4\21\1\230\2\21\1\224\16\21\1\101\4\0"+
    "\1\77\7\0\13\21\1\212\6\21\1\112\5\21\1\213"+
    "\1\212\1\214\22\21\1\112\11\21\1\101\35\0\1\76"+
    "\2\0\1\76\32\0\7\76\37\0\1\231\2\0\1\231"+
    "\32\0\7\231\2\0\1\232\3\0\1\77\7\0\45\21"+
    "\1\127\21\21\1\101\4\0\1\77\7\0\17\21\1\233"+
    "\13\21\1\233\33\21\1\101\4\0\1\77\7\0\17\21"+
    "\1\234\13\21\1\234\33\21\1\101\74\0\1\235\1\0"+
    "\1\235\22\0\1\236\4\0\2\236\4\0\1\236\3\0"+
    "\2\236\1\0\2\236\1\0\2\236\7\0\1\236\2\0"+
    "\1\236\1\0\1\236\7\0\1\236\2\0\7\236\20\0"+
    "\1\237\124\0\1\75\67\0\1\240\102\0\1\241\77\0"+
    "\1\242\104\0\1\243\106\0\1\170\104\0\1\244\104\0"+
    "\1\245\120\0\1\246\61\0\1\247\104\0\1\250\116\0"+
    "\1\164\75\0\1\251\111\0\1\252\76\0\1\253\74\0"+
    "\1\254\115\0\1\171\70\0\1\255\112\0\1\256\72\0"+
    "\67\200\1\101\4\0\1\77\7\0\3\21\1\104\63\21"+
    "\1\101\4\0\1\77\7\0\1\21\1\257\25\21\1\257"+
    "\37\21\1\101\4\0\1\77\7\0\1\112\35\21\1\112"+
    "\30\21\1\101\4\0\1\77\7\0\1\112\7\21\1\127"+
    "\21\21\1\112\3\21\1\112\1\21\1\127\26\21\1\101"+
    "\4\0\1\77\7\0\5\21\1\260\33\21\1\260\25\21"+
    "\1\101\4\0\1\77\7\0\17\21\1\112\13\21\1\112"+
    "\33\21\1\101\4\0\1\77\7\0\1\112\31\21\1\112"+
    "\3\21\1\112\30\21\1\101\4\0\1\261\7\0\67\21"+
    "\1\101\4\0\1\77\7\0\12\21\1\262\22\21\1\262"+
    "\31\21\1\101\4\0\1\77\7\0\2\21\1\263\47\21"+
    "\1\263\14\21\1\101\4\0\1\77\7\0\14\21\1\211"+
    "\11\21\1\211\40\21\1\101\4\0\1\77\7\0\4\21"+
    "\1\211\43\21\1\211\16\21\1\101\4\0\1\77\7\0"+
    "\23\21\1\211\20\21\1\211\22\21\1\101\4\0\1\77"+
    "\7\0\6\21\1\264\30\21\1\264\27\21\1\101\4\0"+
    "\1\77\7\0\11\21\1\265\22\21\1\265\32\21\1\101"+
    "\4\0\1\77\7\0\13\21\1\211\15\21\1\211\35\21"+
    "\1\101\4\0\1\77\7\0\4\21\1\224\1\21\1\266"+
    "\30\21\1\266\10\21\1\224\16\21\1\101\4\0\1\77"+
    "\7\0\45\21\1\211\21\21\1\101\4\0\1\77\7\0"+
    "\32\21\1\214\34\21\1\101\4\0\1\77\7\0\23\21"+
    "\1\216\1\21\1\211\16\21\1\216\6\21\1\211\13\21"+
    "\1\101\4\0\1\77\7\0\12\21\1\211\22\21\1\211"+
    "\31\21\1\101\4\0\1\77\7\0\17\21\1\211\13\21"+
    "\1\211\33\21\1\101\4\0\1\267\7\0\67\21\1\101"+
    "\35\0\1\231\2\0\1\231\32\0\7\231\6\0\1\77"+
    "\7\0\2\21\1\112\47\21\1\112\14\21\1\101\4\0"+
    "\1\77\7\0\16\21\1\270\30\21\1\270\17\21\1\101"+
    "\17\0\1\250\111\0\1\271\101\0\1\251\104\0\1\173"+
    "\75\0\1\246\111\0\1\272\106\0\1\273\101\0\1\250"+
    "\106\0\1\274\70\0\1\250\122\0\1\250\76\0\1\250"+
    "\76\0\1\246\120\0\1\250\66\0\1\250\65\0\1\77"+
    "\7\0\6\21\1\275\30\21\1\275\27\21\1\101\4\0"+
    "\1\77\7\0\7\21\1\112\32\21\1\112\24\21\1\101"+
    "\14\0\4\200\1\276\43\200\1\276\16\200\5\0\1\77"+
    "\7\0\43\21\1\277\23\21\1\101\4\0\1\77\7\0"+
    "\11\21\1\211\22\21\1\211\32\21\1\101\4\0\1\77"+
    "\7\0\4\21\1\215\43\21\1\215\16\21\1\101\4\0"+
    "\1\300\7\0\67\21\1\101\4\0\1\77\7\0\23\21"+
    "\1\216\20\21\1\216\22\21\1\101\14\0\4\200\1\301"+
    "\15\200\1\302\2\200\1\303\22\200\1\301\2\200\1\303"+
    "\1\200\1\302\11\200\5\0\1\77\7\0\4\21\1\304"+
    "\25\21\1\112\15\21\1\304\16\21\1\101\24\0\1\305"+
    "\73\0\1\250\7\0\1\306\105\0\1\250\77\0\1\307"+
    "\10\0\1\250\54\0\1\77\7\0\56\21\1\112\10\21"+
    "\1\101\4\0\1\261\7\0\12\21\1\211\12\21\1\211"+
    "\7\21\1\211\15\21\1\211\13\21\1\101\14\0\4\200"+
    "\1\310\15\200\1\311\25\200\1\310\4\200\1\311\11\200"+
    "\5\0\1\312\7\0\67\200\1\101\4\0\1\313\7\0"+
    "\67\200\1\101\17\0\1\273\100\0\1\250\122\0\1\250"+
    "\54\0\1\314\7\0\67\200\1\101\4\0\1\315\7\0"+
    "\32\200\1\316\34\200\1\101\41\0\1\317\25\0\1\317"+
    "\34\0\1\317\15\0\1\317\25\0\1\317\4\0\1\317"+
    "\50\0\1\320\32\0\1\320\32\0\1\317\43\0\1\317"+
    "\23\0\1\315\7\0\67\200\1\101\46\0\1\317\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12444];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\4\11\32\1\4\11\1\0\4\11"+
    "\14\0\1\1\2\0\1\1\1\0\1\1\1\11\43\1"+
    "\2\0\3\1\26\0\32\1\1\0\4\1\11\0\1\11"+
    "\6\0\2\1\1\0\5\1\1\0\1\1\4\0\3\1"+
    "\1\0\4\1\1\0\1\1\1\0\2\1\4\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  /** previous jflex state */
  private int prevState;

  /**
   * This method creates a new Token
   *
   * @param style token style class
   * @param length token length
   */
  private Token symbol(String style, int length) {
    return new Token(style, length);
  }

  /**
   * This method creates a new Token
   *
   * @param style token style class
   */
  private Token symbol(String style) {
    return this.symbol(style, yytext().length());
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.prevState = YYINITIAL;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return symbol("eof");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol("error");
            } 
            // fall through
          case 20: break;
          case 2: 
            { return symbol("syntax");
            } 
            // fall through
          case 21: break;
          case 3: 
            { yybegin(STRING);
    return symbol("string");
            } 
            // fall through
          case 22: break;
          case 4: 
            { return symbol("empty");
            } 
            // fall through
          case 23: break;
          case 5: 
            { yybegin(CHARACTER);
    return symbol("string");
            } 
            // fall through
          case 24: break;
          case 6: 
            { return symbol("identifier");
            } 
            // fall through
          case 25: break;
          case 7: 
            { return symbol("number");
            } 
            // fall through
          case 26: break;
          case 8: 
            { return symbol("keyword");
            } 
            // fall through
          case 27: break;
          case 9: 
            { yybegin(COMMENT);
    return symbol("comment");
            } 
            // fall through
          case 28: break;
          case 10: 
            { return symbol("string");
            } 
            // fall through
          case 29: break;
          case 11: 
            { yybegin(YYINITIAL);
    return symbol("string");
            } 
            // fall through
          case 30: break;
          case 12: 
            { this.prevState = STRING;
    yybegin(SBACKSLASH);
    return symbol("stringb");
            } 
            // fall through
          case 31: break;
          case 13: 
            { yybegin(this.prevState);
    return symbol("stringb");
            } 
            // fall through
          case 32: break;
          case 14: 
            { this.prevState = CHARACTER;
    yybegin(SBACKSLASH);
    return symbol("stringb");
            } 
            // fall through
          case 33: break;
          case 15: 
            { return symbol("comment");
            } 
            // fall through
          case 34: break;
          case 16: 
            { yybegin(YYINITIAL);
    return symbol("empty");
            } 
            // fall through
          case 35: break;
          case 17: 
            { return symbol("label");
            } 
            // fall through
          case 36: break;
          case 18: 
            { return symbol("register");
            } 
            // fall through
          case 37: break;
          case 19: 
            { return symbol("directive");
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
