/* The following code was generated by JFlex 1.7.0 */

package vsim.gui.utils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>syntax/guilexer.flex</tt>
 */
public final class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SBACKSLASH = 4;
  public static final int CHARACTER = 6;
  public static final int COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\105\1\11\1\13\1\13\1\12\22\0\1\105\1\0\1\7"+
    "\1\106\1\0\1\3\1\3\1\14\1\2\1\2\1\3\1\4\1\2"+
    "\1\4\1\1\1\3\1\77\1\75\1\36\1\76\1\41\2\100\1\101"+
    "\1\102\1\74\1\104\1\106\1\5\1\0\1\6\2\0\1\54\1\43"+
    "\1\57\1\61\1\44\1\71\1\46\1\64\1\55\1\60\1\73\1\50"+
    "\1\63\1\52\1\66\1\56\1\45\1\67\1\65\1\51\1\47\1\62"+
    "\1\72\1\70\1\103\1\53\1\0\1\10\1\0\1\3\1\103\1\0"+
    "\1\23\1\31\1\24\1\40\1\16\1\35\1\30\1\33\1\25\1\60"+
    "\1\73\1\34\1\63\1\27\1\20\1\22\1\45\1\17\1\21\1\26"+
    "\1\47\1\62\1\37\1\42\1\32\1\15\1\0\1\3\1\0\1\3"+
    "\6\0\1\13\u1fa2\0\1\13\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\2\3\2\1\1\4\1\5\1\6"+
    "\16\7\1\10\4\7\1\11\4\7\1\10\1\12\1\13"+
    "\1\14\1\15\1\0\1\16\1\17\1\20\1\21\14\0"+
    "\1\10\2\0\1\10\1\0\1\3\1\0\1\7\1\22"+
    "\2\7\1\23\1\11\4\7\1\11\2\7\1\23\11\7"+
    "\1\11\10\7\1\23\4\7\1\0\3\7\26\0\4\7"+
    "\1\11\2\7\2\11\20\7\1\0\1\10\2\11\2\10"+
    "\11\0\1\24\6\0\2\7\1\0\5\7\1\0\1\11"+
    "\4\0\1\7\1\11\1\7\1\0\1\11\3\7\1\0"+
    "\1\24\1\0\2\7\4\0\1\7\2\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u0163"+
    "\0\u0163\0\u01f1\0\u0238\0\u027f\0\u0163\0\u0163\0\u0163\0\u02c6"+
    "\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe"+
    "\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736"+
    "\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e"+
    "\0\u0163\0\u0163\0\u0163\0\u0163\0\u09b5\0\u0163\0\u0163\0\u0163"+
    "\0\u0163\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde"+
    "\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0163\0\u0f88\0\u0fcf"+
    "\0\u0429\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u0429\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1016\0\u1514\0\u155b\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a"+
    "\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82"+
    "\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u2101\0\u2148\0\u2073\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3"+
    "\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u2646\0\u268d\0\u26d4"+
    "\0\u1984\0\u19cb\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e"+
    "\0\u28c5\0\u290c\0\u2953\0\u0163\0\u299a\0\u29e1\0\u2a28\0\u2a6f"+
    "\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf"+
    "\0\u2f26\0\u1f9e\0\u2f6d\0\u2fb4\0\u2ffb\0\u2ffb\0\u3042\0\u14cd"+
    "\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u0163\0\u334f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\6\2\16\1\0\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\25\1\30\1\31\1\32"+
    "\1\33\2\25\1\34\1\35\1\36\1\25\1\37\1\36"+
    "\1\40\1\33\1\21\3\25\1\34\1\41\1\31\1\25"+
    "\1\42\2\25\1\27\1\43\1\37\1\25\1\44\1\25"+
    "\1\45\1\23\1\46\1\40\1\47\2\25\3\36\1\50"+
    "\3\36\1\25\1\6\1\16\1\51\7\52\1\53\1\54"+
    "\1\52\1\55\1\0\73\52\12\56\2\0\73\56\10\52"+
    "\1\57\1\52\1\55\1\0\1\53\72\52\11\60\1\61"+
    "\1\62\1\0\73\60\124\0\1\63\1\0\1\64\1\0"+
    "\1\65\1\66\1\67\2\0\1\70\1\0\1\71\1\72"+
    "\1\0\1\73\1\74\1\75\1\76\1\77\1\100\1\76"+
    "\32\0\7\101\5\0\1\102\34\0\1\36\2\0\1\36"+
    "\32\0\7\36\11\0\1\11\107\0\1\103\101\0\1\104"+
    "\13\0\1\25\1\105\65\25\1\106\3\0\1\104\13\0"+
    "\7\25\1\27\4\25\1\107\11\25\1\107\13\25\1\27"+
    "\24\25\1\106\3\0\1\104\13\0\1\25\1\110\4\25"+
    "\1\111\20\25\1\110\37\25\1\106\3\0\1\104\13\0"+
    "\2\25\1\112\47\25\1\112\14\25\1\106\3\0\1\104"+
    "\13\0\1\25\1\113\1\114\2\25\1\111\4\25\1\115"+
    "\1\116\1\117\1\25\1\117\1\120\1\25\1\111\1\117"+
    "\1\25\1\111\1\25\1\117\1\113\1\25\1\116\1\121"+
    "\1\120\1\25\1\115\11\25\1\117\2\25\1\114\2\25"+
    "\1\117\1\25\1\111\1\122\5\111\1\25\1\106\3\0"+
    "\1\104\13\0\67\25\1\106\3\0\1\104\13\0\12\25"+
    "\1\123\6\25\1\111\1\25\1\123\1\111\5\25\1\124"+
    "\2\25\1\123\6\25\1\123\13\25\5\111\2\25\1\106"+
    "\3\0\1\104\13\0\6\25\1\125\30\25\1\125\27\25"+
    "\1\106\3\0\1\104\13\0\5\25\1\111\1\126\12\25"+
    "\1\111\2\25\1\111\12\25\1\126\20\25\4\111\3\25"+
    "\1\106\3\0\1\104\13\0\1\25\1\127\1\25\1\130"+
    "\23\25\1\127\21\25\1\130\15\25\1\106\3\0\1\104"+
    "\13\0\5\25\1\111\61\25\1\106\3\0\1\104\13\0"+
    "\1\25\1\131\10\25\1\132\1\133\3\25\1\133\7\25"+
    "\1\131\1\25\1\133\1\25\1\133\1\25\1\132\31\25"+
    "\1\106\3\0\1\104\13\0\6\25\1\117\1\25\1\117"+
    "\3\25\1\134\1\25\1\134\3\25\1\117\3\25\1\134"+
    "\3\25\1\135\4\25\2\117\6\25\1\134\5\25\1\117"+
    "\11\25\1\106\3\0\1\104\13\0\1\25\1\136\2\25"+
    "\1\137\1\111\1\140\1\141\1\25\1\142\1\143\4\25"+
    "\1\144\1\25\1\145\1\25\1\146\1\111\2\25\1\136"+
    "\3\25\1\144\1\25\1\143\1\25\1\147\2\25\1\141"+
    "\1\25\1\146\1\25\1\150\1\25\1\151\6\25\1\111"+
    "\1\145\1\122\4\111\1\25\1\106\3\0\1\102\14\0"+
    "\1\152\17\0\1\36\2\0\1\36\2\0\1\152\27\0"+
    "\7\36\5\0\1\104\13\0\10\25\1\153\27\25\1\153"+
    "\26\25\1\106\3\0\1\104\13\0\3\25\1\23\15\25"+
    "\1\145\2\25\1\111\24\25\1\23\5\25\1\111\1\145"+
    "\1\122\4\111\1\25\1\106\3\0\1\104\13\0\6\25"+
    "\1\126\30\25\1\126\27\25\1\106\3\0\1\104\13\0"+
    "\12\25\1\123\10\25\1\123\6\25\1\124\2\25\1\123"+
    "\6\25\1\123\22\25\1\106\3\0\1\104\13\0\2\25"+
    "\1\117\3\25\1\154\30\25\1\154\12\25\1\117\14\25"+
    "\1\106\3\0\1\104\13\0\32\25\1\155\12\25\1\117"+
    "\21\25\1\106\3\0\1\104\13\0\1\25\1\113\1\114"+
    "\7\25\1\115\1\116\1\117\1\25\1\117\1\120\2\25"+
    "\1\117\3\25\1\117\1\113\1\25\1\116\1\121\1\120"+
    "\1\25\1\115\11\25\1\117\2\25\1\114\2\25\1\117"+
    "\11\25\1\106\3\0\1\104\13\0\1\25\1\110\25\25"+
    "\1\110\37\25\1\106\3\0\1\104\13\0\1\25\1\136"+
    "\2\25\1\151\1\25\1\147\1\141\2\25\1\143\4\25"+
    "\1\144\1\25\1\145\1\25\1\146\1\111\2\25\1\136"+
    "\3\25\1\144\1\25\1\143\1\25\1\147\2\25\1\141"+
    "\1\25\1\146\1\25\1\150\1\25\1\151\6\25\1\111"+
    "\1\145\1\122\4\111\1\25\1\106\3\0\1\102\14\0"+
    "\1\152\12\0\1\156\4\0\1\36\2\0\1\36\1\157"+
    "\1\156\1\152\23\0\1\157\3\0\7\36\15\0\1\52"+
    "\106\0\1\61\113\0\1\160\110\0\1\161\104\0\1\162"+
    "\3\0\1\163\3\0\1\164\4\0\1\165\111\0\1\166"+
    "\71\0\1\167\12\0\1\170\70\0\1\171\124\0\1\172"+
    "\73\0\1\173\1\0\1\174\6\0\1\175\77\0\1\176"+
    "\103\0\1\177\122\0\1\200\70\0\1\152\12\0\1\201"+
    "\4\0\1\101\2\0\1\101\2\0\1\152\27\0\7\101"+
    "\24\0\1\202\111\0\1\203\101\0\1\152\17\0\1\101"+
    "\2\0\1\101\2\0\1\152\27\0\7\101\42\0\1\101"+
    "\2\0\1\101\32\0\7\101\12\0\1\11\115\0\67\204"+
    "\4\0\1\104\13\0\2\25\1\205\64\25\1\106\3\0"+
    "\1\104\13\0\2\25\1\206\47\25\1\206\14\25\1\106"+
    "\3\0\1\104\13\0\11\25\1\117\22\25\1\117\11\25"+
    "\1\134\20\25\1\106\3\0\1\104\13\0\10\25\1\117"+
    "\27\25\1\117\26\25\1\106\3\0\1\104\13\0\30\25"+
    "\1\207\36\25\1\106\3\0\1\104\13\0\6\25\1\112"+
    "\10\25\1\112\13\25\1\112\3\25\1\112\27\25\1\106"+
    "\3\0\1\104\13\0\1\25\1\207\25\25\1\207\37\25"+
    "\1\106\3\0\1\104\13\0\11\25\1\207\22\25\1\207"+
    "\32\25\1\106\3\0\1\104\13\0\11\25\1\210\5\25"+
    "\1\112\13\25\1\112\1\210\32\25\1\106\3\0\1\104"+
    "\13\0\14\25\1\117\11\25\1\117\40\25\1\106\3\0"+
    "\1\104\13\0\60\25\1\111\1\25\1\111\4\25\1\106"+
    "\3\0\1\104\13\0\23\25\1\112\20\25\1\112\22\25"+
    "\1\106\3\0\1\104\13\0\10\25\1\211\27\25\1\211"+
    "\26\25\1\106\3\0\1\104\13\0\17\25\1\212\13\25"+
    "\1\212\33\25\1\106\3\0\1\104\13\0\10\25\1\212"+
    "\27\25\1\212\26\25\1\106\3\0\1\104\13\0\13\25"+
    "\1\117\15\25\1\117\35\25\1\106\3\0\1\104\13\0"+
    "\5\25\1\117\3\25\1\117\22\25\1\117\4\25\1\117"+
    "\25\25\1\106\3\0\1\104\13\0\30\25\1\213\36\25"+
    "\1\106\3\0\1\104\13\0\1\25\1\213\25\25\1\213"+
    "\37\25\1\106\3\0\1\104\13\0\1\25\1\214\7\25"+
    "\1\214\15\25\1\214\4\25\1\214\32\25\1\106\3\0"+
    "\1\104\13\0\32\25\1\117\34\25\1\106\3\0\1\104"+
    "\13\0\30\25\1\215\36\25\1\106\3\0\1\104\13\0"+
    "\13\25\1\216\5\25\1\111\1\117\1\25\1\111\3\25"+
    "\1\217\1\216\1\220\22\25\1\117\1\25\1\111\1\122"+
    "\5\111\1\25\1\106\3\0\1\104\13\0\14\25\1\221"+
    "\4\25\1\111\1\25\1\222\1\111\1\25\1\221\15\25"+
    "\1\222\13\25\6\111\1\25\1\106\3\0\1\104\13\0"+
    "\17\25\1\223\13\25\1\223\11\25\1\224\21\25\1\106"+
    "\3\0\1\104\13\0\21\25\1\111\2\25\1\111\32\25"+
    "\1\111\1\122\5\111\1\25\1\106\3\0\1\104\13\0"+
    "\1\25\1\225\25\25\1\225\16\25\1\226\20\25\1\106"+
    "\3\0\1\104\13\0\1\25\1\215\7\25\1\215\10\25"+
    "\1\117\4\25\1\215\4\25\1\215\20\25\1\117\11\25"+
    "\1\106\3\0\1\104\13\0\21\25\1\111\2\25\1\111"+
    "\32\25\7\111\1\25\1\106\3\0\1\104\13\0\10\25"+
    "\1\227\27\25\1\227\26\25\1\106\3\0\1\104\13\0"+
    "\14\25\1\221\6\25\1\222\2\25\1\221\15\25\1\222"+
    "\22\25\1\106\3\0\1\104\13\0\4\25\1\230\1\25"+
    "\1\231\1\25\1\232\21\25\1\233\4\25\1\231\1\232"+
    "\4\25\1\234\2\25\1\230\16\25\1\106\3\0\1\104"+
    "\13\0\13\25\1\216\6\25\1\117\5\25\1\217\1\216"+
    "\1\220\22\25\1\117\11\25\1\106\6\0\1\235\31\0"+
    "\1\236\2\0\1\236\32\0\7\236\5\0\1\104\13\0"+
    "\45\25\1\134\21\25\1\106\3\0\1\104\13\0\17\25"+
    "\1\237\13\25\1\237\33\25\1\106\3\0\1\104\13\0"+
    "\17\25\1\240\13\25\1\240\33\25\1\106\77\0\1\241"+
    "\1\0\1\241\25\0\1\242\4\0\2\242\4\0\1\242"+
    "\3\0\2\242\1\0\2\242\1\0\2\242\7\0\1\242"+
    "\2\0\1\242\1\0\1\242\7\0\1\242\2\0\7\242"+
    "\23\0\1\243\127\0\1\100\72\0\1\244\105\0\1\245"+
    "\102\0\1\246\107\0\1\247\111\0\1\174\107\0\1\250"+
    "\107\0\1\251\123\0\1\252\64\0\1\253\107\0\1\254"+
    "\121\0\1\170\100\0\1\255\114\0\1\256\101\0\1\257"+
    "\77\0\1\260\120\0\1\175\73\0\1\261\115\0\1\262"+
    "\75\0\67\204\1\106\3\0\1\104\13\0\3\25\1\111"+
    "\63\25\1\106\3\0\1\104\13\0\1\25\1\263\25\25"+
    "\1\263\37\25\1\106\3\0\1\104\13\0\1\117\35\25"+
    "\1\117\30\25\1\106\3\0\1\104\13\0\1\117\7\25"+
    "\1\134\21\25\1\117\3\25\1\117\1\25\1\134\26\25"+
    "\1\106\3\0\1\104\13\0\5\25\1\264\33\25\1\264"+
    "\25\25\1\106\3\0\1\104\13\0\17\25\1\117\13\25"+
    "\1\117\33\25\1\106\3\0\1\104\13\0\1\117\31\25"+
    "\1\117\3\25\1\117\30\25\1\106\3\0\1\265\13\0"+
    "\67\25\1\106\3\0\1\104\13\0\12\25\1\266\22\25"+
    "\1\266\31\25\1\106\3\0\1\104\13\0\2\25\1\267"+
    "\47\25\1\267\14\25\1\106\3\0\1\104\13\0\14\25"+
    "\1\215\11\25\1\215\40\25\1\106\3\0\1\104\13\0"+
    "\4\25\1\215\43\25\1\215\16\25\1\106\3\0\1\104"+
    "\13\0\23\25\1\215\20\25\1\215\22\25\1\106\3\0"+
    "\1\104\13\0\6\25\1\270\30\25\1\270\27\25\1\106"+
    "\3\0\1\104\13\0\11\25\1\271\22\25\1\271\32\25"+
    "\1\106\3\0\1\104\13\0\13\25\1\215\15\25\1\215"+
    "\35\25\1\106\3\0\1\104\13\0\4\25\1\230\1\25"+
    "\1\272\30\25\1\272\10\25\1\230\16\25\1\106\3\0"+
    "\1\104\13\0\45\25\1\215\21\25\1\106\3\0\1\104"+
    "\13\0\32\25\1\220\34\25\1\106\3\0\1\104\13\0"+
    "\23\25\1\222\1\25\1\215\16\25\1\222\6\25\1\215"+
    "\13\25\1\106\3\0\1\104\13\0\12\25\1\215\22\25"+
    "\1\215\31\25\1\106\3\0\1\104\13\0\17\25\1\215"+
    "\13\25\1\215\33\25\1\106\3\0\1\273\13\0\67\25"+
    "\1\106\40\0\1\236\2\0\1\236\32\0\7\236\5\0"+
    "\1\104\13\0\2\25\1\117\47\25\1\117\14\25\1\106"+
    "\3\0\1\104\13\0\16\25\1\274\30\25\1\274\17\25"+
    "\1\106\22\0\1\254\114\0\1\275\104\0\1\255\107\0"+
    "\1\177\100\0\1\252\114\0\1\276\111\0\1\277\104\0"+
    "\1\254\111\0\1\300\73\0\1\254\125\0\1\254\101\0"+
    "\1\254\101\0\1\252\123\0\1\254\71\0\1\254\64\0"+
    "\1\104\13\0\6\25\1\301\30\25\1\301\27\25\1\106"+
    "\3\0\1\104\13\0\7\25\1\117\32\25\1\117\24\25"+
    "\1\106\17\0\4\204\1\302\43\204\1\302\16\204\4\0"+
    "\1\104\13\0\43\25\1\303\23\25\1\106\3\0\1\104"+
    "\13\0\11\25\1\215\22\25\1\215\32\25\1\106\3\0"+
    "\1\104\13\0\4\25\1\221\43\25\1\221\16\25\1\106"+
    "\3\0\1\304\13\0\67\25\1\106\3\0\1\104\13\0"+
    "\23\25\1\222\20\25\1\222\22\25\1\106\17\0\4\204"+
    "\1\305\15\204\1\306\2\204\1\307\22\204\1\305\2\204"+
    "\1\307\1\204\1\306\11\204\4\0\1\104\13\0\4\25"+
    "\1\310\25\25\1\117\15\25\1\310\16\25\1\106\27\0"+
    "\1\311\76\0\1\254\7\0\1\312\110\0\1\254\102\0"+
    "\1\313\10\0\1\254\53\0\1\104\13\0\56\25\1\117"+
    "\10\25\1\106\3\0\1\265\13\0\12\25\1\215\12\25"+
    "\1\215\7\25\1\215\15\25\1\215\13\25\1\106\17\0"+
    "\4\204\1\314\15\204\1\315\25\204\1\314\4\204\1\315"+
    "\11\204\4\0\1\316\13\0\67\204\1\106\3\0\1\317"+
    "\13\0\67\204\1\106\22\0\1\277\103\0\1\254\125\0"+
    "\1\254\53\0\1\320\13\0\67\204\1\106\3\0\1\321"+
    "\13\0\32\204\1\322\34\204\1\106\44\0\1\323\25\0"+
    "\1\323\37\0\1\323\15\0\1\323\25\0\1\323\4\0"+
    "\1\323\53\0\1\324\32\0\1\324\35\0\1\323\43\0"+
    "\1\323\22\0\1\321\13\0\67\204\1\106\51\0\1\323"+
    "\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13206];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\3\1\3\11\31\1\4\11"+
    "\1\0\4\11\14\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\43\1\1\0\3\1\26\0\31\1"+
    "\1\0\5\1\11\0\1\11\6\0\2\1\1\0\5\1"+
    "\1\0\1\1\4\0\3\1\1\0\4\1\1\0\1\1"+
    "\1\0\2\1\4\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  /** previous jflex state */
  private int prevState;

  /**
   * This method creates a new Token
   *
   * @param style token style class
   * @param length token length
   */
  private Token symbol(String style, int length) {
    return new Token(style, length);
  }

  /**
   * This method creates a new Token
   *
   * @param style token style class
   */
  private Token symbol(String style) {
    return this.symbol(style, yytext().length());
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.prevState = YYINITIAL;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return symbol("eof");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol("error");
            } 
            // fall through
          case 21: break;
          case 2: 
            { return symbol("syntax");
            } 
            // fall through
          case 22: break;
          case 3: 
            { return symbol("operator");
            } 
            // fall through
          case 23: break;
          case 4: 
            { yybegin(STRING);
    return symbol("string");
            } 
            // fall through
          case 24: break;
          case 5: 
            { return symbol("empty");
            } 
            // fall through
          case 25: break;
          case 6: 
            { yybegin(CHARACTER);
    return symbol("string");
            } 
            // fall through
          case 26: break;
          case 7: 
            { return symbol("identifier");
            } 
            // fall through
          case 27: break;
          case 8: 
            { return symbol("number");
            } 
            // fall through
          case 28: break;
          case 9: 
            { return symbol("keyword");
            } 
            // fall through
          case 29: break;
          case 10: 
            { yybegin(COMMENT);
    return symbol("comment");
            } 
            // fall through
          case 30: break;
          case 11: 
            { return symbol("string");
            } 
            // fall through
          case 31: break;
          case 12: 
            { yybegin(YYINITIAL);
    return symbol("string");
            } 
            // fall through
          case 32: break;
          case 13: 
            { this.prevState = STRING;
    yybegin(SBACKSLASH);
    return symbol("stringb");
            } 
            // fall through
          case 33: break;
          case 14: 
            { yybegin(this.prevState);
    return symbol("stringb");
            } 
            // fall through
          case 34: break;
          case 15: 
            { this.prevState = CHARACTER;
    yybegin(SBACKSLASH);
    return symbol("stringb");
            } 
            // fall through
          case 35: break;
          case 16: 
            { return symbol("comment");
            } 
            // fall through
          case 36: break;
          case 17: 
            { yybegin(YYINITIAL);
    return symbol("empty");
            } 
            // fall through
          case 37: break;
          case 18: 
            { return symbol("label");
            } 
            // fall through
          case 38: break;
          case 19: 
            { return symbol("register");
            } 
            // fall through
          case 39: break;
          case 20: 
            { return symbol("directive");
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
