/*
Copyright (C) 2018-2019 Andres Castellanos

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>
*/

package jupiter.asm;

import java_cup.runtime.Symbol;

import jupiter.riscv.hardware.RVFRegisterFile;
import jupiter.riscv.hardware.RVIRegisterFile;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/syntax/lexer.flex</tt>
 */
public final class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;
  public static final int SBACKSLASH = 6;
  public static final int CHARACTER = 8;
  public static final int CBACKSLASH = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\103\1\5\1\4\1\4\1\6\22\0\1\103\1\0\1\7"+
    "\1\12\1\60\1\76\1\0\1\11\1\2\1\3\1\0\1\100\1\1"+
    "\1\100\1\43\1\0\1\101\1\102\1\71\1\45\1\74\5\45\1\61"+
    "\1\12\5\0\1\16\1\23\1\20\1\34\1\24\1\37\1\30\1\31"+
    "\1\15\1\21\1\40\1\13\1\41\1\26\1\36\1\17\1\25\1\22"+
    "\1\33\1\27\1\14\1\42\1\32\1\35\1\60\1\44\1\0\1\10"+
    "\2\0\1\77\1\0\1\52\1\66\1\64\1\73\1\47\1\57\1\55"+
    "\1\70\1\62\1\21\1\40\1\63\1\41\1\65\1\51\1\54\1\25"+
    "\1\50\1\53\1\56\1\14\1\104\1\72\1\75\1\67\1\46\12\0"+
    "\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\4\11\1\12\13\11\1\1\1\13\7\11\2\1"+
    "\1\13\1\14\1\15\2\16\1\17\2\20\1\21\1\22"+
    "\2\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\11\1\54\1\55\1\56\1\57\1\60\1\0"+
    "\1\61\6\11\1\62\15\11\1\63\3\11\1\64\1\65"+
    "\2\11\1\66\1\67\11\11\1\70\1\11\1\71\1\72"+
    "\1\73\13\72\1\73\2\72\1\73\2\0\1\11\1\66"+
    "\3\11\5\0\1\74\1\75\1\76\1\11\1\77\1\100"+
    "\2\11\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\2\11\1\112\1\113\1\114\1\11\1\115"+
    "\1\116\1\117\1\120\1\121\3\11\1\122\1\123\1\124"+
    "\2\11\1\125\20\11\1\126\7\11\1\127\1\0\22\72"+
    "\1\0\2\72\1\0\1\73\1\0\1\11\1\0\1\130"+
    "\1\131\1\132\1\133\1\11\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147"+
    "\1\150\1\151\1\152\1\153\1\154\1\155\1\156\2\11"+
    "\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
    "\1\167\1\170\1\171\1\172\2\0\5\11\1\173\1\11"+
    "\1\0\6\11\1\174\11\11\1\0\1\175\17\72\1\176"+
    "\2\72\1\0\2\72\2\0\1\177\1\200\1\201\1\202"+
    "\1\203\1\204\1\205\1\206\1\11\1\207\1\210\1\211"+
    "\2\0\1\11\1\0\1\212\1\11\1\213\1\214\1\0"+
    "\2\11\1\0\1\215\3\11\3\0\1\11\1\0\2\11"+
    "\1\216\1\11\1\217\1\11\1\220\10\72\1\221\1\222"+
    "\1\72\1\223\1\72\1\224\1\225\1\0\1\226\2\0"+
    "\1\227\1\230\1\231\1\232\1\233\1\234\4\11\1\235"+
    "\2\11\1\236\1\0\2\11\1\0\1\11\1\237\1\240"+
    "\1\241\1\0\1\242\3\0\1\243\1\72\1\244\1\245"+
    "\1\246\3\72\1\247\1\250\1\72\1\225\1\223\2\0"+
    "\1\11\2\0\1\251\2\0\1\252\2\0\1\253\1\254"+
    "\1\255\1\256\1\257\1\260\1\261\1\72\1\262\1\0"+
    "\1\263\1\0\1\264\1\265\1\266\1\267\1\270\1\271"+
    "\1\272\2\0\1\273\1\274\1\275\1\276";

  private static int [] zzUnpackAction() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u01e3\0\u019e\0\u019e\0\u019e\0\u0228\0\u026d"+
    "\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495"+
    "\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd"+
    "\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5"+
    "\0\u092a\0\u096f\0\u019e\0\u019e\0\u019e\0\u09b4\0\u019e\0\u019e"+
    "\0\u09f9\0\u019e\0\u019e\0\u019e\0\u0a3e\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e"+
    "\0\u0a83\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u0ac8\0\u026d"+
    "\0\u026d\0\u0b0d\0\u0b52\0\u026d\0\u0b97\0\u019e\0\u0bdc\0\u0c21"+
    "\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u026d\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u10b6\0\u026d\0\u10fb\0\u1140\0\u1185\0\u026d\0\u026d"+
    "\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u026d"+
    "\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u026d\0\u1b39\0\u1b7e\0\u154b"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u026d\0\u026d\0\u026d"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u026d\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2"+
    "\0\u026d\0\u026d\0\u026d\0\u2127\0\u216c\0\u21b1\0\u026d\0\u21f6"+
    "\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u026d\0\u23d9"+
    "\0\u241e\0\u026d\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc"+
    "\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u026d\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17"+
    "\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f"+
    "\0\u3084\0\u30c9\0\u310e\0\u310e\0\u3153\0\u3198\0\u019e\0\u019e"+
    "\0\u1c92\0\u1cd7\0\u31dd\0\u026d\0\u026d\0\u026d\0\u3222\0\u3267"+
    "\0\u32ac\0\u32f1\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d"+
    "\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u3336\0\u337b"+
    "\0\u026d\0\u026d\0\u026d\0\u33c0\0\u026d\0\u026d\0\u026d\0\u026d"+
    "\0\u026d\0\u026d\0\u026d\0\u026d\0\u3405\0\u344a\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u026d\0\u35e8\0\u362d\0\u3672\0\u36b7"+
    "\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u026d\0\u3810\0\u3855\0\u389a"+
    "\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2"+
    "\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea"+
    "\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u15d5"+
    "\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u026d"+
    "\0\u026d\0\u40f5\0\u413a\0\u417f\0\u026d\0\u026d\0\u026d\0\u41c4"+
    "\0\u026d\0\u026d\0\u026d\0\u4209\0\u424e\0\u4293\0\u42d8\0\u026d"+
    "\0\u431d\0\u026d\0\u026d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u026d"+
    "\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659"+
    "\0\u469e\0\u46e3\0\u026d\0\u4728\0\u026d\0\u476d\0\u15d5\0\u47b2"+
    "\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u15d5"+
    "\0\u15d5\0\u49da\0\u15d5\0\u4a1f\0\u15d5\0\u15d5\0\u4a64\0\u15d5"+
    "\0\u4aa9\0\u4aee\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d"+
    "\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u026d\0\u4c47\0\u4c8c\0\u026d"+
    "\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u026d\0\u026d\0\u026d"+
    "\0\u4e2a\0\u026d\0\u4e6f\0\u4eb4\0\u4ef9\0\u026d\0\u4f3e\0\u15d5"+
    "\0\u4f83\0\u15d5\0\u4fc8\0\u500d\0\u5052\0\u15d5\0\u15d5\0\u5097"+
    "\0\u019e\0\u019e\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0\0\u026d"+
    "\0\u5235\0\u527a\0\u026d\0\u52bf\0\u5304\0\u026d\0\u026d\0\u026d"+
    "\0\u026d\0\u026d\0\u026d\0\u15d5\0\u5349\0\u15d5\0\u538e\0\u026d"+
    "\0\u53d3\0\u026d\0\u5418\0\u026d\0\u026d\0\u026d\0\u026d\0\u15d5"+
    "\0\u545d\0\u54a2\0\u026d\0\u026d\0\u019e\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\3\13\1\14\1\7\1\15"+
    "\1\16\1\17\2\20\1\21\1\20\1\22\1\23\1\24"+
    "\1\25\1\26\1\20\1\27\1\30\3\20\1\31\1\32"+
    "\1\33\1\34\1\35\1\20\1\36\1\20\1\37\1\20"+
    "\1\40\1\41\1\26\1\42\1\34\1\43\1\44\1\20"+
    "\1\45\1\46\1\47\1\20\1\7\1\20\1\17\1\22"+
    "\1\27\1\25\2\20\1\40\1\20\1\32\1\40\1\33"+
    "\1\50\1\20\1\51\1\52\1\40\1\53\1\20\4\54"+
    "\2\55\1\56\76\54\4\57\2\60\1\61\1\62\1\63"+
    "\74\57\6\64\1\65\1\66\1\67\1\70\36\64\1\71"+
    "\5\64\1\72\1\73\5\64\1\74\1\75\12\64\1\76"+
    "\2\64\1\77\4\57\2\100\1\101\1\57\1\102\1\103"+
    "\73\57\4\104\2\100\1\101\1\105\1\106\1\107\36\104"+
    "\1\110\5\104\1\111\1\112\5\104\1\113\1\114\12\104"+
    "\1\115\2\104\1\116\111\0\3\13\111\0\1\20\1\117"+
    "\1\120\1\121\4\20\1\122\5\20\1\123\1\124\10\20"+
    "\1\125\6\20\1\121\6\20\1\126\1\120\3\20\1\122"+
    "\1\20\1\123\1\20\1\124\3\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\20\1\125\15\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\1\20\1\127\11\20\1\130\5\20\1\131\6\20\1\125"+
    "\15\20\1\126\3\20\1\130\5\20\1\131\2\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\3\20\1\132"+
    "\14\20\1\133\7\20\1\125\6\20\1\132\1\133\5\20"+
    "\1\126\14\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\3\20\1\134\3\20\1\135\20\20\1\125\4\20"+
    "\1\135\1\20\1\134\6\20\1\126\14\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\11\20\1\136\16\20"+
    "\1\125\3\20\1\136\11\20\1\126\14\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\1\137\10\20\1\140"+
    "\1\20\1\141\1\20\1\142\12\20\1\125\3\20\1\140"+
    "\5\20\1\142\3\20\1\126\1\20\1\137\1\20\1\141"+
    "\10\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\5\20\1\143\2\20\1\144\17\20\1\125\15\20\1\126"+
    "\2\20\1\143\1\20\1\144\7\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\11\20\1\145\11\20\1\146"+
    "\4\20\1\125\3\20\1\145\1\20\1\146\7\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\3\20\1\147\24\20\1\125\6\20\1\147\6\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\1\150\1\151\5\20\1\152\1\153\1\154\1\20\1\155"+
    "\1\20\1\156\1\157\1\160\10\20\1\125\3\20\1\154"+
    "\1\152\4\20\1\156\3\20\1\126\1\20\1\150\1\20"+
    "\1\155\1\153\1\20\1\157\1\20\1\160\3\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\2\20\1\161"+
    "\25\20\1\125\15\20\1\126\1\161\13\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\23\20\1\162\4\20"+
    "\1\125\1\20\1\163\3\20\1\162\7\20\1\126\7\20"+
    "\1\163\2\20\1\163\1\20\1\0\1\20\1\0\2\163"+
    "\1\0\1\20\13\0\7\20\1\164\20\20\1\125\4\20"+
    "\1\164\10\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\1\165\2\20\1\166\1\20\1\167"+
    "\1\20\1\170\1\20\1\171\1\20\1\172\4\20\1\173"+
    "\1\174\4\20\1\175\1\20\1\125\1\20\1\176\1\20"+
    "\1\171\1\170\1\20\1\166\1\173\5\20\1\126\1\20"+
    "\1\165\1\167\1\172\3\20\1\176\1\20\1\174\1\176"+
    "\1\20\1\0\1\20\1\0\2\176\1\0\1\20\13\0"+
    "\1\20\1\177\25\20\1\200\1\125\15\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\200\13\0\30\201"+
    "\1\0\1\201\1\202\1\203\1\201\1\204\1\201\1\205"+
    "\1\206\1\207\1\210\1\211\1\212\1\201\1\0\1\201"+
    "\1\213\2\201\1\214\1\201\1\215\1\216\1\217\1\220"+
    "\1\221\1\201\1\0\1\201\1\0\2\202\1\0\1\201"+
    "\24\0\1\222\16\0\1\223\1\0\1\40\1\0\1\222"+
    "\21\0\1\40\2\0\1\40\4\0\2\40\15\0\30\20"+
    "\1\125\3\20\1\224\11\20\1\126\14\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\11\20\1\136\16\20"+
    "\1\125\3\20\1\136\2\20\1\225\6\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\1\20"+
    "\1\127\11\20\1\130\5\20\1\131\6\20\1\125\1\20"+
    "\1\163\13\20\1\126\3\20\1\130\3\20\1\163\1\20"+
    "\1\131\1\163\1\20\1\0\1\20\1\0\2\163\1\0"+
    "\1\20\13\0\1\150\1\151\5\20\1\152\1\153\1\154"+
    "\1\20\1\155\1\20\1\156\1\157\1\160\10\20\1\125"+
    "\1\20\1\163\1\20\1\154\1\152\3\20\1\225\1\156"+
    "\3\20\1\126\1\20\1\150\1\20\1\155\1\153\1\20"+
    "\1\157\1\163\1\160\1\20\1\163\1\20\1\0\1\20"+
    "\1\0\2\163\1\0\1\20\13\0\30\20\1\125\10\20"+
    "\1\225\4\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\3\20\1\147\24\20\1\125\1\20"+
    "\1\163\4\20\1\147\1\20\1\225\4\20\1\126\7\20"+
    "\1\163\2\20\1\163\1\20\1\0\1\20\1\0\2\163"+
    "\1\0\1\20\13\0\1\165\2\20\1\166\1\20\1\167"+
    "\1\20\1\170\1\20\1\171\1\20\1\172\4\20\1\173"+
    "\1\174\4\20\1\175\1\20\1\125\1\20\1\176\1\20"+
    "\1\171\1\170\1\20\1\226\1\227\1\225\1\20\1\230"+
    "\2\20\1\126\1\20\1\165\1\167\1\172\3\20\1\176"+
    "\1\20\1\174\1\176\1\20\1\0\1\20\1\0\2\176"+
    "\1\0\1\20\54\0\1\231\6\0\1\232\4\0\1\233"+
    "\57\0\1\223\1\0\1\40\23\0\1\40\2\0\1\40"+
    "\4\0\2\40\25\0\1\234\1\222\10\0\1\235\5\0"+
    "\1\223\1\0\1\40\1\0\1\222\16\0\1\234\2\0"+
    "\1\40\2\0\1\40\1\235\3\0\2\40\7\0\1\55"+
    "\104\0\1\60\104\0\1\64\104\0\1\100\112\0\2\20"+
    "\1\236\25\20\1\125\15\20\1\126\1\236\13\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\1\20\1\237"+
    "\26\20\1\125\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\1\20\1\240\26\20\1\125"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\20\1\0\15\20\1\0\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\2\20\1\241"+
    "\25\20\1\125\15\20\1\126\1\241\13\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\21\20\1\242\6\20"+
    "\1\125\15\20\1\126\11\20\1\242\2\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\21\20\1\243\6\20"+
    "\1\125\15\20\1\126\11\20\1\243\2\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\1\244\27\20\1\125"+
    "\15\20\1\126\1\20\1\244\12\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\7\20\1\245\20\20\1\125"+
    "\4\20\1\245\10\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\1\246\27\20\1\125\15\20"+
    "\1\126\1\20\1\246\12\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\14\20\1\247\11\20\1\250\1\20"+
    "\1\125\12\20\1\247\2\20\1\126\14\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\11\20\1\251\2\20"+
    "\1\252\13\20\1\125\3\20\1\251\6\20\1\252\2\20"+
    "\1\126\14\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\12\20\1\253\15\20\1\125\15\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\11\20"+
    "\1\254\16\20\1\125\3\20\1\254\11\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\11\20"+
    "\1\255\2\20\1\256\13\20\1\125\3\20\1\255\6\20"+
    "\1\256\2\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\3\20\1\257\24\20\1\125\6\20"+
    "\1\257\6\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\7\20\1\260\20\20\1\125\4\20"+
    "\1\260\10\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\15\20\1\261\12\20\1\125\11\20"+
    "\1\261\3\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\4\20\1\262\7\20\1\263\13\20"+
    "\1\125\10\20\1\262\1\20\1\263\2\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\2\20"+
    "\1\264\25\20\1\125\15\20\1\126\1\264\13\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\1\265\13\20"+
    "\1\266\13\20\1\125\12\20\1\266\2\20\1\126\1\20"+
    "\1\265\12\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\10\20\1\267\17\20\1\125\15\20\1\126\4\20"+
    "\1\267\7\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\1\270\2\20\1\271\24\20\1\125\6\20\1\271"+
    "\6\20\1\126\1\20\1\270\12\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\12\20\1\272\15\20\1\125"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\11\20\1\273\16\20\1\125\3\20\1\273"+
    "\11\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\14\20\1\274\13\20\1\125\12\20\1\274"+
    "\2\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\27\20\1\275\1\125\15\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\275\13\0\7\20"+
    "\1\276\20\20\1\125\4\20\1\276\10\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\30\20"+
    "\1\125\1\20\1\163\13\20\1\126\7\20\1\163\2\20"+
    "\1\163\1\20\1\0\1\20\1\0\2\163\1\0\1\20"+
    "\13\0\2\20\1\277\25\20\1\125\15\20\1\126\1\277"+
    "\13\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\11\20\1\300\2\20\1\301\2\20\1\302\10\20\1\125"+
    "\3\20\1\300\6\20\1\301\2\20\1\126\10\20\1\302"+
    "\3\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\10\20\1\303\10\20\1\304\6\20\1\125\15\20\1\126"+
    "\4\20\1\303\4\20\1\304\2\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\1\305\26\20\1\306\1\125"+
    "\15\20\1\126\1\20\1\305\12\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\306\13\0\5\20\1\307\1\20\1\310"+
    "\14\20\1\311\3\20\1\125\4\20\1\310\6\20\1\311"+
    "\1\20\1\126\2\20\1\307\11\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\12\20\1\312\1\313\14\20"+
    "\1\125\15\20\1\126\3\20\1\313\10\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\11\20\1\314\14\20"+
    "\1\315\1\20\1\125\3\20\1\314\11\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\1\20"+
    "\1\316\3\20\1\317\1\20\1\320\2\20\1\321\2\20"+
    "\1\322\1\20\1\323\4\20\1\324\3\20\1\125\4\20"+
    "\1\320\4\20\1\322\1\20\1\324\1\20\1\126\2\20"+
    "\1\317\5\20\1\323\3\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\2\20\1\325\25\20\1\125\15\20"+
    "\1\126\1\325\13\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\1\20\1\326\1\327\1\330\14\20\1\331"+
    "\6\20\1\332\1\125\6\20\1\330\1\331\5\20\1\126"+
    "\1\327\13\20\1\0\1\20\1\0\2\20\1\0\1\332"+
    "\13\0\30\20\1\125\1\20\1\176\13\20\1\126\7\20"+
    "\1\176\2\20\1\176\1\20\1\0\1\20\1\0\2\176"+
    "\1\0\1\20\13\0\1\333\27\20\1\125\15\20\1\126"+
    "\1\20\1\333\12\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\201\1\334\15\201\1\0\14\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\24\0\1\222\20\0"+
    "\1\202\1\0\1\222\21\0\1\202\2\0\1\202\4\0"+
    "\2\202\15\0\30\201\1\334\3\201\1\335\11\201\1\0"+
    "\14\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\5\201\1\336\7\201\1\0\14\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\7\201\1\337\5\201\1\0\1\201\1\340\12\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\3\201\1\341\4\201\1\342\1\201\1\343\2\201\1\0"+
    "\6\201\1\344\5\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\13\0\30\201\1\334\15\201\1\0\7\201\1\345"+
    "\4\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\15\201\1\0\1\201\1\346\12\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\3\201\1\347\11\201\1\0\14\201\1\0\1\201\1\0"+
    "\2\201\1\0\1\201\13\0\30\201\1\334\15\201\1\0"+
    "\1\350\1\351\12\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\13\0\30\201\1\334\5\201\1\352\7\201\1\0"+
    "\14\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\6\201\1\353\1\354\5\201\1\0\5\201"+
    "\1\355\6\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\13\0\30\201\1\334\6\201\1\356\6\201\1\0\14\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\24\0\1\222"+
    "\20\0\1\202\1\0\1\222\16\0\1\357\2\0\1\202"+
    "\2\0\1\202\4\0\2\202\15\0\30\201\1\334\5\201"+
    "\1\360\7\201\1\0\14\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\13\0\30\201\1\334\6\201\1\361\6\201"+
    "\1\0\14\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\24\0\1\222\20\0\1\202\1\0\1\222\16\0\1\362"+
    "\2\0\1\202\2\0\1\202\4\0\2\202\47\0\1\363"+
    "\23\0\1\363\2\0\1\363\3\0\1\364\2\363\47\0"+
    "\1\202\23\0\1\202\2\0\1\202\4\0\2\202\15\0"+
    "\30\20\1\125\4\20\1\365\10\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\10\20\1\303"+
    "\10\20\1\304\6\20\1\125\1\20\1\176\13\20\1\126"+
    "\4\20\1\303\2\20\1\176\1\20\1\304\1\176\1\20"+
    "\1\0\1\20\1\0\2\176\1\0\1\20\13\0\1\20"+
    "\1\316\3\20\1\317\1\20\1\320\2\20\1\321\2\20"+
    "\1\322\1\20\1\323\4\20\1\324\3\20\1\125\1\20"+
    "\1\176\2\20\1\320\4\20\1\322\1\20\1\324\1\20"+
    "\1\126\2\20\1\317\4\20\1\176\1\323\1\20\1\176"+
    "\1\20\1\0\1\20\1\0\2\176\1\0\1\20\64\0"+
    "\1\366\71\0\1\367\115\0\1\370\123\0\2\371\20\0"+
    "\1\372\1\0\1\372\2\0\2\372\7\0\1\372\2\0"+
    "\1\372\5\0\1\372\1\0\1\372\2\0\1\372\4\0"+
    "\1\372\4\0\1\372\1\0\1\372\2\0\1\372\1\0"+
    "\2\372\4\0\2\372\15\0\4\20\1\373\23\20\1\125"+
    "\10\20\1\373\4\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\2\20\1\374\25\20\1\125"+
    "\15\20\1\126\1\374\13\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\2\20\1\375\25\20\1\125\15\20"+
    "\1\126\1\375\13\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\1\376\27\20\1\125\15\20\1\126\1\20"+
    "\1\376\12\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\5\20\1\377\1\20\1\u0100\7\20\1\u0101\1\u0102"+
    "\7\20\1\125\4\20\1\u0100\2\20\1\u0102\5\20\1\126"+
    "\2\20\1\377\5\20\1\u0101\3\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\7\20\1\u0103\20\20\1\125"+
    "\4\20\1\u0103\10\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\1\20\1\u0104\26\20\1\125"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\1\20\1\u0105\26\20\1\125\1\u0106\1\20"+
    "\1\u0106\12\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\1\20\1\u0107\26\20\1\125\1\u0108"+
    "\1\20\1\u0108\12\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\20\1\125\1\u0109\1\20"+
    "\1\u0109\12\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\30\20\1\125\1\u010a\1\20\1\u010a"+
    "\12\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\1\20\1\u010b\26\20\1\125\1\u010c\1\20"+
    "\1\u010c\12\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\1\20\1\u010d\26\20\1\125\1\u010e"+
    "\1\20\1\u010e\12\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\1\u010f\27\20\1\125\15\20"+
    "\1\126\1\20\1\u010f\12\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\11\20\1\u0110\16\20\1\125\3\20"+
    "\1\u0110\11\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\1\u0111\27\20\1\125\15\20\1\126"+
    "\1\20\1\u0111\12\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\2\20\1\u0112\25\20\1\125\15\20\1\126"+
    "\1\u0112\13\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\1\20\1\u0113\1\u0114\25\20\1\125\1\u0115\1\20"+
    "\1\u0115\12\20\1\126\1\u0114\13\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\2\20\1\u0116\25\20\1\125"+
    "\15\20\1\126\1\u0116\13\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\2\20\1\u0117\25\20\1\125\15\20"+
    "\1\126\1\u0117\13\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\20\1\125\1\u0118\1\20\1\u0118\12\20"+
    "\1\126\14\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\30\20\1\125\1\u0119\1\20\1\u0119\12\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\30\20\1\125\1\u011a\1\20\1\u011a\12\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\1\20"+
    "\1\u011b\26\20\1\125\15\20\1\126\14\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\2\20\1\u011c\25\20"+
    "\1\125\15\20\1\126\1\u011c\13\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\20\1\u011d\15\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\30\20\1\u011e\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\20\20\1\u011f\7\20\1\125"+
    "\7\20\1\u011f\5\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\21\20\1\u0120\6\20\1\125"+
    "\15\20\1\126\11\20\1\u0120\2\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\3\20\1\u0121\24\20\1\125"+
    "\6\20\1\u0121\6\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\14\20\1\u0122\13\20\1\125"+
    "\12\20\1\u0122\2\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\20\20\1\u0123\7\20\1\125"+
    "\7\20\1\u0123\5\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\26\20\1\u0124\1\20\1\125"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\1\u0125\27\20\1\125\15\20\1\126\1\20"+
    "\1\u0125\12\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\30\20\1\u0126\15\20\1\126\14\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\5\20\1\u0127\22\20"+
    "\1\125\15\20\1\126\2\20\1\u0127\11\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\15\20\1\u0128\12\20"+
    "\1\125\11\20\1\u0128\3\20\1\126\14\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\3\20\1\u0129\14\20"+
    "\1\u012a\7\20\1\125\6\20\1\u0129\1\u012a\5\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\10\20\1\u012b\17\20\1\125\15\20\1\126\4\20\1\u012b"+
    "\7\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\20\20\1\u012c\7\20\1\125\7\20\1\u012c\5\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\26\20\1\u012d\1\20\1\125\15\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\7\20\1\u012e"+
    "\20\20\1\125\4\20\1\u012e\10\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\13\20\1\u012f"+
    "\14\20\1\125\15\20\1\126\3\20\1\u012f\10\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\1\u0130\27\20"+
    "\1\125\15\20\1\126\1\20\1\u0130\12\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\27\20\1\u0131\1\125"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\u0131\13\0\1\u0132\27\20\1\125\15\20\1\126\1\20"+
    "\1\u0132\12\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\13\20\1\u0133\14\20\1\125\15\20\1\126\3\20"+
    "\1\u0133\10\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\21\20\1\u0134\1\u0135\5\20\1\125\15\20\1\126"+
    "\11\20\1\u0134\1\20\1\u0135\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\1\20\1\u0136\26\20\1\125\15\20"+
    "\1\126\14\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\30\20\1\u0137\15\20\1\126\14\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\16\20\1\u0138\11\20"+
    "\1\125\15\20\1\126\6\20\1\u0138\5\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\30\201\1\0\15\201"+
    "\1\0\14\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\13\0\30\201\1\334\4\201\1\u0139\10\201\1\0\14\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\13\0\30\201"+
    "\1\334\15\201\1\0\11\201\1\u013a\2\201\1\0\1\201"+
    "\1\0\2\201\1\0\1\201\13\0\30\201\1\334\15\201"+
    "\1\0\2\201\1\u013b\11\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\13\0\30\201\1\334\15\201\1\0\1\u013c"+
    "\13\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\15\201\1\0\2\201\1\u013d\11\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\6\201\1\u013e\6\201\1\0\14\201\1\0\1\201\1\0"+
    "\2\201\1\0\1\201\13\0\30\201\1\334\4\201\1\u013f"+
    "\10\201\1\0\14\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\13\0\30\201\1\334\5\201\1\u0140\7\201\1\0"+
    "\14\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\6\201\1\u0141\6\201\1\0\14\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\5\201\1\u0142\7\201\1\0\14\201\1\0\1\201\1\0"+
    "\2\201\1\0\1\201\13\0\30\201\1\334\15\201\1\0"+
    "\13\201\1\u0143\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\13\0\30\201\1\334\15\201\1\0\1\201\1\u0144\12\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\13\0\30\201"+
    "\1\334\5\201\1\u0145\7\201\1\0\14\201\1\0\1\201"+
    "\1\0\2\201\1\0\1\201\13\0\30\201\1\334\15\201"+
    "\1\0\3\201\1\u0146\10\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\13\0\30\201\1\334\15\201\1\0\1\201"+
    "\1\u0147\12\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\13\0\30\201\1\334\7\201\1\u0148\5\201\1\0\14\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\13\0\30\201"+
    "\1\334\12\201\1\u0149\2\201\1\0\14\201\1\0\1\201"+
    "\1\0\2\201\1\0\1\201\13\0\30\201\1\334\15\201"+
    "\1\0\1\201\1\u014a\12\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\67\0\1\u014b\30\0\30\201\1\334\4\201"+
    "\1\u014c\10\201\1\0\14\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\13\0\30\201\1\334\12\201\1\u014d\2\201"+
    "\1\0\14\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\67\0\1\u014e\62\0\1\363\23\0\1\363\2\0\1\363"+
    "\4\0\2\363\15\0\30\20\1\125\5\20\1\225\7\20"+
    "\1\126\14\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\50\0\1\u014f\47\0\5\20\1\u0150\22\20\1\125\15\20"+
    "\1\126\2\20\1\u0150\11\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\2\20\1\u0151\25\20\1\125\15\20"+
    "\1\126\1\u0151\13\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\5\20\1\u0152\11\20\1\u0153\1\u0154\7\20"+
    "\1\125\7\20\1\u0154\5\20\1\126\2\20\1\u0152\5\20"+
    "\1\u0153\3\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\2\20\1\u0155\25\20\1\125\15\20\1\126\1\u0155"+
    "\13\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\2\20\1\u0156\25\20\1\125\15\20\1\126\1\u0156\13\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\1\u0157"+
    "\27\20\1\125\15\20\1\126\1\20\1\u0157\12\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\3\20\1\u0158"+
    "\24\20\1\125\6\20\1\u0158\6\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\1\20\1\u0159"+
    "\26\20\1\125\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\20\20\1\u015a\7\20\1\0"+
    "\7\20\1\u015a\5\20\1\0\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\20\20\1\u015b\7\20\1\0"+
    "\7\20\1\u015b\5\20\1\0\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\20\1\u015c\15\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\30\20\1\u015d\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\20\20\1\u015e\7\20\1\125"+
    "\7\20\1\u015e\5\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\20\1\u015f\15\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\7\20\1\u0160\20\20\1\125\4\20\1\u0160\10\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\3\20\1\u0161\24\20\1\125\6\20\1\u0161\6\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\20\20\1\u0162\7\20\1\0\7\20\1\u0162\5\20\1\0"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\11\20\1\u0163\16\20\1\125\3\20\1\u0163\11\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\30\20\1\u0164\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\21\20\1\u0165\6\20\1\125"+
    "\15\20\1\126\11\20\1\u0165\2\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\1\20\1\u0166\26\20\1\125"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\20\1\u0167\15\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\7\20\1\u0168"+
    "\20\20\1\125\4\20\1\u0168\10\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\14\20\1\u0169"+
    "\13\20\1\125\12\20\1\u0169\2\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\6\20\1\u016a"+
    "\21\20\1\125\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\3\20\1\u016b\24\20\1\125"+
    "\6\20\1\u016b\6\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\20\1\u016c\15\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\30\20\1\u016d\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\20\1\u016e\15\20\1\126"+
    "\14\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\21\20\1\u016f\6\20\1\125\15\20\1\126\11\20\1\u016f"+
    "\2\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\30\20\1\u0170\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\10\20\1\u0171\17\20\1\125"+
    "\15\20\1\126\4\20\1\u0171\7\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\17\20\1\u0172\1\u0173\1\20"+
    "\1\u0174\5\20\1\0\7\20\1\u0173\5\20\1\0\10\20"+
    "\1\u0172\2\20\1\u0174\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\1\20\1\u0175\16\20\1\u0176\7\20\1\125"+
    "\7\20\1\u0176\5\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\201\1\334\5\201\1\u0177"+
    "\7\201\1\0\14\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\13\0\30\201\1\334\6\201\1\u0178\6\201\1\0"+
    "\14\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\15\201\1\0\1\u0179\13\201\1\0\1\201"+
    "\1\0\2\201\1\0\1\201\13\0\30\201\1\334\11\201"+
    "\1\u017a\3\201\1\0\14\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\13\0\30\201\1\334\12\201\1\u017b\2\201"+
    "\1\0\14\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\13\0\30\201\1\334\15\201\1\0\2\201\1\u017c\11\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\13\0\30\201"+
    "\1\334\15\201\1\0\1\u017d\13\201\1\0\1\201\1\0"+
    "\2\201\1\0\1\201\13\0\30\201\1\334\4\201\1\u017e"+
    "\10\201\1\0\14\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\13\0\30\201\1\334\15\201\1\0\1\201\1\340"+
    "\12\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\15\201\1\0\4\201\1\u017f\7\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\12\201\1\u0180\2\201\1\0\14\201\1\0\1\201\1\0"+
    "\2\201\1\0\1\201\13\0\30\201\1\334\3\201\1\u0181"+
    "\11\201\1\0\14\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\13\0\30\201\1\334\6\201\1\u0182\6\201\1\0"+
    "\14\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\11\201\1\u0183\3\201\1\0\14\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\15\201\1\0\1\u0184\13\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\13\0\30\201\1\334\3\201\1\u0185\11\201"+
    "\1\0\14\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\13\0\30\201\1\334\13\201\1\u0186\1\201\1\0\14\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\56\0\1\u0187"+
    "\41\0\30\201\1\334\15\201\1\0\11\201\1\u0183\2\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\13\0\30\201"+
    "\1\334\6\201\1\u0188\6\201\1\0\14\201\1\0\1\201"+
    "\1\0\2\201\1\0\1\201\56\0\1\u0189\75\0\1\u018a"+
    "\50\0\2\20\1\u018b\25\20\1\125\15\20\1\126\1\u018b"+
    "\13\20\1\0\1\20\1\0\2\20\1\0\1\20\13\0"+
    "\2\20\1\u018c\25\20\1\125\15\20\1\126\1\u018c\13\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\2\20"+
    "\1\u018d\25\20\1\125\15\20\1\126\1\u018d\13\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\25\20\1\u018e"+
    "\2\20\1\125\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\20\20\1\u018f\7\20\1\0"+
    "\7\20\1\u018f\5\20\1\0\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\20\20\1\u0190\7\20\1\0"+
    "\7\20\1\u0190\5\20\1\0\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\20\20\1\u0191\7\20\1\125"+
    "\7\20\1\u0191\5\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\17\20\1\u0192\1\u0193\7\20"+
    "\1\0\7\20\1\u0193\5\20\1\0\10\20\1\u0192\3\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\15\20"+
    "\1\u0194\12\20\1\125\11\20\1\u0194\3\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\20\20"+
    "\1\u0195\7\20\1\0\7\20\1\u0195\5\20\1\0\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\21\20"+
    "\1\u0196\6\20\1\125\15\20\1\126\11\20\1\u0196\2\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\10\20"+
    "\1\u0197\17\20\1\125\15\20\1\126\4\20\1\u0197\7\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\20\20"+
    "\1\u0198\7\20\1\0\7\20\1\u0198\5\20\1\0\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\30\20"+
    "\1\u0199\15\20\1\126\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\13\20\1\u019a\6\20\1\u019b\5\20"+
    "\1\u019c\15\20\1\126\3\20\1\u019a\7\20\1\u019b\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\15\20\1\u019d"+
    "\12\20\1\125\11\20\1\u019d\3\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u019e"+
    "\7\20\1\0\7\20\1\u019e\5\20\1\0\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u019f"+
    "\7\20\1\0\7\20\1\u019f\5\20\1\0\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u01a0"+
    "\7\20\1\0\7\20\1\u01a0\5\20\1\0\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\30\20\1\u01a1"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\20\20\1\u01a2\7\20\1\0\7\20\1\u01a2"+
    "\5\20\1\0\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\20\1\u01a3\15\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\30\20\1\u01a4"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\20\1\u01a5\15\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\1\20\1\u01a6"+
    "\26\20\1\125\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\30\201\1\334\12\201\1\u01a7"+
    "\2\201\1\0\14\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\13\0\30\201\1\334\2\201\1\u01a8\12\201\1\0"+
    "\1\u01a9\13\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\13\0\30\201\1\334\15\201\1\0\3\201\1\u01aa\10\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\13\0\30\201"+
    "\1\334\15\201\1\0\1\u01ab\13\201\1\0\1\201\1\0"+
    "\2\201\1\0\1\201\13\0\30\201\1\334\3\201\1\u0177"+
    "\11\201\1\0\14\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\13\0\30\201\1\334\15\201\1\0\3\201\1\u01ac"+
    "\10\201\1\0\1\201\1\0\2\201\1\0\1\201\13\0"+
    "\30\201\1\334\12\201\1\u0186\2\201\1\0\14\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\6\201\1\u01ad\6\201\1\0\1\201\1\u01ae\12\201\1\0"+
    "\1\201\1\0\2\201\1\0\1\201\13\0\30\201\1\334"+
    "\12\201\1\u01af\2\201\1\0\14\201\1\0\1\201\1\0"+
    "\2\201\1\0\1\201\13\0\30\201\1\334\11\201\1\u01b0"+
    "\3\201\1\0\14\201\1\0\1\201\1\0\2\201\1\0"+
    "\1\201\47\0\1\u01b1\104\0\1\u01b2\120\0\1\u01b3\34\0"+
    "\30\20\1\u01b4\15\20\1\126\14\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\1\20\1\u01b5\26\20\1\u01b6"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\20\1\u01b7\15\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u01b8"+
    "\7\20\1\125\7\20\1\u01b8\5\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\30\20\1\u01b9"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\20\1\u01ba\15\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u01bb"+
    "\7\20\1\0\7\20\1\u01bb\5\20\1\0\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\30\20\1\u01bc"+
    "\15\20\1\126\14\20\1\0\1\20\1\0\2\20\1\0"+
    "\1\20\13\0\30\20\1\u01bd\15\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u01be"+
    "\7\20\1\0\7\20\1\u01be\5\20\1\0\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u01bf"+
    "\7\20\1\125\7\20\1\u01bf\5\20\1\126\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u01c0"+
    "\7\20\1\0\7\20\1\u01c0\5\20\1\0\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\20\20\1\u01c1"+
    "\7\20\1\0\7\20\1\u01c1\5\20\1\0\14\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\22\20\1\u01c2"+
    "\5\20\1\0\15\20\1\0\13\20\1\u01c2\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\17\20\1\u01c3\10\20"+
    "\1\0\15\20\1\0\10\20\1\u01c3\3\20\1\0\1\20"+
    "\1\0\2\20\1\0\1\20\13\0\30\201\1\334\6\201"+
    "\1\u01c4\6\201\1\0\14\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\13\0\30\201\1\334\2\201\1\u01a8\12\201"+
    "\1\0\14\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\13\0\30\201\1\334\5\201\1\u01c5\7\201\1\0\14\201"+
    "\1\0\1\201\1\0\2\201\1\0\1\201\13\0\30\201"+
    "\1\334\11\201\1\u01a8\3\201\1\0\14\201\1\0\1\201"+
    "\1\0\2\201\1\0\1\201\13\0\30\201\1\334\15\201"+
    "\1\0\1\201\1\u01ae\12\201\1\0\1\201\1\0\2\201"+
    "\1\0\1\201\13\0\30\201\1\334\15\201\1\0\3\201"+
    "\1\u01c6\10\201\1\0\1\201\1\0\2\201\1\0\1\201"+
    "\77\0\1\u01c7\20\0\20\20\1\u01c8\7\20\1\0\7\20"+
    "\1\u01c8\5\20\1\0\14\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\13\0\30\20\1\u01c9\15\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\20\20"+
    "\1\u01ca\7\20\1\0\7\20\1\u01ca\5\20\1\0\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\17\20"+
    "\1\u01cb\10\20\1\0\15\20\1\0\10\20\1\u01cb\3\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\20\20"+
    "\1\u01cc\7\20\1\0\7\20\1\u01cc\5\20\1\0\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\20\20"+
    "\1\u01cd\7\20\1\0\7\20\1\u01cd\5\20\1\0\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\20\20"+
    "\1\u01ce\7\20\1\0\7\20\1\u01ce\5\20\1\0\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\20\20"+
    "\1\u01cf\7\20\1\0\7\20\1\u01cf\5\20\1\0\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\13\0\30\201"+
    "\1\334\15\201\1\0\3\201\1\u01d0\10\201\1\0\1\201"+
    "\1\0\2\201\1\0\1\201\63\0\1\u01d1\4\0\1\u01d2"+
    "\27\0\20\20\1\u01d3\7\20\1\0\7\20\1\u01d3\5\20"+
    "\1\0\14\20\1\0\1\20\1\0\2\20\1\0\1\20"+
    "\13\0\1\20\1\u01d4\26\20\1\125\15\20\1\126\14\20"+
    "\1\0\1\20\1\0\2\20\1\0\1\20\51\0\1\u01d5"+
    "\115\0\1\u01d6\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21735];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\4\11\1\1\3\11\34\1\3\11\1\1\2\11"+
    "\1\1\3\11\1\1\13\11\1\1\15\11\6\1\1\0"+
    "\1\11\73\1\2\0\5\1\5\0\76\1\1\0\22\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\2\11"+
    "\44\1\2\0\7\1\1\0\20\1\1\0\23\1\1\0"+
    "\2\1\2\0\14\1\2\0\1\1\1\0\4\1\1\0"+
    "\2\1\1\0\4\1\3\0\1\1\1\0\26\1\1\0"+
    "\1\1\2\0\16\1\1\0\2\1\1\0\4\1\1\0"+
    "\1\1\3\0\13\1\2\11\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\2\0\11\1\1\0\1\1\1\0\7\1"+
    "\2\0\2\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  /** strings and chars string builder */
  private StringBuilder text;

  /**
   * Creates a new cup Symbol with a predefined value obtained with the yytext() method.
   *
   * @param type the symbol type
   * @return the cup symbol
   */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline + 1, yycolumn + 1, yytext());
  }

  /**
   * Creates a new cup Symbol with a given value.
   *
   * @param type the symbol type
   * @param value the symbol value
   * @return the cup symbol
   */
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline + 1, yycolumn + 1, value);
  }

  /**
   * Returns RVI register symbol.
   *
   * @return RVI register symbol or error if the register name is invalid
   */
  private Symbol getX() {
    String reg = yytext().toLowerCase();
    int value = -1;
    if (reg.startsWith("x")) {
      try {
        value = Integer.parseInt(reg.substring(1));
        if (value > 31) {
          value = -1;
        }
      } catch (NumberFormatException e) { }
    } else if (reg.equals("fp")) {
      value = 8;
    } else {
      for (int i = 0; i < RVIRegisterFile.mnemonics.length; i++) {
        if (reg.equals(RVIRegisterFile.mnemonics[i])) {
          value = i;
          break;
        }
      }
    }
    if (value != -1) {
      return symbol(Token.XREG, value);
    }
    return symbol(Token.ERROR, "invalid register: " + yytext());
  }

  /**
   * Returns RVF register symbol.
   *
   * @return RVF register symbol or error if the register name is invalid
   */
  private Symbol getF() {
    String reg = yytext().toLowerCase();
    int value = -1;
    if (reg.matches("f[0-9]+")) {
      try {
        value = Integer.parseInt(reg.substring(1));
        if (value > 31) {
          value = -1;
        }
      } catch (NumberFormatException e) { }
    } else {
      for (int i = 0; i < RVFRegisterFile.mnemonics.length; i++) {
        if (reg.equals(RVFRegisterFile.mnemonics[i])) {
          value = i;
          break;
        }
      }
    }
    if (value != -1) {
      return symbol(Token.FREG, value);
    }
    return symbol(Token.ERROR, "invalid register: " + yytext());
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    text = new StringBuilder(0);
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   switch (yystate()) {
    case STRING:
      return symbol(Token.ERROR, "EOF in string constant");
    case CHARACTER:
      return symbol(Token.ERROR, "EOF in char constant");
    case SBACKSLASH:
      return symbol(Token.ERROR, "EOF in string constant");
    case CBACKSLASH:
      return symbol(Token.ERROR, "EOF in char constant");
    default:
      return symbol(Token.EOF);
  }
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(Token.ERROR, "invalid language element: '" + yytext() + "'");
            }
            // fall through
          case 191: break;
          case 2:
            { return symbol(Token.COMMA);
            }
            // fall through
          case 192: break;
          case 3:
            { return symbol(Token.LPAREN);
            }
            // fall through
          case 193: break;
          case 4:
            { return symbol(Token.RPAREN);
            }
            // fall through
          case 194: break;
          case 5:
            { return symbol(Token.NEWLINE);
            }
            // fall through
          case 195: break;
          case 6:
            { text.setLength(0);
    yybegin(STRING);
            }
            // fall through
          case 196: break;
          case 7:
            { text.setLength(0);
    yybegin(CHARACTER);
            }
            // fall through
          case 197: break;
          case 8:
            { yybegin(COMMENT);
            }
            // fall through
          case 198: break;
          case 9:
            { return symbol(Token.ID);
            }
            // fall through
          case 199: break;
          case 10:
            { return symbol(Token.I_J);
            }
            // fall through
          case 200: break;
          case 11:
            { try {
      return symbol(Token.INT,Integer.parseInt(yytext()));
    } catch (Exception e) {
      return symbol(Token.ERROR, "invalid number constant: '" + yytext() + "' (32 bits only)");
    }
            }
            // fall through
          case 201: break;
          case 12:
            { /* do nothing */
            }
            // fall through
          case 202: break;
          case 13:
            { /* consume everything */
            }
            // fall through
          case 203: break;
          case 14:
            { yypushback(yylength());
    yybegin(YYINITIAL);
            }
            // fall through
          case 204: break;
          case 15:
            { text.append(yytext());
            }
            // fall through
          case 205: break;
          case 16:
            { yypushback(yylength());
    yybegin(YYINITIAL);
    return symbol(Token.ERROR, "unterminated string constant");
            }
            // fall through
          case 206: break;
          case 17:
            { yybegin(YYINITIAL);
    String str = text.toString();
    if (str.length() > 1024) {
      return symbol(Token.ERROR, "string constant too long");
    }
    return symbol(Token.STRING, text.toString());
            }
            // fall through
          case 207: break;
          case 18:
            { yybegin(SBACKSLASH);
            }
            // fall through
          case 208: break;
          case 19:
            { text.append(yytext());
    yybegin(STRING);
            }
            // fall through
          case 209: break;
          case 20:
            { text.append("\"");
    yybegin(STRING);
            }
            // fall through
          case 210: break;
          case 21:
            { text.append("\\");
    yybegin(STRING);
            }
            // fall through
          case 211: break;
          case 22:
            { text.append("'");
    yybegin(STRING);
            }
            // fall through
          case 212: break;
          case 23:
            { text.append('\r');
    yybegin(STRING);
            }
            // fall through
          case 213: break;
          case 24:
            { text.append('\t');
    yybegin(STRING);
            }
            // fall through
          case 214: break;
          case 25:
            { text.append('\f');
    yybegin(STRING);
            }
            // fall through
          case 215: break;
          case 26:
            { text.append(System.getProperty("line.separator"));
    yybegin(STRING);
            }
            // fall through
          case 216: break;
          case 27:
            { text.append('\b');
    yybegin(STRING);
            }
            // fall through
          case 217: break;
          case 28:
            { text.append('\0');
    yybegin(STRING);
            }
            // fall through
          case 218: break;
          case 29:
            { text.append((char)11);
    yybegin(STRING);
            }
            // fall through
          case 219: break;
          case 30:
            { yypushback(yylength());
    yybegin(YYINITIAL);
    return symbol(Token.ERROR, "unterminated char constant");
            }
            // fall through
          case 220: break;
          case 31:
            { yybegin(CBACKSLASH);
            }
            // fall through
          case 221: break;
          case 32:
            { yybegin(YYINITIAL);
    String ch = text.toString();
    if (ch.length() == 1) {
      return symbol(Token.CHARACTER, ch.charAt(0));
    } else {
      return symbol(Token.ERROR, "invalid char: '" + ch + "'");
    }
            }
            // fall through
          case 222: break;
          case 33:
            { text.append(yytext());
    yybegin(CHARACTER);
            }
            // fall through
          case 223: break;
          case 34:
            { text.append("\"");
    yybegin(CHARACTER);
            }
            // fall through
          case 224: break;
          case 35:
            { text.append("\\");
    yybegin(CHARACTER);
            }
            // fall through
          case 225: break;
          case 36:
            { text.append("\'");
    yybegin(CHARACTER);
            }
            // fall through
          case 226: break;
          case 37:
            { text.append((char)'\r');
    yybegin(CHARACTER);
            }
            // fall through
          case 227: break;
          case 38:
            { text.append('\t');
    yybegin(CHARACTER);
            }
            // fall through
          case 228: break;
          case 39:
            { text.append('\f');
    yybegin(CHARACTER);
            }
            // fall through
          case 229: break;
          case 40:
            { text.append('\n');
    yybegin(CHARACTER);
            }
            // fall through
          case 230: break;
          case 41:
            { text.append('\b');
    yybegin(CHARACTER);
            }
            // fall through
          case 231: break;
          case 42:
            { text.append('\0');
    yybegin(CHARACTER);
            }
            // fall through
          case 232: break;
          case 43:
            { text.append((char)11);
    yybegin(CHARACTER);
            }
            // fall through
          case 233: break;
          case 44:
            { return symbol(Token.I_LI);
            }
            // fall through
          case 234: break;
          case 45:
            { return symbol(Token.I_LA);
            }
            // fall through
          case 235: break;
          case 46:
            { return symbol(Token.I_LB);
            }
            // fall through
          case 236: break;
          case 47:
            { return symbol(Token.I_LH);
            }
            // fall through
          case 237: break;
          case 48:
            { return symbol(Token.I_LW);
            }
            // fall through
          case 238: break;
          case 49:
            { return symbol(Token.LABEL);
            }
            // fall through
          case 239: break;
          case 50:
            { return symbol(Token.I_JR);
            }
            // fall through
          case 240: break;
          case 51:
            { return symbol(Token.I_SB);
            }
            // fall through
          case 241: break;
          case 52:
            { return symbol(Token.I_SH);
            }
            // fall through
          case 242: break;
          case 53:
            { return symbol(Token.I_SW);
            }
            // fall through
          case 243: break;
          case 54:
            { return getX();
            }
            // fall through
          case 244: break;
          case 55:
            { return symbol(Token.I_OR);
            }
            // fall through
          case 245: break;
          case 56:
            { return getF();
            }
            // fall through
          case 246: break;
          case 57:
            { return symbol(Token.I_MV);
            }
            // fall through
          case 247: break;
          case 58:
            { return symbol(Token.D_DIRECTIVE);
            }
            // fall through
          case 248: break;
          case 59:
            { try {
      return symbol(Token.FLOAT, Float.parseFloat(yytext()));
    } catch (Exception e) {
      return symbol(Token.ERROR, "invalid floating-point constant: '" + yytext() + "'");
    }
            }
            // fall through
          case 249: break;
          case 60:
            { return symbol(Token.I_LUI);
            }
            // fall through
          case 250: break;
          case 61:
            { return symbol(Token.I_LBU);
            }
            // fall through
          case 251: break;
          case 62:
            { return symbol(Token.I_LHU);
            }
            // fall through
          case 252: break;
          case 63:
            { return symbol(Token.I_AND);
            }
            // fall through
          case 253: break;
          case 64:
            { return symbol(Token.I_ADD);
            }
            // fall through
          case 254: break;
          case 65:
            { return symbol(Token.I_JAL);
            }
            // fall through
          case 255: break;
          case 66:
            { return symbol(Token.I_RET);
            }
            // fall through
          case 256: break;
          case 67:
            { return symbol(Token.I_REM);
            }
            // fall through
          case 257: break;
          case 68:
            { return symbol(Token.I_BLE);
            }
            // fall through
          case 258: break;
          case 69:
            { return symbol(Token.I_BLT);
            }
            // fall through
          case 259: break;
          case 70:
            { return symbol(Token.I_BEQ);
            }
            // fall through
          case 260: break;
          case 71:
            { return symbol(Token.I_BNE);
            }
            // fall through
          case 261: break;
          case 72:
            { return symbol(Token.I_BGE);
            }
            // fall through
          case 262: break;
          case 73:
            { return symbol(Token.I_BGT);
            }
            // fall through
          case 263: break;
          case 74:
            { return symbol(Token.I_NEG);
            }
            // fall through
          case 264: break;
          case 75:
            { return symbol(Token.I_NOP);
            }
            // fall through
          case 265: break;
          case 76:
            { return symbol(Token.I_NOT);
            }
            // fall through
          case 266: break;
          case 77:
            { return symbol(Token.I_SLL);
            }
            // fall through
          case 267: break;
          case 78:
            { return symbol(Token.I_SLT);
            }
            // fall through
          case 268: break;
          case 79:
            { return symbol(Token.I_SUB);
            }
            // fall through
          case 269: break;
          case 80:
            { return symbol(Token.I_SRL);
            }
            // fall through
          case 270: break;
          case 81:
            { return symbol(Token.I_SRA);
            }
            // fall through
          case 271: break;
          case 82:
            { return symbol(Token.I_DIV);
            }
            // fall through
          case 272: break;
          case 83:
            { return symbol(Token.I_XOR);
            }
            // fall through
          case 273: break;
          case 84:
            { return symbol(Token.I_ORI);
            }
            // fall through
          case 274: break;
          case 85:
            { return symbol(Token.I_FLW);
            }
            // fall through
          case 275: break;
          case 86:
            { return symbol(Token.I_FSW);
            }
            // fall through
          case 276: break;
          case 87:
            { return symbol(Token.I_MUL);
            }
            // fall through
          case 277: break;
          case 88:
            { return symbol(Token.LO);
            }
            // fall through
          case 278: break;
          case 89:
            { return symbol(Token.HI);
            }
            // fall through
          case 279: break;
          case 90:
            { try {
      return symbol(Token.BIN,Integer.parseUnsignedInt(yytext().substring(2), 2));
    } catch (Exception e) {
      return symbol(Token.ERROR, "invalid binary constant: '" + yytext() + "' (32 bits only)");
    }
            }
            // fall through
          case 280: break;
          case 91:
            { try {
      return symbol(Token.HEX, Integer.parseUnsignedInt(yytext().substring(2), 16));
    } catch (Exception e) {
      return symbol(Token.ERROR, "invalid hexadecimal constant: '" + yytext() + "' (32 bits only) ");
    }
            }
            // fall through
          case 281: break;
          case 92:
            { return symbol(Token.I_ANDI);
            }
            // fall through
          case 282: break;
          case 93:
            { return symbol(Token.I_ADDI);
            }
            // fall through
          case 283: break;
          case 94:
            { return symbol(Token.I_CALL);
            }
            // fall through
          case 284: break;
          case 95:
            { return symbol(Token.I_CSRC);
            }
            // fall through
          case 285: break;
          case 96:
            { return symbol(Token.I_CSRR);
            }
            // fall through
          case 286: break;
          case 97:
            { return symbol(Token.I_CSRW);
            }
            // fall through
          case 287: break;
          case 98:
            { return symbol(Token.I_CSRS);
            }
            // fall through
          case 288: break;
          case 99:
            { return symbol(Token.I_JALR);
            }
            // fall through
          case 289: break;
          case 100:
            { return symbol(Token.I_REMU);
            }
            // fall through
          case 290: break;
          case 101:
            { return symbol(Token.I_BLEU);
            }
            // fall through
          case 291: break;
          case 102:
            { return symbol(Token.I_BLEZ);
            }
            // fall through
          case 292: break;
          case 103:
            { return symbol(Token.I_BLTU);
            }
            // fall through
          case 293: break;
          case 104:
            { return symbol(Token.I_BLTZ);
            }
            // fall through
          case 294: break;
          case 105:
            { return symbol(Token.I_BEQZ);
            }
            // fall through
          case 295: break;
          case 106:
            { return symbol(Token.I_BNEZ);
            }
            // fall through
          case 296: break;
          case 107:
            { return symbol(Token.I_BGEU);
            }
            // fall through
          case 297: break;
          case 108:
            { return symbol(Token.I_BGEZ);
            }
            // fall through
          case 298: break;
          case 109:
            { return symbol(Token.I_BGTU);
            }
            // fall through
          case 299: break;
          case 110:
            { return symbol(Token.I_BGTZ);
            }
            // fall through
          case 300: break;
          case 111:
            { return symbol(Token.I_TAIL);
            }
            // fall through
          case 301: break;
          case 112:
            { return symbol(Token.I_SLLI);
            }
            // fall through
          case 302: break;
          case 113:
            { return symbol(Token.I_SLTU);
            }
            // fall through
          case 303: break;
          case 114:
            { return symbol(Token.I_SLTI);
            }
            // fall through
          case 304: break;
          case 115:
            { return symbol(Token.I_SLTZ);
            }
            // fall through
          case 305: break;
          case 116:
            { return symbol(Token.I_SRLI);
            }
            // fall through
          case 306: break;
          case 117:
            { return symbol(Token.I_SRAI);
            }
            // fall through
          case 307: break;
          case 118:
            { return symbol(Token.I_SEQZ);
            }
            // fall through
          case 308: break;
          case 119:
            { return symbol(Token.I_SNEZ);
            }
            // fall through
          case 309: break;
          case 120:
            { return symbol(Token.I_SGTZ);
            }
            // fall through
          case 310: break;
          case 121:
            { return symbol(Token.I_DIVU);
            }
            // fall through
          case 311: break;
          case 122:
            { return symbol(Token.I_XORI);
            }
            // fall through
          case 312: break;
          case 123:
            { return symbol(Token.I_FRRM);
            }
            // fall through
          case 313: break;
          case 124:
            { return symbol(Token.I_FSRM);
            }
            // fall through
          case 314: break;
          case 125:
            { return symbol(Token.I_MULH);
            }
            // fall through
          case 315: break;
          case 126:
            { return symbol(Token.D_BSS);
            }
            // fall through
          case 316: break;
          case 127:
            { return symbol(Token.I_AUIPC);
            }
            // fall through
          case 317: break;
          case 128:
            { return symbol(Token.I_CSRCI);
            }
            // fall through
          case 318: break;
          case 129:
            { return symbol(Token.I_CSRRC);
            }
            // fall through
          case 319: break;
          case 130:
            { return symbol(Token.I_CSRRW);
            }
            // fall through
          case 320: break;
          case 131:
            { return symbol(Token.I_CSRRS);
            }
            // fall through
          case 321: break;
          case 132:
            { return symbol(Token.I_CSRWI);
            }
            // fall through
          case 322: break;
          case 133:
            { return symbol(Token.I_CSRSI);
            }
            // fall through
          case 323: break;
          case 134:
            { return symbol(Token.I_ECALL);
            }
            // fall through
          case 324: break;
          case 135:
            { return symbol(Token.I_SLTIU);
            }
            // fall through
          case 325: break;
          case 136:
            { return symbol(Token.I_FLES);
            }
            // fall through
          case 326: break;
          case 137:
            { return symbol(Token.I_FLTS);
            }
            // fall through
          case 327: break;
          case 138:
            { return symbol(Token.I_FRCSR);
            }
            // fall through
          case 328: break;
          case 139:
            { return symbol(Token.I_FEQS);
            }
            // fall through
          case 329: break;
          case 140:
            { return symbol(Token.I_FENCE);
            }
            // fall through
          case 330: break;
          case 141:
            { return symbol(Token.I_FSCSR);
            }
            // fall through
          case 331: break;
          case 142:
            { return symbol(Token.I_FMVS);
            }
            // fall through
          case 332: break;
          case 143:
            { return symbol(Token.I_MULHU);
            }
            // fall through
          case 333: break;
          case 144:
            { return symbol(Token.D_ZERO);
            }
            // fall through
          case 334: break;
          case 145:
            { return symbol(Token.D_TEXT);
            }
            // fall through
          case 335: break;
          case 146:
            { return symbol(Token.D_FILE);
            }
            // fall through
          case 336: break;
          case 147:
            { return symbol(Token.D_WORD);
            }
            // fall through
          case 337: break;
          case 148:
            { return symbol(Token.D_BYTE);
            }
            // fall through
          case 338: break;
          case 149:
            { return symbol(Token.D_HALF);
            }
            // fall through
          case 339: break;
          case 150:
            { return symbol(Token.D_DATA);
            }
            // fall through
          case 340: break;
          case 151:
            { return symbol(Token.I_CSRRCI);
            }
            // fall through
          case 341: break;
          case 152:
            { return symbol(Token.I_CSRRWI);
            }
            // fall through
          case 342: break;
          case 153:
            { return symbol(Token.I_CSRRSI);
            }
            // fall through
          case 343: break;
          case 154:
            { return symbol(Token.I_EBREAK);
            }
            // fall through
          case 344: break;
          case 155:
            { return symbol(Token.I_FABSS);
            }
            // fall through
          case 345: break;
          case 156:
            { return symbol(Token.I_FADDS);
            }
            // fall through
          case 346: break;
          case 157:
            { return symbol(Token.I_FNEGS);
            }
            // fall through
          case 347: break;
          case 158:
            { return symbol(Token.I_FSUBS);
            }
            // fall through
          case 348: break;
          case 159:
            { return symbol(Token.I_FDIVS);
            }
            // fall through
          case 349: break;
          case 160:
            { return symbol(Token.I_FMULS);
            }
            // fall through
          case 350: break;
          case 161:
            { return symbol(Token.I_FMINS);
            }
            // fall through
          case 351: break;
          case 162:
            { return symbol(Token.I_FMAXS);
            }
            // fall through
          case 352: break;
          case 163:
            { return symbol(Token.I_MULHSU);
            }
            // fall through
          case 353: break;
          case 164:
            { return symbol(Token.D_ASCIIZ);
            }
            // fall through
          case 354: break;
          case 165:
            { return symbol(Token.D_ASCII);
            }
            // fall through
          case 355: break;
          case 166:
            { return symbol(Token.D_ALIGN);
            }
            // fall through
          case 356: break;
          case 167:
            { return symbol(Token.D_GLOBL);
            }
            // fall through
          case 357: break;
          case 168:
            { return symbol(Token.D_FLOAT);
            }
            // fall through
          case 358: break;
          case 169:
            { return symbol(Token.I_FRFLAGS);
            }
            // fall through
          case 359: break;
          case 170:
            { return symbol(Token.I_FSQRTS);
            }
            // fall through
          case 360: break;
          case 171:
            { return symbol(Token.I_FSGNJS);
            }
            // fall through
          case 361: break;
          case 172:
            { return symbol(Token.I_FSFLAGS);
            }
            // fall through
          case 362: break;
          case 173:
            { return symbol(Token.I_FMADDS);
            }
            // fall through
          case 363: break;
          case 174:
            { return symbol(Token.I_FMSUBS);
            }
            // fall through
          case 364: break;
          case 175:
            { return symbol(Token.I_FMVWX);
            }
            // fall through
          case 365: break;
          case 176:
            { return symbol(Token.I_FMVXW);
            }
            // fall through
          case 366: break;
          case 177:
            { return symbol(Token.D_RODATA);
            }
            // fall through
          case 367: break;
          case 178:
            { return symbol(Token.D_BALIGN);
            }
            // fall through
          case 368: break;
          case 179:
            { return symbol(Token.I_FCLASSS);
            }
            // fall through
          case 369: break;
          case 180:
            { return symbol(Token.I_FCVTWS);
            }
            // fall through
          case 370: break;
          case 181:
            { return symbol(Token.I_FCVTSW);
            }
            // fall through
          case 371: break;
          case 182:
            { return symbol(Token.I_FNMADDS);
            }
            // fall through
          case 372: break;
          case 183:
            { return symbol(Token.I_FNMSUBS);
            }
            // fall through
          case 373: break;
          case 184:
            { return symbol(Token.I_FSGNJNS);
            }
            // fall through
          case 374: break;
          case 185:
            { return symbol(Token.I_FSGNJXS);
            }
            // fall through
          case 375: break;
          case 186:
            { return symbol(Token.D_SECTION);
            }
            // fall through
          case 376: break;
          case 187:
            { return symbol(Token.I_FCVTWUS);
            }
            // fall through
          case 377: break;
          case 188:
            { return symbol(Token.I_FCVTSWU);
            }
            // fall through
          case 378: break;
          case 189:
            { return symbol(Token.PCREL_LO);
            }
            // fall through
          case 379: break;
          case 190:
            { return symbol(Token.PCREL_HI);
            }
            // fall through
          case 380: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
