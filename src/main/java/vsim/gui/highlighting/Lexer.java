/*
Copyright (C) 2018-2019 Andres Castellanos

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>
*/

package vsim.gui.highlighting;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/syntax/highlighter.flex</tt>
 */
public final class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;
  public static final int SBACKSLASH = 6;
  public static final int CHARACTER = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\71\1\3\1\2\1\2\1\4\22\0\1\71\1\0\1\5"+
    "\1\10\1\0\1\60\1\0\1\7\1\1\1\1\1\0\1\66\1\1"+
    "\1\66\1\41\1\0\1\67\1\70\10\43\1\57\1\10\5\0\1\14"+
    "\1\21\1\16\1\32\1\22\1\35\1\26\1\27\1\13\1\17\1\36"+
    "\1\11\1\37\1\24\1\34\1\15\1\23\1\20\1\31\1\25\1\12"+
    "\1\40\1\30\1\33\1\56\1\42\1\0\1\6\2\0\1\65\1\0"+
    "\1\50\1\21\1\64\1\32\1\45\1\55\1\53\1\61\1\62\1\17"+
    "\1\36\1\63\1\37\1\24\1\47\1\52\1\23\1\46\1\51\1\54"+
    "\1\12\1\40\1\30\1\33\1\56\1\44\12\0\1\2\u1fa2\0\1\2"+
    "\1\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\4\7"+
    "\1\10\13\7\1\1\1\11\7\7\2\1\1\11\1\3"+
    "\1\12\2\13\2\14\1\15\1\16\1\17\1\20\1\7"+
    "\2\10\1\0\1\21\25\7\1\22\1\10\12\7\1\23"+
    "\1\11\2\0\1\7\1\22\3\7\5\0\4\7\3\10"+
    "\1\7\1\10\25\7\1\10\1\0\1\11\1\0\1\7"+
    "\1\0\2\11\1\7\1\10\1\7\1\0\10\7\1\0"+
    "\1\10\1\23\1\0\1\7\1\10\1\0\5\7\1\0"+
    "\3\7\3\0\1\7\2\0\1\10\1\0\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u0122\0\u015c"+
    "\0\u0122\0\u0122\0\u0122\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u0122"+
    "\0\u0122\0\u0122\0\u07ee\0\u0122\0\u0828\0\u0122\0\u0122\0\u0122"+
    "\0\u0122\0\u0862\0\u01d0\0\u089c\0\u08d6\0\u0122\0\u0910\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0862\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u01d0\0\u1172\0\u11ac\0\u0dd2"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1464\0\u1512"+
    "\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2"+
    "\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u1294\0\u12ce\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u13f0\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u19d4\0\u1dae\0\u1de8\0\u1308\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u089c\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u0122\0\u2188\0\u21c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\3\10\1\11\1\6\1\12\1\13\1\14"+
    "\2\15\1\16\1\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\15\1\24\1\25\3\15\1\26\1\27\1\30\1\31"+
    "\1\32\1\15\1\33\1\15\1\34\1\15\1\35\1\36"+
    "\1\23\1\37\1\31\1\40\1\41\1\15\1\42\1\43"+
    "\1\44\1\15\1\6\1\45\2\15\1\14\1\17\1\15"+
    "\1\46\1\47\1\35\1\50\2\51\2\52\1\53\65\51"+
    "\4\54\1\55\1\56\1\57\63\54\2\60\1\0\1\60"+
    "\1\0\65\60\4\54\1\55\1\54\1\61\1\56\62\54"+
    "\74\0\3\10\76\0\1\15\1\62\2\63\4\15\1\64"+
    "\5\15\1\64\1\63\10\15\1\65\6\15\1\63\6\15"+
    "\1\66\1\0\1\64\1\63\3\15\1\0\2\15\12\0"+
    "\30\15\1\65\15\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\1\15\1\67\11\15\1\70\5\15\1\70\6\15"+
    "\1\65\15\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\3\15\1\71\14\15\1\72\7\15\1\65\6\15\1\71"+
    "\1\72\5\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\3\15\1\73\3\15\1\63\20\15\1\65\4\15\1\63"+
    "\1\15\1\73\6\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\11\15\1\74\16\15\1\65\3\15\1\74\11\15"+
    "\1\66\1\0\5\15\1\0\2\15\12\0\1\75\10\15"+
    "\1\76\1\15\1\77\1\15\1\75\12\15\1\65\3\15"+
    "\1\76\5\15\1\75\3\15\1\66\1\0\2\15\1\75"+
    "\2\15\1\0\2\15\12\0\5\15\1\100\2\15\1\101"+
    "\17\15\1\65\15\15\1\66\1\0\3\15\1\100\1\15"+
    "\1\0\2\15\12\0\11\15\1\102\11\15\1\103\4\15"+
    "\1\65\3\15\1\102\1\15\1\103\7\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\3\15\1\104\24\15\1\65"+
    "\6\15\1\104\6\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\1\105\1\106\5\15\1\107\1\63\1\110\1\15"+
    "\1\111\1\15\1\112\2\63\10\15\1\65\3\15\1\110"+
    "\1\107\4\15\1\112\3\15\1\66\1\0\1\63\1\15"+
    "\1\105\2\15\1\0\2\15\12\0\2\15\1\113\25\15"+
    "\1\65\15\15\1\66\1\0\1\15\1\113\3\15\1\0"+
    "\2\15\12\0\23\15\1\31\4\15\1\65\1\15\1\114"+
    "\3\15\1\31\7\15\1\66\1\0\5\15\1\0\2\114"+
    "\12\0\7\15\1\115\20\15\1\65\4\15\1\115\10\15"+
    "\1\66\1\0\5\15\1\0\2\15\12\0\1\116\2\15"+
    "\1\117\1\15\1\120\1\15\1\121\1\15\1\122\1\15"+
    "\1\123\4\15\1\124\1\125\4\15\1\126\1\15\1\65"+
    "\1\15\1\114\1\15\1\122\1\121\1\15\1\117\1\124"+
    "\5\15\1\66\1\0\2\15\1\116\1\120\1\15\1\0"+
    "\2\114\12\0\1\15\1\127\25\15\1\63\1\65\15\15"+
    "\1\66\1\0\5\15\1\0\2\15\12\0\30\130\1\0"+
    "\1\130\1\131\13\130\2\0\5\130\1\0\2\131\23\0"+
    "\1\132\16\0\1\133\1\0\1\35\1\0\1\132\21\0"+
    "\2\35\12\0\30\15\1\65\3\15\1\134\11\15\1\66"+
    "\1\0\5\15\1\0\2\15\12\0\11\15\1\74\16\15"+
    "\1\65\3\15\1\74\2\15\1\135\6\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\1\15\1\67\11\15\1\70"+
    "\5\15\1\70\6\15\1\65\1\15\1\114\13\15\1\66"+
    "\1\0\5\15\1\0\2\114\12\0\1\105\1\106\5\15"+
    "\1\107\1\63\1\110\1\15\1\111\1\15\1\112\2\63"+
    "\10\15\1\65\1\15\1\114\1\15\1\110\1\107\3\15"+
    "\1\135\1\112\3\15\1\66\1\0\1\63\1\15\1\105"+
    "\2\15\1\0\2\114\12\0\30\15\1\65\10\15\1\135"+
    "\4\15\1\66\1\0\5\15\1\0\2\15\12\0\3\15"+
    "\1\104\24\15\1\65\1\15\1\114\4\15\1\104\1\15"+
    "\1\135\4\15\1\66\1\0\5\15\1\0\2\114\12\0"+
    "\1\116\2\15\1\117\1\15\1\120\1\15\1\121\1\15"+
    "\1\122\1\15\1\123\4\15\1\124\1\125\4\15\1\126"+
    "\1\15\1\65\1\15\1\114\1\15\1\122\1\121\1\15"+
    "\1\136\1\137\1\135\1\15\1\140\2\15\1\66\1\0"+
    "\2\15\1\116\1\120\1\15\1\0\2\114\53\0\1\141"+
    "\6\0\1\142\1\0\1\143\47\0\1\133\1\0\1\35"+
    "\23\0\2\35\22\0\1\144\1\132\10\0\1\145\5\0"+
    "\1\133\1\0\1\35\1\0\1\132\21\0\2\35\4\0"+
    "\1\52\71\0\1\54\77\0\2\15\1\63\25\15\1\65"+
    "\15\15\1\66\1\0\1\15\1\63\3\15\1\0\2\15"+
    "\12\0\1\15\1\63\26\15\1\65\15\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\30\146\1\0\15\146\2\0"+
    "\5\146\1\0\2\146\12\0\2\15\1\147\25\15\1\65"+
    "\15\15\1\66\1\0\1\15\1\147\3\15\1\0\2\15"+
    "\12\0\21\15\1\115\6\15\1\65\15\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\1\150\27\15\1\65\15\15"+
    "\1\66\1\0\2\15\1\150\2\15\1\0\2\15\12\0"+
    "\7\15\1\151\20\15\1\65\4\15\1\151\10\15\1\66"+
    "\1\0\5\15\1\0\2\15\12\0\1\152\27\15\1\65"+
    "\15\15\1\66\1\0\2\15\1\152\2\15\1\0\2\15"+
    "\12\0\14\15\1\63\11\15\1\64\1\15\1\65\12\15"+
    "\1\63\2\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\11\15\1\153\2\15\1\153\13\15\1\65\3\15\1\153"+
    "\6\15\1\153\2\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\12\15\1\154\15\15\1\65\15\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\11\15\1\154\16\15\1\65"+
    "\3\15\1\154\11\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\3\15\1\71\24\15\1\65\6\15\1\71\6\15"+
    "\1\66\1\0\5\15\1\0\2\15\12\0\7\15\1\155"+
    "\20\15\1\65\4\15\1\155\10\15\1\66\1\0\5\15"+
    "\1\0\2\15\12\0\15\15\1\63\12\15\1\65\11\15"+
    "\1\63\3\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\4\15\1\63\7\15\1\63\13\15\1\65\10\15\1\63"+
    "\1\15\1\63\2\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\2\15\1\150\25\15\1\65\15\15\1\66\1\0"+
    "\1\15\1\150\3\15\1\0\2\15\12\0\1\115\13\15"+
    "\1\156\13\15\1\65\12\15\1\156\2\15\1\66\1\0"+
    "\2\15\1\115\2\15\1\0\2\15\12\0\10\15\1\63"+
    "\17\15\1\65\15\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\1\115\2\15\1\115\24\15\1\65\6\15\1\115"+
    "\6\15\1\66\1\0\2\15\1\115\2\15\1\0\2\15"+
    "\12\0\12\15\1\157\15\15\1\65\15\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\11\15\1\157\16\15\1\65"+
    "\3\15\1\157\11\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\14\15\1\157\13\15\1\65\12\15\1\157\2\15"+
    "\1\66\1\0\5\15\1\0\2\15\12\0\27\15\1\64"+
    "\1\65\15\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\30\15\1\65\1\15\1\114\13\15\1\66\1\0\5\15"+
    "\1\0\2\114\12\0\11\15\1\160\2\15\1\160\2\15"+
    "\1\63\10\15\1\65\3\15\1\160\6\15\1\160\2\15"+
    "\1\66\1\0\5\15\1\0\2\15\12\0\10\15\1\161"+
    "\10\15\1\162\6\15\1\65\15\15\1\66\1\0\5\15"+
    "\1\0\2\15\12\0\1\163\26\15\1\164\1\65\15\15"+
    "\1\66\1\0\2\15\1\163\2\15\1\0\2\15\12\0"+
    "\5\15\1\165\1\15\1\166\14\15\1\167\3\15\1\65"+
    "\4\15\1\166\6\15\1\167\1\15\1\66\1\0\3\15"+
    "\1\165\1\15\1\0\2\15\12\0\12\15\1\160\1\170"+
    "\14\15\1\65\15\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\11\15\1\171\14\15\1\172\1\15\1\65\3\15"+
    "\1\171\11\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\1\15\1\173\3\15\1\165\1\15\1\166\2\15\1\174"+
    "\2\15\1\175\1\15\1\63\4\15\1\167\3\15\1\65"+
    "\4\15\1\166\4\15\1\175\1\15\1\167\1\15\1\66"+
    "\1\0\3\15\1\165\1\15\1\0\2\15\12\0\2\15"+
    "\1\176\25\15\1\65\15\15\1\66\1\0\1\15\1\176"+
    "\3\15\1\0\2\15\12\0\1\15\1\177\1\200\1\201"+
    "\14\15\1\202\6\15\1\203\1\65\6\15\1\201\1\202"+
    "\5\15\1\66\1\0\1\15\1\200\3\15\1\0\2\15"+
    "\12\0\1\204\27\15\1\65\15\15\1\66\1\0\2\15"+
    "\1\204\2\15\1\0\2\15\12\0\30\130\1\205\15\130"+
    "\2\0\5\130\1\0\2\130\23\0\1\132\20\0\1\131"+
    "\1\0\1\132\21\0\2\131\44\0\1\206\22\0\1\207"+
    "\2\206\44\0\1\131\23\0\2\131\12\0\30\15\1\65"+
    "\4\15\1\210\10\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\10\15\1\161\10\15\1\162\6\15\1\65\1\15"+
    "\1\114\13\15\1\66\1\0\5\15\1\0\2\114\12\0"+
    "\1\15\1\173\3\15\1\165\1\15\1\166\2\15\1\174"+
    "\2\15\1\175\1\15\1\63\4\15\1\167\3\15\1\65"+
    "\1\15\1\114\2\15\1\166\4\15\1\175\1\15\1\167"+
    "\1\15\1\66\1\0\3\15\1\165\1\15\1\0\2\114"+
    "\65\0\1\211\67\0\1\7\56\0\1\7\111\0\2\212"+
    "\15\0\1\213\1\0\1\213\2\0\2\213\7\0\1\213"+
    "\2\0\1\213\5\0\1\213\1\0\1\213\2\0\1\213"+
    "\4\0\1\213\6\0\1\213\2\0\2\213\12\0\30\146"+
    "\1\0\15\146\1\66\1\0\5\146\1\0\2\146\12\0"+
    "\4\15\1\214\23\15\1\65\10\15\1\214\4\15\1\66"+
    "\1\0\5\15\1\0\2\15\12\0\1\63\27\15\1\65"+
    "\15\15\1\66\1\0\2\15\1\63\2\15\1\0\2\15"+
    "\12\0\5\15\1\115\1\15\1\215\7\15\2\115\7\15"+
    "\1\65\4\15\1\215\2\15\1\115\5\15\1\66\1\0"+
    "\3\15\1\115\1\15\1\0\2\15\12\0\7\15\1\63"+
    "\20\15\1\65\4\15\1\63\10\15\1\66\1\0\5\15"+
    "\1\0\2\15\12\0\1\15\1\63\26\15\1\65\1\63"+
    "\1\15\1\63\12\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\30\15\1\65\1\63\1\15\1\63\12\15\1\66"+
    "\1\0\5\15\1\0\2\15\12\0\11\15\1\216\16\15"+
    "\1\65\3\15\1\216\11\15\1\66\1\0\5\15\1\0"+
    "\2\15\12\0\1\15\1\63\1\64\25\15\1\65\1\63"+
    "\1\15\1\63\12\15\1\66\1\0\1\15\1\64\3\15"+
    "\1\0\2\15\12\0\30\15\1\217\15\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\20\15\1\160\7\15\1\65"+
    "\7\15\1\160\5\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\21\15\1\160\6\15\1\65\15\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\3\15\1\220\24\15\1\65"+
    "\6\15\1\220\6\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\14\15\1\221\13\15\1\65\12\15\1\221\2\15"+
    "\1\66\1\0\5\15\1\0\2\15\12\0\20\15\1\222"+
    "\7\15\1\65\7\15\1\222\5\15\1\66\1\0\5\15"+
    "\1\0\2\15\12\0\26\15\1\63\1\15\1\65\15\15"+
    "\1\66\1\0\5\15\1\0\2\15\12\0\1\223\27\15"+
    "\1\65\15\15\1\66\1\0\2\15\1\223\2\15\1\0"+
    "\2\15\12\0\5\15\1\224\22\15\1\65\15\15\1\66"+
    "\1\0\3\15\1\224\1\15\1\0\2\15\12\0\15\15"+
    "\1\160\12\15\1\65\11\15\1\160\3\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\3\15\1\225\14\15\1\202"+
    "\7\15\1\65\6\15\1\225\1\202\5\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\10\15\1\160\17\15\1\65"+
    "\15\15\1\66\1\0\5\15\1\0\2\15\12\0\7\15"+
    "\1\226\20\15\1\65\4\15\1\226\10\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\13\15\1\227\14\15\1\65"+
    "\15\15\1\66\1\0\5\15\1\0\2\15\12\0\27\15"+
    "\1\160\1\65\15\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\1\160\27\15\1\65\15\15\1\66\1\0\2\15"+
    "\1\160\2\15\1\0\2\15\12\0\13\15\1\160\14\15"+
    "\1\65\15\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\21\15\1\162\1\160\5\15\1\65\15\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\1\15\1\173\26\15\1\65"+
    "\15\15\1\66\1\0\5\15\1\0\2\15\12\0\30\15"+
    "\1\230\15\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\16\15\1\231\11\15\1\65\15\15\1\66\1\0\1\231"+
    "\4\15\1\0\2\15\12\0\30\232\1\0\15\232\2\0"+
    "\5\232\1\0\2\232\44\0\1\206\23\0\2\206\12\0"+
    "\30\15\1\65\5\15\1\135\7\15\1\66\1\0\5\15"+
    "\1\0\2\15\47\0\1\233\34\0\5\15\1\63\22\15"+
    "\1\65\15\15\1\66\1\0\3\15\1\63\1\15\1\0"+
    "\2\15\12\0\5\15\1\115\11\15\2\115\7\15\1\65"+
    "\7\15\1\115\5\15\1\66\1\0\3\15\1\115\1\15"+
    "\1\0\2\15\12\0\3\15\1\234\24\15\1\65\6\15"+
    "\1\234\6\15\1\66\1\0\5\15\1\0\2\15\12\0"+
    "\20\146\1\235\7\146\1\0\7\146\1\235\5\146\2\0"+
    "\5\146\1\0\2\146\12\0\20\15\1\161\7\15\1\65"+
    "\7\15\1\161\5\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\30\15\1\236\15\15\1\66\1\0\5\15\1\0"+
    "\2\15\12\0\3\15\1\237\24\15\1\65\6\15\1\237"+
    "\6\15\1\66\1\0\5\15\1\0\2\15\12\0\11\15"+
    "\1\63\16\15\1\65\3\15\1\63\11\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\21\15\1\162\6\15\1\65"+
    "\15\15\1\66\1\0\5\15\1\0\2\15\12\0\14\15"+
    "\1\160\13\15\1\65\12\15\1\160\2\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\6\15\1\240\21\15\1\65"+
    "\15\15\1\66\1\0\5\15\1\0\2\15\12\0\17\146"+
    "\1\241\1\235\1\146\1\242\5\146\1\0\7\146\1\235"+
    "\5\146\2\0\5\146\1\0\2\146\12\0\1\15\1\63"+
    "\16\15\1\243\7\15\1\65\7\15\1\243\5\15\1\66"+
    "\1\0\5\15\1\0\2\15\46\0\1\244\35\0\25\15"+
    "\1\63\2\15\1\65\15\15\1\66\1\0\5\15\1\0"+
    "\2\15\12\0\17\146\1\245\1\246\7\146\1\0\7\146"+
    "\1\246\5\146\2\0\5\146\1\0\2\146\12\0\15\15"+
    "\1\247\12\15\1\65\11\15\1\247\3\15\1\66\1\0"+
    "\5\15\1\0\2\15\12\0\13\15\1\160\6\15\1\160"+
    "\5\15\1\217\15\15\1\66\1\0\5\15\1\0\2\15"+
    "\12\0\30\146\1\250\15\146\1\66\1\0\5\146\1\0"+
    "\2\146\12\0\30\146\1\251\15\146\1\66\1\0\5\146"+
    "\1\0\2\146\64\0\1\252\17\0\1\146\1\253\26\146"+
    "\1\254\15\146\1\66\1\0\5\146\1\0\2\146\12\0"+
    "\30\146\1\255\15\146\1\66\1\0\5\146\1\0\2\146"+
    "\12\0\20\15\1\63\7\15\1\65\7\15\1\63\5\15"+
    "\1\66\1\0\5\15\1\0\2\15\34\0\1\256\66\0"+
    "\1\256\126\0\1\257\15\0\30\146\1\254\15\146\1\66"+
    "\1\0\5\146\1\0\2\146\32\0\1\256\17\0\1\256"+
    "\50\0\1\260\122\0\1\142\1\0\1\143\20\0\1\256"+
    "\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\1\1\3\11\34\1\3\11\1\1\1\11"+
    "\1\1\4\11\3\1\1\0\1\11\43\1\2\0\5\1"+
    "\5\0\37\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\10\1\1\0\2\1\1\0\2\1\1\0\5\1"+
    "\1\0\3\1\3\0\1\1\2\0\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  /** previous jflex state */
  private int prevState;

  /**
   * This method creates a new Token
   *
   * @param style token style class
   * @param length token length
   */
  private Token symbol(String style, int length) {
    return new Token(style, length);
  }

  /**
   * This method creates a new Token
   *
   * @param style token style class
   */
  private Token symbol(String style) {
    return this.symbol(style, yytext().length());
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    prevState = YYINITIAL;
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return symbol("eof");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol("error");
            }
            // fall through
          case 20: break;
          case 2:
            { return symbol("syntax");
            }
            // fall through
          case 21: break;
          case 3:
            { return symbol("empty");
            }
            // fall through
          case 22: break;
          case 4:
            { yybegin(STRING);
    return symbol("string");
            }
            // fall through
          case 23: break;
          case 5:
            { yybegin(CHARACTER);
    return symbol("string");
            }
            // fall through
          case 24: break;
          case 6:
            { yybegin(COMMENT);
    return symbol("comment");
            }
            // fall through
          case 25: break;
          case 7:
            { return symbol("identifier");
            }
            // fall through
          case 26: break;
          case 8:
            { return symbol("keyword");
            }
            // fall through
          case 27: break;
          case 9:
            { return symbol("number");
            }
            // fall through
          case 28: break;
          case 10:
            { return symbol("comment");
            }
            // fall through
          case 29: break;
          case 11:
            { yybegin(YYINITIAL);
    return symbol("empty");
            }
            // fall through
          case 30: break;
          case 12:
            { return symbol("string");
            }
            // fall through
          case 31: break;
          case 13:
            { yybegin(YYINITIAL);
    return symbol("string");
            }
            // fall through
          case 32: break;
          case 14:
            { prevState = STRING;
    yybegin(SBACKSLASH);
    return symbol("stringb");
            }
            // fall through
          case 33: break;
          case 15:
            { yybegin(prevState);
    return symbol("stringb");
            }
            // fall through
          case 34: break;
          case 16:
            { prevState = CHARACTER;
    yybegin(SBACKSLASH);
    return symbol("stringb");
            }
            // fall through
          case 35: break;
          case 17:
            { return symbol("lbl");
            }
            // fall through
          case 36: break;
          case 18:
            { return symbol("register");
            }
            // fall through
          case 37: break;
          case 19:
            { return symbol("directive");
            }
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
